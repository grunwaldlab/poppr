[{"path":"/CODE_OF_CONDUCT.html","id":null,"dir":"","previous_headings":"","what":"Contributor Code of Conduct","title":"Contributor Code of Conduct","text":"contributors maintainers project, pledge respect people contribute reporting issues, posting feature requests, updating documentation, submitting pull requests patches, activities. committed making participation project harassment-free experience everyone, regardless level experience, gender, gender identity expression, sexual orientation, disability, personal appearance, body size, race, ethnicity, age, religion. Examples unacceptable behavior participants include use sexual language imagery, derogatory comments personal attacks, trolling, public private harassment, insults, unprofessional conduct. Project maintainers right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct. Project maintainers follow Code Conduct may removed project team. Instances abusive, harassing, otherwise unacceptable behavior may reported opening issue contacting one project maintainers. Code Conduct adapted Contributor Covenant (http:contributor-covenant.org), version 1.0.0, available http://contributor-covenant.org/version/1/0/0/","code":""},{"path":"/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to poppr","title":"Contributing to poppr","text":"Thank taking interest contributing poppr. welcome participate way feel appropriate long community code conduct respected üëç. four ways can contribute development poppr: reporting bug, fixing documentation errors, contributing new code, commenting issues/pull requests. Note majority activities require proficient R. new code documentation must approved @zkamvar.","code":""},{"path":"/CONTRIBUTING.html","id":"commenting-on-issues--pull-requests","dir":"","previous_headings":"","what":"Commenting on Issues / Pull Requests","title":"Contributing to poppr","text":"welcome comment issues pull requests regardless directly involved creating maintaining poppr. course, please respectful others follow code conduct.","code":""},{"path":"/CONTRIBUTING.html","id":"raising-an-issue--reporting-a-bug","dir":"","previous_headings":"","what":"Raising an Issue / Reporting a Bug","title":"Contributing to poppr","text":"issue tracker Bug Reports Feature Requests. think found bug, can raise issue going https://github.com/grunwaldlab/poppr/issues submitting reproducible example. guidelines help make process go smoothly:","code":""},{"path":"/CONTRIBUTING.html","id":"ensure-your-r-version-and-poppr-version-are-up-to-date","dir":"","previous_headings":"Raising an Issue / Reporting a Bug","what":"Ensure your R version and poppr version are up-to-date.","title":"Contributing to poppr","text":"check versions R poppr, can run following code output look something like : can check versions reported https://r-project.org https://cran.r-project.org/package=poppr.","code":"R.version.string packageVersion(\"poppr\") R.version.string #> [1] \"R version 3.4.1 (2017-06-30)\" packageVersion(\"poppr\") #> [1] '2.5.0'"},{"path":"/CONTRIBUTING.html","id":"make-sure-your-problem-is-reproducible-and-minimal","dir":"","previous_headings":"Raising an Issue / Reporting a Bug","what":"Make sure your problem is reproducible and minimal","title":"Contributing to poppr","text":"minimal reproducible example (reprex) ensures maintainers able address issue timely manner. easiest way use reprex package, excellent documentation create reprex: https://github.com/jennybc/reprex#---reprex. ‚Äôs example poppr-specific example: copy rendered code clipboard can paste directly github issue like : Please make sure examples run reasonable amount time. Usually maintainers run examples several times order fix issue. example takes 1 minute run, please find way reduce size example.","code":"library(\"reprex\") reprex({   suppressPackageStartupMessages(library(\"poppr\"))   data(Pinf)   Pinf.bd <- bruvo.dist(Pinf) }) suppressPackageStartupMessages(library(\"poppr\")) data(Pinf) Pinf.bd <- bruvo.dist(Pinf) #> Warning in bruvo.dist(Pinf):  #>  --------------------------------------------------------------  #>                         !!! ALERT !!!  #>   #>  This warning will become an ERROR in future versions of poppr.  #>  Please define your repeat lengths to avoid this error.  #>  --------------------------------------------------------------  #>  #> Repeat length vector for loci is not equal to the number of loci represented. #> Estimating repeat lengths from data: #>  c(2, 2, 6, 2, 2, 2, 2, 2, 3, 3, 2)"},{"path":"/CONTRIBUTING.html","id":"updating-documentation","dir":"","previous_headings":"","what":"Updating Documentation","title":"Contributing to poppr","text":"one best ways contribute poppr. see spelling error better way phrasing error message, vignette entry, manual page, feel free contribute! functions documented using roxygen2 comments functions . want edit documentation, please make changes make sure include roxygen comment (#') front additions. example documentation commit can found : https://github.com/grunwaldlab/poppr/commit/d721c5b.","code":""},{"path":"/CONTRIBUTING.html","id":"if-you-are-not-experienced-with-gitgithub","dir":"","previous_headings":"Updating Documentation","what":"If you are not experienced with git/github","title":"Contributing to poppr","text":"can make changes directly github clicking little pencil icon top right corner file view github. , github create copy poppr repository account can edit file. done editing file, may click ‚ÄúPropose File Change‚Äù bottom page (can also add short commit message leave entries blank). , taken form create Pull Request, can reveiw changes click ‚ÄúCreate Pull Request‚Äù. Details can found : https://help.github.com/articles/editing-files--another-user-s-repository/","code":""},{"path":"/CONTRIBUTING.html","id":"if-you-are-experienced-with-gitgithub","dir":"","previous_headings":"Updating Documentation","what":"If you are experienced with git/github","title":"Contributing to poppr","text":"fork poppr github account clone poppr desktop create new branch main push/sync repository make commit changes update documentation roxygen","code":""},{"path":"/CONTRIBUTING.html","id":"contributing-new-code","dir":"","previous_headings":"","what":"Contributing New Code","title":"Contributing to poppr","text":"want contribute code, must ensure accurate follows tidyverse style guidelines http://style.tidyverse.org/. can use following checklist contributions: written tests ensure code works (‚Äôs example code change test) followed tidyverse style guidelines documented changes NEWS file added contributor DESCRIPTION file checks https://travis-ci.org/grunwaldlab/poppr pass","code":""},{"path":"/ISSUE_TEMPLATE.html","id":"please-place-an-x-in-all-the-boxes-that-apply","dir":"","previous_headings":"","what":"Please place an ‚Äúx‚Äù in all the boxes that apply","title":"NA","text":"recent version poppr R searched solutions site poppr forum reproducible example want request new feature Please include brief description problem code example:","code":"# insert reprex here"},{"path":"/articles/mlg.html","id":"abstract","dir":"Articles","previous_headings":"","what":"Abstract","title":"Analysis of Multilocus Genotypes and Lineages in poppr `r packageVersion('poppr')`","text":"multilocus genotype unique combination alleles across two loci. organisms plant pathogens often reproduce clonally, multilocus genotypes invaluable identifying mode spread organism. document describe detail can define multilocus genotypes/lineages can use analyses genclone snpclone objects.","code":""},{"path":[]},{"path":"/articles/mlg.html","id":"multilocus-genotype-flavors","dir":"Articles","previous_headings":"","what":"Multilocus Genotype Flavors","title":"Analysis of Multilocus Genotypes and Lineages in poppr `r packageVersion('poppr')`","text":"three different ways constructing multilocus genotypes poppr. first simply na√Øve construction alleles must match make unique multilocus genotype. New version 2.0 ability use genetic distance collapse multilocus genotypes define custom multilocus lineages based information. can use function mll() display switch different multilocus genotypes/lineages. Notice got warning. monpop data set created mll() implemented. Luckily, warning gives us information fix . can see description says 264 original multilocus genotypes . know current MLG definition object. Let‚Äô see happens change . Now says 264 custom multilocus genotypes . course, look MLGs, see appear original definition: functions work genclone snpclone objects. section, demonstrate construct three multilocus genotype definitions different data sets.","code":"library(\"poppr\") data(monpop) monpop ##  ## This is a genclone object ## ------------------------- ## Genotype information: ##  ##    264 multilocus genotypes  ##    694 haploid individuals ##     13 codominant loci ##  ## Population information: ##  ##      1 stratum - Pop ##     12 populations defined -  ## 7_09_BB, 26_09_BB, 26_09_FR, ..., 45_10_FR, 26_11_BB, 26_11_FR head(mll(monpop, \"original\"), 20) # Showing the definitions for the first 20 samples ## Warning:  ##  The @mlg slot does not contain an MLG class object. ##  Returning the original mlgs. Please use: ##  ##  mll(monpop) <- \"original\" ##   ##  to convert your object. ##  [1] 260 179 169 168 167 221 152 133 144  78  78  79  81  44  41  40  40  38 119 ## [20] 118 mll(monpop) <- \"original\" monpop ##  ## This is a genclone object ## ------------------------- ## Genotype information: ##  ##    264 original multilocus genotypes  ##    694 haploid individuals ##     13 codominant loci ##  ## Population information: ##  ##      1 stratum - Pop ##     12 populations defined -  ## 7_09_BB, 26_09_BB, 26_09_FR, ..., 45_10_FR, 26_11_BB, 26_11_FR mll(monpop) <- \"custom\" monpop ##  ## This is a genclone object ## ------------------------- ## Genotype information: ##  ##    264 custom multilocus genotypes  ##    694 haploid individuals ##     13 codominant loci ##  ## Population information: ##  ##      1 stratum - Pop ##     12 populations defined -  ## 7_09_BB, 26_09_BB, 26_09_FR, ..., 45_10_FR, 26_11_BB, 26_11_FR head(mll(monpop, \"custom\"), 20) # Showing the definitions for the first 20 samples ##  [1] 260 179 169 168 167 221 152 133 144 78  78  79  81  44  41  40  40  38  119 ## [20] 118 ## 264 Levels: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 ... 264"},{"path":"/articles/mlg.html","id":"na√Øve-original","dir":"Articles","previous_headings":"Multilocus Genotype Flavors","what":"Na√Øve (‚Äúoriginal‚Äù)","title":"Analysis of Multilocus Genotypes and Lineages in poppr `r packageVersion('poppr')`","text":"default way poppr calculates multilocus genotypes. see immediately load genclone object. Let‚Äôs use example monpop (Everhart Scherm 2015). First, need reset data original MLGs. notice 694 samples, yet 264 multilocus genotypes data set 13 loci. sub-section, demonstrate MLGs constructed. na√Øve definition simply takes strings alleles compares equality. method quick easily interpretable, means things like genotyping error, hyper-variable loci, missing data contribute unique genotype might truly unique (Kamvar, Brooks, Gr√ºnwald 2015). give example, let‚Äôs imagine five samples alleles typed two loci. notice different multilocus genotypes. Indeed, analyze , see five multilocus genotypes. analyze tab slot object showing counts alleles per sample across two loci. can clearly see eye two samples alike. nmll() function counts number multilocus lineages sample. mll() function displays assignment multilocus lineages sample. Note: used mll() show us multilocus lineages. Later , use function switch different definitions. See ?mll details. Now let‚Äôs say included another sample partial missing data. Let‚Äôs say typed allele ‚Äú5‚Äù x locus, missing allele y locus. Now see 6 multilocus genotypes even though one contains missing data. Let‚Äôs also imagine included yet another sample low-frequency allele locus y, ‚Äú2‚Äù, allele ‚Äú5‚Äù locus x. , get completely different genotypes, notice genotypes added closer genotype shares 5 allele. reason happens na√Øve algorithm reports rank concatenated alleles like : Even though reason believe samples ‚Äúnew‚Äù ‚Äúmut‚Äù might actually genotype x.5 y.1 (MLG sample C), algorithm sees different. calculate pairwise euclidean distances samples, see ‚Äúnew‚Äù, ‚Äúmut‚Äù , ‚ÄúC‚Äù similar :  Therefore, might want consider ‚Äúnew‚Äù, ‚Äúmut‚Äù , ‚ÄúC‚Äù Multilocus Lineage (MLL). next section, see collapse multilocus genotypes genetic distance.","code":"mll(monpop) <- \"original\" monpop ##  ## This is a genclone object ## ------------------------- ## Genotype information: ##  ##    264 original multilocus genotypes  ##    694 haploid individuals ##     13 codominant loci ##  ## Population information: ##  ##      1 stratum - Pop ##     12 populations defined -  ## 7_09_BB, 26_09_BB, 26_09_FR, ..., 45_10_FR, 26_11_BB, 26_11_FR grid_example <- matrix(c(1, 4,                          1, 1,                          5, 1,                          9, 1,                          9, 4),                        ncol = 2,                        byrow = TRUE) rownames(grid_example) <- LETTERS[1:5] colnames(grid_example) <- c(\"x\", \"y\") grid_example ##   x y ## A 1 4 ## B 1 1 ## C 5 1 ## D 9 1 ## E 9 4 library(\"poppr\") x <- as.genclone(df2genind(grid_example, ploidy = 1)) tab(x)  # Look at the multilocus genotype table ##   x.1 x.5 x.9 y.4 y.1 ## A   1   0   0   1   0 ## B   1   0   0   0   1 ## C   0   1   0   0   1 ## D   0   0   1   0   1 ## E   0   0   1   1   0 nmll(x) # count the number of multilocus genotypes ## [1] 5 mll(x)  # show the multilocus genotype definitions ## [1] 5 4 3 1 2 x <- as.genclone(df2genind(rbind(grid_example, new = c(5, NA)), ploidy = 1)) tab(x)  # Note the missing data at locus 2. ##     x.1 x.5 x.9 y.4 y.1 ## A     1   0   0   1   0 ## B     1   0   0   0   1 ## C     0   1   0   0   1 ## D     0   0   1   0   1 ## E     0   0   1   1   0 ## new   0   1   0  NA  NA nmll(x) ## [1] 6 mll(x) ## [1] 6 5 3 1 2 4 grid_new <- rbind(grid_example,                   new = c(5, NA),                   mut = c(5, 2)                   ) x <- as.genclone(df2genind(grid_new, ploidy = 1)) tab(x) ##     x.1 x.5 x.9 y.4 y.1 y.2 ## A     1   0   0   1   0   0 ## B     1   0   0   0   1   0 ## C     0   1   0   0   1   0 ## D     0   0   1   0   1   0 ## E     0   0   1   1   0   0 ## new   0   1   0  NA  NA  NA ## mut   0   1   0   0   0   1 nmll(x) ## [1] 7 mll(x) ## [1] 7 6 4 1 2 5 3 (xt <- apply(tab(x), 1, paste, collapse = \"\")) ##           A           B           C           D           E         new  ##    \"100100\"    \"100010\"    \"010010\"    \"001010\"    \"001100\" \"010NANANA\"  ##         mut  ##    \"010001\" rank(xt, ties.method = \"first\") ##   A   B   C   D   E new mut  ##   7   6   4   1   2   5   3 library(\"ape\") raw_dist <- function(x){   dist(genind2df(x, usepop = FALSE)) } (xdis <- raw_dist(x)) ##            A        B        C        D        E      new ## B   3.000000                                              ## C   5.000000 4.000000                                     ## D   8.544004 8.000000 4.000000                            ## E   8.000000 8.544004 5.000000 3.000000                   ## new 5.656854 5.656854 0.000000 5.656854 5.656854          ## mut 4.472136 4.123106 1.000000 4.123106 4.472136 0.000000 plot.phylo(upgma(xdis))"},{"path":"/articles/mlg.html","id":"filtered-contracted","dir":"Articles","previous_headings":"Multilocus Genotype Flavors","what":"Filtered (‚Äúcontracted‚Äù)","title":"Analysis of Multilocus Genotypes and Lineages in poppr `r packageVersion('poppr')`","text":"remedy issues na√Øve definition multilocus genotypes, can utilize genetic distance, allow us collapse multilocus genotypes specific distance threshold. main function use section mlg.filter(). create dissimiliarity distance matrix data filter based matrix. can also utilize supplied distance matrix distance function.","code":""},{"path":"/articles/mlg.html","id":"main-usage","dir":"Articles","previous_headings":"Multilocus Genotype Flavors > Filtered (‚Äúcontracted‚Äù)","what":"Main usage","title":"Analysis of Multilocus Genotypes and Lineages in poppr `r packageVersion('poppr')`","text":"use mlg.filter(), need define thresold. threshold defines minimum distance consider two genotypes unique, anything clustered MLG. practice, ‚Äôs used like (using data euclidean distance described ): , told mlg.filter() set threshold 1 plus tiny number (explained next section) based distance matrix xdis. way manipulate object place. section, examples retrieving MLGs statistics function well use different distance functions reset MLGs.","code":"x # We have 7 MLGs before filtering ##  ## This is a genclone object ## ------------------------- ## Genotype information: ##  ##    7 original multilocus genotypes  ##    7 haploid individuals ##    2 codominant loci ##  ## Population information: ##  ##    0 strata.  ##    0 populations defined. mlg.filter(x, distance = xdis) <- 1 + .Machine$double.eps^0.5 x # Now we have 5 MLGs ##  ## This is a genclone object ## ------------------------- ## Genotype information: ##  ##    5 contracted multilocus genotypes ##      (1) [t], (xdis) [d], (farthest) [a]  ##    7 haploid individuals ##    2 codominant loci ##  ## Population information: ##  ##    0 strata.  ##    0 populations defined. mll(x) <- \"original\" # We'll reset to the naive definition"},{"path":"/articles/mlg.html","id":"thresholds","dir":"Articles","previous_headings":"Multilocus Genotype Flavors > Filtered (‚Äúcontracted‚Äù)","what":"Thresholds","title":"Analysis of Multilocus Genotypes and Lineages in poppr `r packageVersion('poppr')`","text":"saw , order collapse three new samples original 5 MLGs, set threshold just 1. show , use function return us MLGs created thresholds passed cluster MLLs (using stats argument). output, can see MLG 5 collapsed MLG 3. occured soon threshold passed 0. Take look happens add small number 1. Now set threshold just 1, 5 unique MLLs since MLG 3 collapsed MLG 4. way clustering happens, ‚Äôs important point happens attempt use threshold 0. Notice MLGs originally defined MLGs. Using threshold zero allows two MLGs separated zero genetic distance remain mutually unique.","code":"mll(x, \"original\") ## [1] 7 6 4 1 2 5 3 mlg.filter(x, distance = xdis, threshold = 1, stats = c(\"mlg\", \"thresholds\")) ## $MLGS ## [1] 7 6 4 1 2 3 3 ##  ## $THRESHOLDS ## [1] 0 (e <- .Machine$double.eps^0.5) # A very tiny number ## [1] 1.490116e-08 mlg.filter(x, distance = xdis, threshold = 1 + e, stats = c(\"mlg\", \"thresholds\")) ## $MLGS ## [1] 7 6 4 1 2 4 4 ##  ## $THRESHOLDS ## [1] 0 1 mlg.filter(x, distance = xdis, threshold = 0, stats = c(\"mlg\", \"thresholds\")) ## $MLGS ## [1] 7 6 4 1 2 5 3 ##  ## $THRESHOLDS ## numeric(0) mll(x, \"original\") ## [1] 7 6 4 1 2 5 3"},{"path":"/articles/mlg.html","id":"setting-the-genotypes","dir":"Articles","previous_headings":"Multilocus Genotype Flavors > Filtered (‚Äúcontracted‚Äù)","what":"Setting the genotypes","title":"Analysis of Multilocus Genotypes and Lineages in poppr `r packageVersion('poppr')`","text":"demonstrated beginning section, wanted reassign sample genotypes collapsed version, use mlg.filter() commands , use <- operator specify threshold. Note using mlg.table() show distribution multilocus genotypes filtering.   Notice information see changed. can see ‚Äôs printed 5 contracted multilocus genotypes, cryptic code underneath: Genclone snpclone objects always remember parameters used filtering multilocus genotypes, catch , use supplied distance (matrix function), must careful delete change object name. means don‚Äôt always specify distance assigning threshold:  DANGER! DANGER! convenient function, use matrix function created , must delete change name. name matrix/function stored, delete matrix/function used inform filtering, get error: Basically, object thinks matrix called xdis, can‚Äôt find anywhere. don‚Äôt worry, can restore function available. use raw_dist() function defined earlier. safest way, perhaps, use function defined poppr. example, ‚Äôll use Bruvo‚Äôs distance since takes account real value alleles (Bruvo et al. 2004). arguments distance function stored object well! course, multilocus genotypes changed forever, just stored different place. can access original, na√Øve multilocus genotypes using mll() function:","code":"x ##  ## This is a genclone object ## ------------------------- ## Genotype information: ##  ##    7 original multilocus genotypes  ##    7 haploid individuals ##    2 codominant loci ##  ## Population information: ##  ##    0 strata.  ##    0 populations defined. mlg.table(x) # Before: 7 MLGs ##       MLG.1 MLG.2 MLG.3 MLG.4 MLG.5 MLG.6 MLG.7 ## Total     1     1     1     1     1     1     1 mlg.filter(x, distance = xdis) <- 1 + e x ##  ## This is a genclone object ## ------------------------- ## Genotype information: ##  ##    5 contracted multilocus genotypes ##      (1) [t], (xdis) [d], (farthest) [a]  ##    7 haploid individuals ##    2 codominant loci ##  ## Population information: ##  ##    0 strata.  ##    0 populations defined. mlg.table(x) # After: 5 MLGs ##       MLG.1 MLG.2 MLG.4 MLG.6 MLG.7 ## Total     1     1     3     1     1 mlg.filter(x) <- 4.51 x ##  ## This is a genclone object ## ------------------------- ## Genotype information: ##  ##    3 contracted multilocus genotypes ##      (4.51) [t], (xdis) [d], (farthest) [a]  ##    7 haploid individuals ##    2 codominant loci ##  ## Population information: ##  ##    0 strata.  ##    0 populations defined. mlg.table(x) ##       MLG.1 MLG.4 MLG.6 ## Total     2     3     2 rm(xdis) # NOOOOOO! try(mlg.filter(x) <- 1 + e) ## Error : cannot evaluate distance function, it might be missing. ##  Error: cannot evaluate distance function, it might be missing. mlg.filter(x, distance = raw_dist) <- 1 + e x ##  ## This is a genclone object ## ------------------------- ## Genotype information: ##  ##    5 contracted multilocus genotypes ##      (1) [t], (raw_dist) [d], (farthest) [a]  ##    7 haploid individuals ##    2 codominant loci ##  ## Population information: ##  ##    0 strata.  ##    0 populations defined. bruvo.dist(x, replen = c(1, 1)) ##             A         B         C         D         E       new ## B   0.4375000                                                   ## C   0.9062500 0.4687500                                         ## D   0.9355469 0.4980469 0.4687500                               ## E   0.4980469 0.9355469 0.9062500 0.4375000                     ## new 0.9375000 0.9375000 0.0000000 0.9375000 0.9375000           ## mut 0.8437500 0.7187500 0.2500000 0.7187500 0.8437500 0.0000000 mlg.filter(x, distance = bruvo.dist, replen = c(1, 1)) <- 0.44 x ##  ## This is a genclone object ## ------------------------- ## Genotype information: ##  ##    3 contracted multilocus genotypes ##      (0.44) [t], (bruvo.dist) [d], (farthest) [a]  ##    7 haploid individuals ##    2 codominant loci ##  ## Population information: ##  ##    0 strata.  ##    0 populations defined. mll(x, \"original\") ## [1] 7 6 4 1 2 5 3 mll(x) # contracted ## [1] 6 6 4 1 1 4 4 mll(x) <- \"original\" mll(x) # original ## [1] 7 6 4 1 2 5 3"},{"path":"/articles/mlg.html","id":"tie-breakers-algorithms","dir":"Articles","previous_headings":"Multilocus Genotype Flavors > Filtered (‚Äúcontracted‚Äù)","what":"Tie breakers (algorithms)","title":"Analysis of Multilocus Genotypes and Lineages in poppr `r packageVersion('poppr')`","text":"Underlying mlg.filter three algorithms decide genotypes go together (Kamvar, Brooks, Gr√ºnwald 2015): nearest neighbor farthest neighbor (default) average neighbor (UPGMA) can specify algorithm want use clustering algorithm argument. algorithms different behaviors comes collapsing multilocus genotypes. short, farthest neighbor conservative, nearest neighbor can chaining effect, average neighbor somewhere . choice algorithm really depends biology organism. help visualize , function filter_stats(), plot output filtering algorithm. simplicity, use Pinf data set representing Phytophthora infestans samples Mexico South America (Goss et al. 2009).  can see different algorithms behave similarly small thresholds, begin differ larger thresholds. function useful finding thresholds MLLs collapsed, can help choosing threshold collapses putative clones sample lineages.","code":"data(Pinf) Pinf ##  ## This is a genclone object ## ------------------------- ## Genotype information: ##  ##    72 multilocus genotypes  ##    86 tetraploid individuals ##    11 codominant loci ##  ## Population information: ##  ##     2 strata - Continent, Country ##     2 populations defined - South America, North America pinfreps <- fix_replen(Pinf, c(2, 2, 6, 2, 2, 2, 2, 2, 3, 3, 2)) pinf_filtered <- filter_stats(Pinf, distance = bruvo.dist, replen = pinfreps, plot = TRUE)"},{"path":"/articles/mlg.html","id":"choosing-a-threshold","dir":"Articles","previous_headings":"Multilocus Genotype Flavors > Filtered (‚Äúcontracted‚Äù)","what":"Choosing a threshold","title":"Analysis of Multilocus Genotypes and Lineages in poppr `r packageVersion('poppr')`","text":"chosen genetic distance filtering algorithm, must decide threshold represent minimum genetic distance two individuals considered different clonal lineages. One method described literature choosing threshold look initial, small peak histogram pairwise genetic distances set threshold peak larger peak `Bailleul, Stoeckel, Arnaud-Haond (2016). initial peak likely represents clones differentiated small set random mutations. can see figure threshold ~0.11 ‚Äúfarthest neighbor‚Äù algorithm. However, peak obvious, another method look largest gap putative thresholds. , can use cutoff_predictor() function output filter_stats(). noted method perfect solution. take results , can find threshold algorithm: Now can define multilocus lineages P. infestans following criteria: Note: Please take care critically evaluate results make sure applies data. function give answer whether one truely exists. Additionally, diploid organisms, another method choosing threshold available RClone package involves simulating outcrossing inbreeding events (Bailleul, Stoeckel, Arnaud-Haond 2016).","code":"print(farthest_thresh <- cutoff_predictor(pinf_filtered$farthest$THRESHOLDS)) ## [1] 0.1132221 print(average_thresh  <- cutoff_predictor(pinf_filtered$average$THRESHOLDS)) ## [1] 0.1084407 print(nearest_thresh  <- cutoff_predictor(pinf_filtered$nearest$THRESHOLDS)) ## [1] 0.1092773 mlg.filter(Pinf, distance = bruvo.dist, replen = pinfreps, algorithm = \"f\") <- farthest_thresh Pinf ##  ## This is a genclone object ## ------------------------- ## Genotype information: ##  ##    48 contracted multilocus genotypes ##       (0.113) [t], (bruvo.dist) [d], (farthest) [a]  ##    86 tetraploid individuals ##    11 codominant loci ##  ## Population information: ##  ##     2 strata - Continent, Country ##     2 populations defined - South America, North America"},{"path":"/articles/mlg.html","id":"custom-custom","dir":"Articles","previous_headings":"Multilocus Genotype Flavors","what":"Custom (‚Äúcustom‚Äù)","title":"Analysis of Multilocus Genotypes and Lineages in poppr `r packageVersion('poppr')`","text":"Sometimes multilocus genotypes defined just genetic data useful able analyze genotype definitions. Luckily, way . Poppr support custom multilocus genotypes. example, simulated data set 50 samples 26 multilocus genotypes. Let‚Äôs change MLGs letters instead numbers. use mll.custom() .  even works minimum spanning networks:  Let‚Äôs say realized strong evidence MLG ‚ÄúQ‚Äù MLG ‚ÄúM‚Äù. wanted change , simply change factor levels: can plot  Notice minimum spanning network architecture stayed , labels changed.","code":"data(partial_clone) pc <- as.genclone(partial_clone) mll(pc) ##  [1]  8  9 23 24 22 21 10  3 22 11 24  9 25  4 12  2 14  1  9  9  9 26  7 13 23 ## [26]  3 17 22  6 20 22 12  5 25 13 21 15 13 13 13  2 19 18 13 23 16  1 11 25  4 LETTERS[mll(pc)]  # The new MLGs ##  [1] \"H\" \"I\" \"W\" \"X\" \"V\" \"U\" \"J\" \"C\" \"V\" \"K\" \"X\" \"I\" \"Y\" \"D\" \"L\" \"B\" \"N\" \"A\" \"I\" ## [20] \"I\" \"I\" \"Z\" \"G\" \"M\" \"W\" \"C\" \"Q\" \"V\" \"F\" \"T\" \"V\" \"L\" \"E\" \"Y\" \"M\" \"U\" \"O\" \"M\" ## [39] \"M\" \"M\" \"B\" \"S\" \"R\" \"M\" \"W\" \"P\" \"A\" \"K\" \"Y\" \"D\" mll.custom(pc) <- LETTERS[mll(pc)] mlg.table(pc) ##   A B C D E F G H I J K L M N O P Q R S T U V W X Y Z ## 1 0 1 0 0 1 1 0 1 1 0 0 0 0 1 1 0 0 0 0 0 0 2 2 0 2 0 ## 2 1 0 1 2 0 0 0 0 1 0 1 0 1 0 0 1 0 0 1 1 1 0 0 0 1 1 ## 3 1 0 0 0 0 0 1 0 1 1 0 1 2 0 0 0 1 1 0 0 0 1 1 1 0 0 ## 4 0 1 1 0 0 0 0 0 2 0 1 1 3 0 0 0 0 0 0 0 1 1 0 1 0 0 pcpal <- colorRampPalette(c(\"blue\", \"gold\")) set.seed(9001) pcmsn <- bruvo.msn(pc, replen = rep(1, nLoc(pc)), palette = pcpal,                    vertex.label.color = \"firebrick\", vertex.label.font = 2,                    vertex.label.cex = 1.5) mll.levels(pc)[mll.levels(pc) == \"Q\"] <- \"M\" set.seed(9001) pcmsn <- bruvo.msn(pc, replen = rep(1, nLoc(pc)), palette = pcpal,                    vertex.label.color = \"firebrick\", vertex.label.font = 2,                    vertex.label.cex = 1.5)"},{"path":"/articles/mlg.html","id":"diversity-analysis","dir":"Articles","previous_headings":"","what":"Diversity Analysis","title":"Analysis of Multilocus Genotypes and Lineages in poppr `r packageVersion('poppr')`","text":"Data Import Manipulation vignette, first command demonstrated poppr(), command, produced table diversity statistics, calculated counts multilocus genotypes. statistics can replicated using function diversity_stats(). function calculates diversity statistics based table multilocus genotypes. Let‚Äôs analyze diversity peach brown rot pathogen, Monilinia fructicola, structured Symptom (Fruit Rot:FR Blossom Blight:BB) Year (Everhart Scherm 2015). Let‚Äôs first look distribution multilocus genotypes:  can see plots Fruit Rot (FR) lot clones canopies Blossom Blight (BB). makes biological sense since Fruit Rot infections clonally propagated, whereas Blossom Blight infections sexual propagules (Everhart Scherm 2015). Let‚Äôs look diversity metrics.","code":"data(monpop) splitStrata(monpop) <- ~Tree/Year/Symptom montab <- mlg.table(monpop, strata = ~Symptom/Year)"},{"path":"/articles/mlg.html","id":"basic-statistics","dir":"Articles","previous_headings":"Diversity Analysis","what":"Basic Statistics","title":"Analysis of Multilocus Genotypes and Lineages in poppr `r packageVersion('poppr')`","text":"function diversity_stats() used get basic diversity statistics:","code":"(monstat <- diversity_stats(montab)) ##        Index ## Pop            H        G    lambda       E.5 ##   BB_9  3.580258 25.92405 0.9614258 0.7145086 ##   FR_9  3.103899 12.43711 0.9195955 0.5373402 ##   BB_10 2.944439 19.00000 0.9473684 1.0000000 ##   FR_10 4.066838 38.10132 0.9737542 0.6466786 ##   BB_11 3.401197 30.00000 0.9666667 1.0000000 ##   FR_11 3.094688 10.48941 0.9046657 0.4501543"},{"path":"/articles/mlg.html","id":"confidence-intervals","dir":"Articles","previous_headings":"Diversity Analysis","what":"Confidence Intervals","title":"Analysis of Multilocus Genotypes and Lineages in poppr `r packageVersion('poppr')`","text":"can get confidence intervals statistics using diversity_ci():  can see warning centering confidence interval. boxplots see distribution bootstrapped replicates, known biased. invite users please read documentation diversity_ci() typing ?diversity_ci. important careful interpreting results sometimes confidence confidence intervals exist outside possible range, exemplified BB_10 BB_11.","code":"diversity_ci(montab, n = 100L, raw = FALSE) ##  ## Confidence Intervals have been centered around observed statistic. ## Please see ?diversity_ci for details. ##          H H.est           H.ci    G G.est             G.ci lambda lambda.est ## BB_9  3.58  3.19 (3.341, 3.819) 25.9 19.26  (19.298, 32.55)  0.961      0.946 ## FR_9  3.10  2.97 (2.912, 3.296) 12.4 11.98  (9.918, 14.956)  0.920      0.916 ## BB_10 2.94  2.37 (2.664, 3.225) 19.0  9.81 (15.986, 22.014)  0.947      0.895 ## FR_10 4.07  3.87 (3.926, 4.207) 38.1 33.63 (31.199, 45.004)  0.974      0.970 ## BB_11 3.40  2.83 (3.173, 3.629) 30.0 15.28 (26.066, 33.934)  0.967      0.933 ## FR_11 3.09  2.85 (2.802, 3.387) 10.5  9.81   (6.73, 14.249)  0.905      0.894 ##            lambda.ci   E.5 E.5.est         E.5.ci ## BB_9  (0.942, 0.981) 0.715   0.776  (0.599, 0.83) ## FR_9  (0.902, 0.937) 0.537   0.593 (0.488, 0.587) ## BB_10 (0.913, 0.981) 1.000   0.894 (0.921, 1.079) ## FR_10  (0.968, 0.98) 0.647   0.691 (0.579, 0.714) ## BB_11 (0.948, 0.986) 1.000   0.889 (0.936, 1.064) ## FR_11 (0.861, 0.949) 0.450   0.533   (0.35, 0.55)"},{"path":"/articles/mlg.html","id":"custom-statistics","dir":"Articles","previous_headings":"Diversity Analysis","what":"Custom Statistics","title":"Analysis of Multilocus Genotypes and Lineages in poppr `r packageVersion('poppr')`","text":"diversity_* functions, can use custom diversity statistics. common one get requests clonal fraction, \\(\\frac{MLG}{N}\\) number multilocus genotypes number samples. can add writing function. Keep mind, write matrix vector counts want able bootstrap . can use filtered custom MLGs compare diversity. , ‚Äôm filtering genotypes monpop different single mutational step (Bruvo et al. 2004). One mutational step single allele Bruvo‚Äôs distance equivalent 0.5, single mutational step haploid organism 13 loci 0.5/13.  can see filtered MLLs tend less diverse. makes intuitive sense creating larger classes multilocus genotypes.","code":"myCF <- function(x){  x <- drop(as.matrix(x))  if (length(dim(x)) > 1){ # if it's a matrix    res <- rowSums(x > 0)/rowSums(x)  } else {                 # if it's a vector    res <- sum(x > 0)/sum(x)  }  return(res) } (monstat2 <- diversity_stats(montab, CF = myCF)) ##        Index ## Pop            H        G    lambda       E.5        CF ##   BB_9  3.580258 25.92405 0.9614258 0.7145086 0.7031250 ##   FR_9  3.103899 12.43711 0.9195955 0.5373402 0.2585366 ##   BB_10 2.944439 19.00000 0.9473684 1.0000000 1.0000000 ##   FR_10 4.066838 38.10132 0.9737542 0.6466786 0.3405018 ##   BB_11 3.401197 30.00000 0.9666667 1.0000000 1.0000000 ##   FR_11 3.094688 10.48941 0.9046657 0.4501543 0.4536082 # Repeat lengths are necessary reps <- fix_replen(monpop,                    c(CHMFc4 = 7, CHMFc5 = 2, CHMFc12 = 4,                      SEA = 4, SED = 4, SEE = 2, SEG = 6,                      SEI = 3, SEL = 4, SEN = 2,                      SEP = 4, SEQ = 2, SER = 4))  # Adding a little bit, so the threshold is included. e <- .Machine$double.eps^0.5  # Using the default farthest neighbor algorithm to collapse genotypes mlg.filter(monpop, distance = bruvo.dist, replen = reps) <- (0.5/13) + e montabf <- mlg.table(monpop, strata = ~Symptom/Year) (monstatf <- diversity_stats(montabf, CF = myCF)) ##        Index ## Pop            H        G    lambda       E.5        CF ##   BB_9  3.442117 23.81395 0.9580078 0.7541044 0.6093750 ##   FR_9  3.003859 11.99001 0.9165973 0.5734961 0.2195122 ##   BB_10 2.944439 19.00000 0.9473684 1.0000000 1.0000000 ##   FR_10 3.861202 33.10974 0.9697974 0.6901987 0.2724014 ##   BB_11 3.401197 30.00000 0.9666667 1.0000000 1.0000000 ##   FR_11 2.754565  8.00766 0.8751196 0.4762511 0.3195876 monstat2 - monstatf # Take the difference from the unfiltered ##        Index ## Pop             H         G      lambda         E.5         CF ##   BB_9  0.1381408 2.1100971 0.003417969 -0.03959575 0.09375000 ##   FR_9  0.1000406 0.4470973 0.002998215 -0.03615591 0.03902439 ##   BB_10 0.0000000 0.0000000 0.000000000  0.00000000 0.00000000 ##   FR_10 0.2056360 4.9915810 0.003956784 -0.04352013 0.06810036 ##   BB_11 0.0000000 0.0000000 0.000000000  0.00000000 0.00000000 ##   FR_11 0.3401226 2.4817496 0.029546179 -0.02609686 0.13402062 mll(monpop) <- \"original\""},{"path":"/articles/mlg.html","id":"jack-knife-rarefaction","dir":"Articles","previous_headings":"Diversity Analysis","what":"Jack-knife rarefaction","title":"Analysis of Multilocus Genotypes and Lineages in poppr `r packageVersion('poppr')`","text":"function diversity_ci() diversity_boot() option perform jack knife rarefaction calculations. means data randomly sub-sampled either smallest population size, whatever specified parameter n.rare, whichever bigger. ‚Äôs example previous data set:  can give comparable estimates diversity samples equal size.","code":"(monrare <- diversity_ci(montab, n = 100L, rarefy = TRUE, raw = FALSE)) ##  ## Samples for rarefaction: 19 ##          H H.est           H.ci    G G.est            G.ci lambda lambda.est ## BB_9  3.58  2.71 (2.492, 2.944) 25.9 13.93     (9.494, 19)  0.961      0.926 ## FR_9  3.10  2.31 (1.922, 2.625) 12.4  8.75 (5.306, 12.448)  0.920      0.880 ## BB_10 2.94  2.94           <NA> 19.0 19.00            <NA>  0.947      0.947 ## FR_10 4.07  2.70 (2.362, 2.871) 38.1 13.98  (8.804, 17.19)  0.974      0.926 ## BB_11 3.40  2.94           <NA> 30.0 19.00            <NA>  0.967      0.947 ## FR_11 3.09  2.32  (1.831, 2.64) 10.5  8.42   (4.4, 12.448)  0.905      0.871 ##            lambda.ci   E.5 E.5.est         E.5.ci ## BB_9  (0.895, 0.947) 0.715   0.907     (0.797, 1) ## FR_9   (0.811, 0.92) 0.537   0.831   (0.7, 0.912) ## BB_10           <NA> 1.000   1.000           <NA> ## FR_10 (0.886, 0.942) 0.647   0.919 (0.775, 0.972) ## BB_11           <NA> 1.000   1.000           <NA> ## FR_11  (0.773, 0.92) 0.450   0.772   (0.627, 0.9)"},{"path":"/articles/mlg.html","id":"clone-correction","dir":"Articles","previous_headings":"","what":"Clone Correction","title":"Analysis of Multilocus Genotypes and Lineages in poppr `r packageVersion('poppr')`","text":"Clone-correction works hierarchically uses first MLG copy encountered data per population. straightforward na√Øve MLGs, MLLs collapsed genetic distance custom MLLs, might change results slightly. example, let‚Äôs look monpop filtered MLLs created earlier. show order samples can affect sampling, take sum pairwise distances clone-corrected samples (corrected without respect populations): Now, happens randomly sample individuals? Notice getting different results based order samples. mean procedure doesn‚Äôt work, just means must careful clone-correcting modified multilocus genotypes.","code":"nmll(monpop, \"original\") ## [1] 264 nmll(monpop, \"contracted\") ## [1] 214 mll(monpop) <- \"contracted\" monpop %>%   clonecorrect(strata = NA) %>%  # 1. clone correct whole data set   dist() %>%                     # 2. calculate distance   sum()                          # 3. take the sum of the distance ## [1] 90268.73 set.seed(999) monpop[sample(nInd(monpop))] %>% # 1. shuffle samples   clonecorrect(strata = NA) %>%  # 2. clone correct whole data set   dist() %>%                     # 3. calculate distance   sum()                          # 4. take the sum of the distance ## [1] 90257.92 set.seed(1000) monpop[sample(nInd(monpop))] %>% # 1. shuffle samples   clonecorrect(strata = NA) %>%  # 2. clone correct whole data set   dist() %>%                     # 3. calculate distance   sum()                          # 4. take the sum of the distance ## [1] 90311.96"},{"path":"/articles/mlg.html","id":"conclusions","dir":"Articles","previous_headings":"","what":"Conclusions","title":"Analysis of Multilocus Genotypes and Lineages in poppr `r packageVersion('poppr')`","text":"demonstrated new methods treating multilocus genotypes microsatellite data, important remember functions can work source data stored either genclone snpclone (derived genlight) object. Especially mlg.filter(), new functions allow flexible analysis WGS data clonal organisms true clones may differ mutations/errors/missing data. analyses, important understand algorithms used take account interpreting results.","code":""},{"path":[]},{"path":"/articles/poppr_manual.html","id":"abstract","dir":"Articles","previous_headings":"","what":"Abstract","title":"Data import and manipulation in poppr version `r packageVersion('poppr')`","text":"Poppr provides open-source, cross-platform tools quick analysis population genetic data enabling focus data analysis interpretation. plethora packages population genetic analysis, able offer quick easy analysis populations mixed reproductive modes. Poppr‚Äôs main advantage ease use integration packages adegenet vegan, including support novel methods clone correction, multilocus genotype analysis, calculation Bruvo‚Äôs distance, index association. New features version 2.0 include generation minimum spanning networks reticulation, calculation index association genomic data, filtering multilocus genotypes based genetic distance.","code":""},{"path":[]},{"path":"/articles/poppr_manual.html","id":"intro:purpose","dir":"Articles","previous_headings":"Introduction","what":"Purpose","title":"Data import and manipulation in poppr version `r packageVersion('poppr')`","text":"Poppr R package convenient functions analysis genetic data mixed modes reproduction including sexual clonal reproduction. many R packages CRAN repositories tools population genetic analyses, appropriate populations mixed modes reproduction. several stand-alone programs can handle types data sets, often platform specific often accept specific data types. Furthermore, typical analysis often involves switching many programs, converting data specific format. Poppr designed make analysis populations mixed reproductive modes streamlined user friendly researcher using can focus data analysis interpretation. Poppr allows analysis haploid diploid dominant/co-dominant marker data including microsatellites, Single Nucleotide Polymorphisms (SNP), Amplified Fragment Length Polymorphisms (AFLP). avoid creating yet another file format specific program, poppr created backbone popular R package adegenet can take file formats adegenet can take (Genpop, Genetix, Fstat, Structure) newly introduces compatibility GenAlEx formatted files (exported CSV). means anything can analyze adegenet can analyzed poppr. real power poppr data manipulation analytic tools. Poppr ability bootstrap, clone-censor, subset data sets. poppr can also quickly calculate Bruvo‚Äôs distance, index association, easily determine multilocus genotypes shared across populations. version 2.0, tools genomic data introduced (Zhian N. Kamvar, Brooks, Gr√ºnwald 2015). tools allow researchers define means clone lost sea genomic data, generate bootstrapped dendrograms genetic distance, calculate minimum spanning networks reticulations reveal underlying population structure clonal data.","code":""},{"path":"/articles/poppr_manual.html","id":"resources","dir":"Articles","previous_headings":"Introduction","what":"Resources","title":"Data import and manipulation in poppr version `r packageVersion('poppr')`","text":"vignette cover material need know efficiently analyze data poppr. information methods analysis (eg. index association, distance measures, AMOVA, ‚Ä¶), please read manual pages provided function. poppr expanded version 1.0, vignette also expanded 80+ pages. result, became clear 22,000 words less manual novella terrible plot. remedy , vignette focus data manipulation separate vignette, ‚Äúalgo‚Äù, written give algorithmic details analyses introduced poppr. spring 2014, Drs. Niklaus J. Gr√ºnwald, Sydney E. Everhart, co- authored primer using R population genetic analysis. located https://grunwaldlab.github.io/Population_Genetics_in_R/ source code can found github site.","code":""},{"path":"/articles/poppr_manual.html","id":"getting-help","dir":"Articles","previous_headings":"Introduction","what":"Getting Help","title":"Data import and manipulation in poppr version `r packageVersion('poppr')`","text":"questions feedback, feel free send message poppr forum https://groups.google.com/d/forum/poppr. can submit bug reports github site: https://github.com/grunwaldlab/poppr/issues","code":""},{"path":"/articles/poppr_manual.html","id":"acknowledgments","dir":"Articles","previous_headings":"Introduction","what":"Acknowledgments","title":"Data import and manipulation in poppr version `r packageVersion('poppr')`","text":"Much thanks goes Sydney E. Everhart alpha testing, beta testing, feature requests, proofreading, data contribution, moral support throughout writing package manual. Thanks also Brian Knaus, Ignazio Carbone, David Cooke, Corine Schoebel, Jane Stewart, Zaid Abdo beta testing feedback. following data sets included poppr: Pinf (SSR, Phytophthora infestans)(Erica M. Goss et al. 2014) monpop (SSR, Monilinia fructicola)(Everhart Scherm 2015) Aeut (AFLP, Aphanomyces eutieches)(N. J. Gr√ºnwald Hoheisel 2006) Pram (SSR, Phytophthora ramorum)(Z. Kamvar et al. 2015; Erica M. Goss et al. 2009)","code":""},{"path":"/articles/poppr_manual.html","id":"citation","dir":"Articles","previous_headings":"Introduction","what":"Citation","title":"Data import and manipulation in poppr version `r packageVersion('poppr')`","text":"cite poppr, please type R console: formal publication first version poppr published journal PeerJ: https://peerj.com/articles/281/ (Zhian N. Kamvar, Tabima, Gr√ºnwald 2014). new features version 2.0 published Frontiers https://doi.org/10.3389/fgene.2015.00208 (Zhian N. Kamvar, Brooks, Gr√ºnwald 2015).","code":"citation(package = \"poppr\") ## To cite poppr in publications or presentations, please specify poppr ## version 2.9.5 and with the following citation: ##  ##   Kamvar ZN, Tabima JF, Gr√ºnwald NJ. (2014) Poppr: an R package for ##   genetic analysis of populations with clonal, partially clonal, and/or ##   sexual reproduction. PeerJ 2:e281. doi: 10.7717/peerj.281 ##  ##   Kamvar ZN, Brooks JC and Gr√ºnwald NJ (2015) Novel R tools for ##   analysis of genome-wide population genetic data with emphasis on ##   clonality. Front. Genet. 6:208. doi: 10.3389/fgene.2015.00208 ##  ## To see these entries in BibTeX format, use 'print(<citation>, ## bibtex=TRUE)', 'toBibtex(.)', or set ## 'options(citation.bibtex.max=999)'."},{"path":[]},{"path":"/articles/poppr_manual.html","id":"intro:install","dir":"Articles","previous_headings":"Installation and Quick Start","what":"Installation","title":"Data import and manipulation in poppr version `r packageVersion('poppr')`","text":"manual assumes installed R. , please refer CRAN home page https://cran.r-project.org/. also recommend Rstudio IDE (https://rstudio.com/), allows user view R console, environment, scripts, plots single window.","code":""},{"path":"/articles/poppr_manual.html","id":"from-cran","dir":"Articles","previous_headings":"Installation and Quick Start > Installation","what":"From CRAN","title":"Data import and manipulation in poppr version `r packageVersion('poppr')`","text":"install poppr CRAN, select ‚ÄúPackage Installer‚Äù menu ‚ÄúPackages & Data‚Äù GUI type: dependencies also installed. unfortunate case work, please consult https://cran.r-project.org/doc/manuals/R-admin.html#Installing-packages.","code":"install.packages(\"poppr\", repos = \"https://cloud.r-project.org/\")"},{"path":"/articles/poppr_manual.html","id":"from-github","dir":"Articles","previous_headings":"Installation and Quick Start > Installation","what":"From GitHub","title":"Data import and manipulation in poppr version `r packageVersion('poppr')`","text":"GitHub repository can find stable development versions poppr. Since poppr contains C code, needs compiled, means need working C compiler. Linux, , Windows OSX, might need download special tools: Windows Download Rtools: https://cran.r-project.org/bin/windows/Rtools/ OSX Download Xcode: https://developer.apple.com/xcode/ install GitHub, need download tarball since package called devtools download install package directly GitHub. installed dependencies (see section), download devtools: Now can execute command install_github() user repository name:","code":"install.packages(\"devtools\") devtools::install_github(\"grunwaldlab/poppr\")"},{"path":"/articles/poppr_manual.html","id":"intro:qstart","dir":"Articles","previous_headings":"Installation and Quick Start","what":"Quick start","title":"Data import and manipulation in poppr version `r packageVersion('poppr')`","text":"author assumes reached point manual, successfully installed R poppr. proceeding, aware R case sensitive. means words ‚ÄúCase‚Äù ‚Äúcase‚Äù different. also know R package library located. section, learn locate file, import R, make first analysis using poppr() function. R package library? R powerful community people submit extra code called ‚Äúpackages‚Äù help specific things. packages live certain place computer called R library. can find library typing .libPaths() Importing file R involves knowing path file typing R‚Äôs console. getfile() help provide point click interface selecting file. simply tool help get started. get better R, might feel don‚Äùt need . First, tell computer search R‚Äôs library, load poppr package, use getfile(): pop window appear like this1: popup window appears OSX (Mountain Lion) navigate R library select file called ‚Äúrootrot.csv‚Äù. don‚Äùt know poppr package lives, can find typing find.package(\"poppr\") R command line. select file, file name path stored variable, x. can confirm typing x R‚Äùs command line. can see x list two entries: $files shows files selected $path shows path files. use x$files access file. file GenAlEx format, import using read.genalex() analyze function poppr() get table diversity indices per population. output poppr() assigned variable popdata, let‚Äùs look data. fields see output include: Pop - Population name (Note ‚ÄúTotal‚Äù also means ‚ÄúPooled‚Äù). N - Number individuals observed. MLG - Number multilocus genotypes (MLG) observed. eMLG - number expected MLG smallest sample size \\(\\geq 10\\) based rarefaction. (Hurlbert 1971) SE - Standard error based eMLG (Heck, Belle, Simberloff 1975) H - Shannon-Wiener Index MLG diversity. (Shannon 1948) G - Stoddart Taylor‚Äùs Index MLG diversity. (Stoddart Taylor 1988) lambda - Simpson‚Äùs index, \\(\\lambda\\). E.5 - Evenness, \\(E_5\\). [Pielou (1975)](Ludwig Reynolds 1988)(Niklaus J. Gr√ºnwald et al. 2003) Hexp - Nei‚Äùs 1978 Expected Heterozygosity. (Nei 1978) Ia - index association, \\(I_A\\). (Brown, Feldman, Nevo 1980) (Smith et al. 1993) (Agapow Burt 2001) rbarD - standardized index association, \\(\\bar{r}_d\\). (Agapow Burt 2001) fields described function poppr. can access help page poppr typing ?poppr R console. One thing note output NaN column labeled SE. R, NaN means ‚Äúnumber‚Äù. produced calculation standard error based rarefaction analysis. Occasionally, calculation encounter situation must attempt take square root negative number. Since root negative number defined set real numbers, must therefore imaginary component, \\(\\). Unfortunately, R represent imaginary components numbers unless specifically tell . default, R represents NaN.","code":"library(\"poppr\") ## Loading required package: adegenet ## Loading required package: ade4 ##  ##    /// adegenet 2.1.10 is loaded //////////// ##  ##    > overview: '?adegenet' ##    > tutorials/doc/questions: 'adegenetWeb()'  ##    > bug reports/feature requests: adegenetIssues() ## Registered S3 method overwritten by 'pegas': ##   method      from ##   print.amova ade4 ## This is poppr version 2.9.5. To get started, type package?poppr ## OMP parallel support: unavailable x <- getfile() x ## $files ## [1] \"/path/to/R/poppr/files/rootrot.csv\" ##  ## $path ## [1] \"/path/to/R/poppr/files\" myData  <- read.genalex(x$files) myData popdata <- poppr(myData) popdata ##             Pop   N MLG  eMLG    SE     H     G lambda   E.5   Hexp    Ia rbarD   File ## 1      Athena_1   9   7  7.00 0.000 1.889  6.23  0.840 0.932 0.1081  2.92 0.210 myData ## 2      Athena_2  12  12 10.00 0.000 2.485 12.00  0.917 1.000 0.1999  4.16 0.128 myData ## 3      Athena_3  10   2  2.00 0.000 0.325  1.22  0.180 0.571 0.0107  2.00 1.000 myData ## 4      Athena_4  13   9  7.15 0.769 1.946  5.12  0.805 0.687 0.1012  5.49 0.372 myData ## 5      Athena_5  10   7  7.00 0.000 1.834  5.56  0.820 0.866 0.0802  4.53 0.353 myData ## 6      Athena_6   5   5  5.00 0.000 1.609  5.00  0.800 1.000 0.1143  2.46 0.190 myData ## 7      Athena_7  11  10  9.18 0.386 2.272  9.31  0.893 0.955 0.1584  2.13 0.086 myData ## 8      Athena_8   8   6  6.00 0.000 1.667  4.57  0.781 0.831 0.0791  3.86 0.323 myData ## 9      Athena_9  10  10 10.00 0.000 2.303 10.00  0.900 1.000 0.1532  2.82 0.118 myData ## 10    Athena_10   9   8  8.00 0.000 2.043  7.36  0.864 0.948 0.1230  2.85 0.137 myData ## 11 Mt. Vernon_1  10   9  9.00 0.000 2.164  8.33  0.880 0.952 0.1766  7.13 0.276 myData ## 12 Mt. Vernon_2   6   6  6.00 0.000 1.792  6.00  0.833 1.000 0.3940 20.65 0.492 myData ## 13 Mt. Vernon_3   8   6  6.00 0.000 1.667  4.57  0.781 0.831 0.1033  2.12 0.106 myData ## 14 Mt. Vernon_4  12   8  6.83 0.665 1.814  4.50  0.778 0.681 0.0823  3.01 0.255 myData ## 15 Mt. Vernon_5  17   7  5.54 0.828 1.758  5.07  0.803 0.848 0.0544  2.68 0.340 myData ## 16 Mt. Vernon_6  12  11  9.32 0.466 2.369 10.29  0.903 0.958 0.3001 19.50 0.467 myData ## 17 Mt. Vernon_7  12   9  7.82 0.649 2.095  7.20  0.861 0.870 0.0601  1.21 0.153 myData ## 18 Mt. Vernon_8  13   9  7.35 0.764 2.032  6.26  0.840 0.794 0.0430  1.15 0.169 myData ## 19        Total 187 119  9.61 0.612 4.558 68.97  0.986 0.720 0.3651 14.37 0.271 myData"},{"path":[]},{"path":[]},{"path":"/articles/poppr_manual.html","id":"how-does-r-represent-data-objective-data","dir":"Articles","previous_headings":"Import and Data types > Importing data into poppr {Get out of my dreams and into my R}","what":"How does R represent data? {Objective: data}","title":"Data import and manipulation in poppr version `r packageVersion('poppr')`","text":"Working data R means data stored inside ‚Äúobject‚Äù, stored computer‚Äùs memory. , ‚Äùs important know difference file object. anyone talking importing file R, referring spreadsheet text file lives folder hard drive. Spreadsheet files (saved *.csv files) normally imported R function read.table(). output read.table() data.frame. data.frame object represented computer‚Äôs memory. means exists long R running. good thing objects stored memory can manipulate way affect source data. Since R scripted language (instead point--click), manipulations can saved separate R file can easily adapted new data. course, data going entered R manually. Usually formatted manner can read popular population genetics programs. previously mentioned, since poppr based adegenet, ‚Äôs possible read following file formats genind object function import2genind(): Fstat Genepop Genetix Structure , introduce new way importing data genind genclone object GenAlEx formatted file.","code":""},{"path":"/articles/poppr_manual.html","id":"intro:import:read-genalex","dir":"Articles","previous_headings":"Import and Data types > Importing data into poppr {Get out of my dreams and into my R}","what":"Function: read.genalex","title":"Data import and manipulation in poppr version `r packageVersion('poppr')`","text":"popular program population genetics GenAlEx (https://biology-assets.anu.edu.au/GenAlEx/Welcome.html) (Rod Peakall Smouse 2012; R. Peakall Smouse 2006). GenAlEx runs within Excel environment can powerful analyses. Poppr added ability read *.CSV files2 produced GenAlEx format. can handle data types containing regions geographic coordinates, currently import allelic frequency data GenAlEx. Using poppr function read.genalex() import data adegenet‚Äùs genind object poppr‚Äùs genclone object (information ). ways formatting GenAlEx file, see manual : https://biology-assets.anu.edu.au/GenAlEx/Download_files/GenAlEx%206.5%20Guide.pdf example GenAlEx format. use data set called microbov adegenet package generate . data contains three demographic factors: Country, Species Breed contained within @slot (detailed ‚Äò‚Äô slot). first set population strata, define population combination strata, save file desktop. first 15 individuals 4 loci microbov data set. first column contains individual names, second column contains population names, subsequent column represents microsatellite genetic data. Highlighted red list populations relative sizes. GenAlEx format contains individuals rows loci columns. Individual data begins row 4. Column always contains individual names column B defines population individual. Notice three demographic factors data concatenated ‚Äú_‚Äù. allows us import one population factor use hierarchical levels genclone object. First three rows contain information pertaining global data set. important information poppr information contained row 3 first three columns row 1. Highlighted red figure definitions number populations respective sizes. redundant information, can remove . example valid data set can imported poppr. first 15 individuals 4 loci microbov data set. figure , however populations counts removed header row third number header replaced 1 GenAlEx formatted data can imported command read.genalex(), detailed : genalex - *.CSV file exported GenAlEx disk (example: my_genalex_file.csv). ploidy - number indicating ploidy data set (eg 2 diploids, 1 haploids). geo - GenAlEx allows geographic data within file. poppr, need follow first format outlined GenAlEx manual place geographic data genetic demographic data one blank column separating (See GenAlEx Manual details). geographic information file, set flag TRUE included within resulting genind object @slot. (don‚Äùt know , don‚Äùt worry. explained later ‚Äò‚Äô slot) region - format GenAlEx file include regions, can choose include separate column regional data, , since regional data must contiguous blocks, can simply format way data (see GenAlEx manual details). file organized manner, select option regional information stored @slot resulting genind object incorporated hierarchy genclone object. genclone - flag convert data genclone object (see Send clones info). sep - separator argument columns data. defaults ‚Äú,‚Äù. recode - data polyploid data, gives option recode . (See Polyploid Data details) Note regional data geographic data mutually exclusive. can one file, just make sure sheet geographic data always placed genetic demographic data. short example GenAlEx formatted data geographic regional formatting. first see data using command system.file() Now import data poppr like : Executing rootrot shows file now genclone format can used function poppr adegenet","code":"library(\"poppr\") data(microbov) strata(microbov) <- data.frame(other(microbov)) # set the strata microbov genind2genalex(microbov, file = \"~/Desktop/microbov.csv\") ## Extracting the table ... Writing the table to ~/Desktop/microbov.csv ... Done. read.genalex(genalex, ploidy = 2, geo = FALSE, region = FALSE,      genclone = TRUE, sep = \",\", recode = FALSE) system.file(\"files/rootrot.csv\", package=\"poppr\") ## [1] \"/path/to/R/library/poppr/files/rootrot.csv\" rootrot <- read.genalex(system.file(\"files/rootrot.csv\", package=\"poppr\")) rootrot ##  ## This is a genclone object ## ------------------------- ## Genotype information: ##  ##    119 original multilocus genotypes  ##    187 diploid individuals ##     56 dominant loci ##  ## Population information: ##  ##      1 stratum - Pop ##     18 populations defined -  ## Athena_1, Athena_2, Athena_3, ..., Mt. Vernon_6, Mt. Vernon_7, Mt. Vernon_8"},{"path":"/articles/poppr_manual.html","id":"intro:import:other","dir":"Articles","previous_headings":"Import and Data types > Importing data into poppr {Get out of my dreams and into my R}","what":"Other ways of importing data","title":"Data import and manipulation in poppr version `r packageVersion('poppr')`","text":"Adegenet already supports import FSTAT, Structure, Genpop, Genetix formatted files, data formats, can import using function import2genind. sequence data, check can use read.dna() ape package import data. can, can use adegenet function DNAbin2genind(). don‚Äùt formats handy, can still import data using R‚Äùs read.table along df2genind() adegenet. information, see adegenet‚Äôs ‚ÄúGetting Started‚Äù vignette.","code":""},{"path":"/articles/poppr_manual.html","id":"intro:import:genind2genalex","dir":"Articles","previous_headings":"Import and Data types > Importing data into poppr {Get out of my dreams and into my R}","what":"Function: genind2genalex (exporting data)","title":"Data import and manipulation in poppr version `r packageVersion('poppr')`","text":"course, able export data just useful able import , handy little function write GenAlEx formatted file wherever desire.WARNING: overwrite file exists name. pop - genind object. filename - specify path new file wish create. specify filename path, place file current working directory. quiet - set FALSE, status message printed console extraction progresses. pop - vector specifying custom population formula specifying strata combined new file. allstrata - TRUE default combine strata file unless specified new population factor. geo - Set TRUE, data frame matrix @slot genind object contains geographic coordinates individuals populations. Setting TRUE means resulting file two extra columns end file geographic coordinates. geodf - name data frame matrix containing geographic coordinates. sep - separator separate columns resulting file. First, simple example rootrot data demonstrated earlier section: ‚Äôs example exporting nancycats data set GenAlEx format geographic information. look nancycats geographic information, can see ‚Äùs coordinates population, individual: export : wanted assign geographic coordinate individual, can use trick knowing 17 populations data set: Now can export different file.","code":"genind2genalex(gid, filename = \"\", overwrite = FALSE, quiet = FALSE,      pop = NULL, allstrata = TRUE, geo = FALSE, geodf = \"xy\",      sep = \",\", sequence = FALSE) genind2genalex(rootrot, \"~/Desktop/rootrot.csv\") ## Extracting the table ... Writing the table to ~/Desktop/rootrot.csv ... Done. data(nancycats) other(nancycats)$xy ##            x         y ## P01 263.3498 171.10939 ## P02 183.5028 122.40790 ## P03 391.1050 254.70148 ## P04 458.6121  41.72336 ## P05 182.7769 219.08398 ## P06 335.2121 344.83557 ## P07 359.1662 375.36486 ## P08 271.3345  67.89132 ## P09 256.8169 150.02964 ## P10 270.6086  17.00917 ## P11 493.4544 237.25618 ## P12 305.4510  85.33663 ## P13 462.9674  86.79040 ## P14 429.5768 291.04587 ## P15 531.2003 115.13903 ## P16 407.8003  99.87438 ## P17 345.3745 251.79393 genind2genalex(nancycats, \"~/Desktop/nancycats_pop_xy.csv\", geo = TRUE) ## Extracting the table ... Writing the table to ~/Desktop/nancycats_pop_xy.csv ... Done. nan2           <- nancycats other(nan2)$xy <- other(nan2)$xy[pop(nan2), ] tail(other(nan2)$xy) ##            x        y ## P17 345.3745 251.7939 ## P17 345.3745 251.7939 ## P17 345.3745 251.7939 ## P17 345.3745 251.7939 ## P17 345.3745 251.7939 ## P17 345.3745 251.7939 genind2genalex(nan2, \"~/Desktop/nancycats_inds_xy.csv\", geo = TRUE) ## Extracting the table ... Writing the table to ~/Desktop/nancycats_inds_xy.csv ... Done."},{"path":"/articles/poppr_manual.html","id":"intro:genind","dir":"Articles","previous_headings":"Import and Data types","what":"Getting to know adegenet‚Äùs genind object","title":"Data import and manipulation in poppr version `r packageVersion('poppr')`","text":"Since poppr built around adegenet‚Äùs framework, important know adegenet stores data genind object, object used poppr. create genind object, adegenet takes data frame genotypes (rows) across multiple loci (columns) converts matrix individual allelic counts locus (Jombart 2008). example, Let‚Äôs say data 3 diploid individuals 3 loci 3, 4, 5 allelic states respectively: resulting genind object contain matrix 3 rows 12 columns. schematic look like. column represents separate allele, row represents individual color represents different locus.  look data derived table , see matrix individual allele counts locus. locus, allele counts individual sum ploidy, \\(p\\). Homozygotes denoted allele count \\(p\\) single allele within locus, heterozygotes allele counts represented \\(<p\\) \\(p\\) = ploidy across multiple alleles single locus. Along matrix, elements define names individuals, loci, alleles, populations. wish know , see adegenet ‚ÄúGetting Started‚Äù manual.","code":"##   locus1.101 locus1.102 locus1.103 locus2.201 locus2.202 locus2.203 locus2.204 locus3.301 ## 1          2          0          0          2          0          0          0          1 ## 2          0          1          1          0          1          1          0          1 ## 3          0          2          0          0          0          1          1          0 ##   locus3.302 locus3.303 locus3.304 locus3.305 ## 1          1          0          0          0 ## 2          0          1          0          0 ## 3          0          0          1          1"},{"path":"/articles/poppr_manual.html","id":"intro:genind:other","dir":"Articles","previous_headings":"Import and Data types > Getting to know adegenet‚Äùs genind object","what":"The other slot","title":"Data import and manipulation in poppr version `r packageVersion('poppr')`","text":"slot place genind object can used store useful information data. saw earlier store demographic information, now let‚Äôs explore different example. Bruvo‚Äôs distance based stepwise mutation model microsatellites. requires us know length repeat locus. store repeat lengths separate variable R environment, risk losing . One way prevent lost place ‚Äú‚Äù slot. purpose example, use ‚Äúnancycats‚Äù data set adegenet package assume di-nucleotide repeats loci.","code":"data(nancycats) # Load the data other(nancycats) # geographical coordinates ## $xy ##            x         y ## P01 263.3498 171.10939 ## P02 183.5028 122.40790 ## P03 391.1050 254.70148 ## P04 458.6121  41.72336 ## P05 182.7769 219.08398 ## P06 335.2121 344.83557 ## P07 359.1662 375.36486 ## P08 271.3345  67.89132 ## P09 256.8169 150.02964 ## P10 270.6086  17.00917 ## P11 493.4544 237.25618 ## P12 305.4510  85.33663 ## P13 462.9674  86.79040 ## P14 429.5768 291.04587 ## P15 531.2003 115.13903 ## P16 407.8003  99.87438 ## P17 345.3745 251.79393 repeats <- rep(2, nLoc(nancycats)) #nLoc = number of loci repeats ## [1] 2 2 2 2 2 2 2 2 2 other(nancycats)$repeat_lengths <- repeats other(nancycats) # two items named xy and repeat_lengths ## $xy ##            x         y ## P01 263.3498 171.10939 ## P02 183.5028 122.40790 ## P03 391.1050 254.70148 ## P04 458.6121  41.72336 ## P05 182.7769 219.08398 ## P06 335.2121 344.83557 ## P07 359.1662 375.36486 ## P08 271.3345  67.89132 ## P09 256.8169 150.02964 ## P10 270.6086  17.00917 ## P11 493.4544 237.25618 ## P12 305.4510  85.33663 ## P13 462.9674  86.79040 ## P14 429.5768 291.04587 ## P15 531.2003 115.13903 ## P16 407.8003  99.87438 ## P17 345.3745 251.79393 ##  ## $repeat_lengths ## [1] 2 2 2 2 2 2 2 2 2"},{"path":"/articles/poppr_manual.html","id":"intro:genclone","dir":"Articles","previous_headings":"Import and Data types","what":"The genclone object {send in the clones}","title":"Data import and manipulation in poppr version `r packageVersion('poppr')`","text":"genclone class defined order make working clonal organisms intuitive. built genind object dedicated slots defined multilocus genotypes. name genclone refers fact ability handle genotypes clonal organisms (also used sexual populations). previous versions poppr, genclone object contained hierarchy slot well. slot moved adegenet name changed ‚Äústrata‚Äù. slot allows carry around several definitions populations data set. function .genclone allows user convert genind object genclone object. following example demonstrate genclone object extension genind object well advantages populations pre-defined data set.","code":""},{"path":"/articles/poppr_manual.html","id":"intro:genclone:as-genclone","dir":"Articles","previous_headings":"Import and Data types > The genclone object {send in the clones}","what":"Function: as.genclone","title":"Data import and manipulation in poppr version `r packageVersion('poppr')`","text":"x - genind object converted. ‚Ä¶ - arguments passed genind constructor. mlg - vector representing multilocus genotype definitions data. mlgclass - TRUE, MLGs represented object converted MLG class object, allows custom MLG definitions. Let‚Äùs show example genclone object. First, take existing genind object convert using function .genclone (can also use function read.genalex()import genclone genind objects). use Aeut data set clonal data set simple population strata (N. J. Gr√ºnwald Hoheisel 2006). data set : https://doi.org/10.6084/m9.figshare.877104 AFLP data root rot pathogen Aphanomyces euteiches collected two different fields NW Oregon W Washington, USA. fields divided subplots samples collected. fields represent population subplots represent subpopulation. Let‚Äùs take look genind object looks like: can see data frame @slot called ‚Äúpopulation_hierarchy‚Äù. left poppr version 1.x behavior. Since genind object now @strata slot, can use set stratification (previously called ‚Äúhierarchy‚Äù). Now can convert genclone object, store information multilocus genotypes us. wanted , also convert back genind object.","code":"as.genclone(x, ..., mlg, mlgclass = TRUE) library(\"poppr\") data(Aeut) Aeut ## /// GENIND OBJECT ///////// ##  ##  // 187 individuals; 56 loci; 56 alleles; size: 68.9 Kb ##  ##  // Basic content ##    @tab:  187 x 56 matrix of allele counts ##    @loc.n.all: number of alleles per locus (range: 56-56) ##    @ploidy: ploidy of each individual  (range: 2-2) ##    @type:  PA ##    @call: old2new_genind(object = x, donor = new(class(x))) ##  ##  // Optional content ##    @pop: population of each individual (group size range: 90-97) ##    @other: a list containing: population_hierarchy strata(Aeut) <- other(Aeut)$population_hierarchy[-1] Aeut ## /// GENIND OBJECT ///////// ##  ##  // 187 individuals; 56 loci; 56 alleles; size: 72.7 Kb ##  ##  // Basic content ##    @tab:  187 x 56 matrix of allele counts ##    @loc.n.all: number of alleles per locus (range: 56-56) ##    @ploidy: ploidy of each individual  (range: 2-2) ##    @type:  PA ##    @call: old2new_genind(object = x, donor = new(class(x))) ##  ##  // Optional content ##    @pop: population of each individual (group size range: 90-97) ##    @strata: a data frame with 2 columns ( Pop, Subpop ) ##    @other: a list containing: population_hierarchy agc <- as.genclone(Aeut) agc ##  ## This is a genclone object ## ------------------------- ## Genotype information: ##  ##    119 original multilocus genotypes  ##    187 diploid individuals ##     56 dominant loci ##  ## Population information: ##  ##      2 strata - Pop, Subpop ##      2 populations defined - Athena, Mt. Vernon genclone2genind(agc) ## /// GENIND OBJECT ///////// ##  ##  // 187 individuals; 56 loci; 56 alleles; size: 83.7 Kb ##  ##  // Basic content ##    @tab:  187 x 56 matrix of allele counts ##    @loc.n.all: number of alleles per locus (range: 56-56) ##    @ploidy: ploidy of each individual  (range: 2-2) ##    @type:  PA ##    @call: genclone2genind(x = agc) ##  ##  // Optional content ##    @pop: population of each individual (group size range: 90-97) ##    @strata: a data frame with 2 columns ( Pop, Subpop ) ##    @other: a list containing: population_hierarchy"},{"path":"/articles/poppr_manual.html","id":"intro:import:polyploid","dir":"Articles","previous_headings":"Import and Data types","what":"About polyploid data","title":"Data import and manipulation in poppr version `r packageVersion('poppr')`","text":"WARNING Treat polyploid data care. Please read section carefully consult help pages functions mentioned . diploid haploid data, genotypes unambiguous. often clear homozygous heterozygous. polyploid data, genotypes can ambiguous. example, tetraploid individual apparent genotype /B actually one three genotypes: ///B, //B/B, /B/B/B. ambiguity prevents researcher accurately calling alleles present. adegenet, previously difficult import polyploid data ambiguity data required unambiguous missing. solution problem code missing alleles ‚Äú0‚Äù. example found within Pinf data set poppr (Erica M. Goss et al. 2014). First, look polyploid allele calls.  look last six samples two loci, Pi63 (3 alleles, triploid) Pi70 (3 alleles, diploid) examine data represented. column data represents different allele particular locus. Pi63.148 allele 148 locus Pi63. row individual. numbers represent fraction given allele makes individual genotype particular locus. can see number columns 8 expect 6 (2 loci x 3 alleles). first allele locus 000. Let‚Äôs take look data human-readable format. ‚Äùs clear now data set tetraploid individuals genotypes appear diploid (000/000/157/157) appear triploid (000/148/151/157). tetraploid genotype padded zeroes make difference ploidy. method allows Bruvo‚Äôs Distance (Bruvo et al. 2004) Index Association (Brown, Feldman, Nevo 1980; Smith et al. 1993; Agapow Burt 2001) work polyploids specifically recognize zeroes missing data. side effect, unfortunately extra zeroes appear extra alleles. affects frequency-based statistics (except ones noted ), user reformat data set function recode_polyploids, remove zeroes. , show observed genotypes: imported data recoded polyploid data, can use argument ‚Äúaddzero‚Äù fill ploidy:","code":"data(Pinf) Pinf ##  ## This is a genclone object ## ------------------------- ## Genotype information: ##  ##    72 multilocus genotypes  ##    86 tetraploid individuals ##    11 codominant loci ##  ## Population information: ##  ##     2 strata - Continent, Country ##     2 populations defined - South America, North America ptab <- info_table(Pinf, type = \"ploidy\", plot = TRUE) Pinf[loc = locNames(Pinf)[9:10]] %>% tab() %>% tail() ##        Pi63.000 Pi63.148 Pi63.151 Pi63.157 Pi70.000 Pi70.189 Pi70.192 Pi70.195 ## PiPE22        1        1        1        1        2        1        1        0 ## PiPE23        1        1        1        1        2        1        1        0 ## PiPE24        1        1        1        1        2        1        1        0 ## PiPE25        1        1        1        1        2        1        1        0 ## PiPE26        2        0        0        2        2        0        1        1 ## PiPE27        1        1        1        1        2        1        1        0 Pinfdf <- genind2df(Pinf, sep = \"/\") tail(Pinfdf[10:11]) ##                   Pi63            Pi70 ## PiPE22 000/148/151/157 000/000/189/192 ## PiPE23 000/148/151/157 000/000/189/192 ## PiPE24 000/148/151/157 000/000/189/192 ## PiPE25 000/148/151/157 000/000/189/192 ## PiPE26 000/000/157/157 000/000/192/195 ## PiPE27 000/148/151/157 000/000/189/192 Pinf_rc <- recode_polyploids(Pinf, newploidy = TRUE) Pinf_rc # Notice that the new ploidy is accounted for. ##  ## This is a genclone object ## ------------------------- ## Genotype information: ##  ##    72 multilocus genotypes  ##    86 diploid (55) and triploid (31) individuals ##    11 codominant loci ##  ## Population information: ##  ##     2 strata - Continent, Country ##     2 populations defined - South America, North America Pinf_rc[loc = locNames(Pinf_rc)[9:10]] %>% tab() %>% tail ##        Pi63.148 Pi63.151 Pi63.157 Pi70.189 Pi70.192 Pi70.195 ## PiPE22        1        1        1        1        1        0 ## PiPE23        1        1        1        1        1        0 ## PiPE24        1        1        1        1        1        0 ## PiPE25        1        1        1        1        1        0 ## PiPE26        0        0        2        0        1        1 ## PiPE27        1        1        1        1        1        0 Pinfrcdf <- genind2df(Pinf_rc, sep = \"/\") tail(Pinfrcdf[10:11]) ##               Pi63    Pi70 ## PiPE22 148/151/157 189/192 ## PiPE23 148/151/157 189/192 ## PiPE24 148/151/157 189/192 ## PiPE25 148/151/157 189/192 ## PiPE26     157/157 192/195 ## PiPE27 148/151/157 189/192 Pinf_rc[loc = locNames(Pinf_rc)[9:10]] %>%   recode_polyploids(addzero = TRUE) %>%   tab() %>%   tail() ##        Pi63.0 Pi63.157 Pi63.148 Pi63.151 Pi70.0 Pi70.192 Pi70.189 Pi70.195 ## PiPE22      0        1        1        1      1        1        1        0 ## PiPE23      0        1        1        1      1        1        1        0 ## PiPE24      0        1        1        1      1        1        1        0 ## PiPE25      0        1        1        1      1        1        1        0 ## PiPE26      1        2        0        0      1        1        0        1 ## PiPE27      0        1        1        1      1        1        1        0"},{"path":"/articles/poppr_manual.html","id":"data-manip","dir":"Articles","previous_headings":"","what":"Data Manipulation","title":"Data import and manipulation in poppr version `r packageVersion('poppr')`","text":"One tedious aspect population genetic analysis need repeated data manipulation. Poppr includes novel functions clone- censoring data sets, removing genotypes loci missing data, removing uninformative loci, shuffling populations.","code":""},{"path":"/articles/poppr_manual.html","id":"data-manip:missing","dir":"Articles","previous_headings":"Data Manipulation","what":"Replace or remove missing data {Inside the golden days of missing data}","title":"Data import and manipulation in poppr version `r packageVersion('poppr')`","text":"data set without missing data always ideal, often achievable. poppr function missingno exists handle missing data. Missing data can mean different things based data type. microsatellites, missing data might represent source error cause PCR product amplify gel electrophoresis, may may biologically relevant. DNA alignment, missing data mean something simple insertion deletion, biologically relevant. choice exclude estimate data different implications type data . Treatment Missing data non-trivial task. understand nature missing data data set treatment.","code":""},{"path":"/articles/poppr_manual.html","id":"data-manip:missing:missingno","dir":"Articles","previous_headings":"Data Manipulation > Replace or remove missing data {Inside the golden days of missing data}","what":"Function: missingno","title":"Data import and manipulation in poppr version `r packageVersion('poppr')`","text":"missingno function serves way exclude specific areas contain systematic missing data. four methods available, pop - genind object. type - one five options: ‚Äúloci‚Äù used data set systematic problems certain loci contain null alleles simply failed amplify. remove loci defined threshold missing data data set. ‚Äúgeno‚Äù used genotypes (individuals) data set many null alleles present. Individuals defined threshold missing data removed. ‚Äúasis‚Äù argument retain missing data data set. ‚Äùs useful functions utilize missingno internally, mlg.filter(), poppr.amova(), aboot(). ‚Äúmean‚Äù replaces missing data mean allele frequencies entire data set . ‚Äúzero‚Äù ‚Äú0‚Äù replaces missing data zero, signifying new allele . cutoff - numeric value 0 1 indicating percent allowable missing data either loci genotypes. , example, two loci containing missing 5% 10% missing data, respectively set cutoff = 0.05, missingno remove second locus. Percent missing data genotypes considered percent missing loci number total loci. quiet - set FALSE, number missing values replaced printed screen method ‚Äúzero‚Äù ‚Äúmean‚Äù. print number loci individuals removed method ‚Äúloci‚Äù ‚Äúgeno‚Äù. freq - used compatibility tab() method genind object. convert counts alleles frequencies alleles, rendering object return warnings. Let‚Äôs take look focusing areas missing data. ‚Äùll use data set nancycats example. Using poppr function info_table, can assess missing data within populations.  can see locus fca8 lot missing data. demonstrate function missingno(), zoom first five individuals first locus. looking data set, recall genind object formatted. matrix representing counts alleles. diploids, see 1, means heterozygous allele, 2 means ‚Äùs homozygous. see three heterozygotes two individuals missing data (indicated NA). Let‚Äùs look happens exclude loci genotypes >5% missing data). Notice now see columns named fca23.128 fca23.130. showing us another locus removed first. Recall summary table first locus 16 alleles, second 11. Now ‚Äôve removed loci containing missing data, others shifted . Let‚Äôs look loci names number individuals. can see number individuals stayed loci ‚Äúfca8‚Äù, ‚Äúfca45‚Äù, ‚Äúfca96‚Äù removed. Let‚Äôs look happened removed individuals. can see number individuals decreased, yet number loci. Notice frequency matrix changes scenarios? scenario ‚Äúloci‚Äù, removed several columns data set, sub-setting, see alleles second locus. scenario ‚Äúgeno‚Äù, removed several rows data set see individuals sub-setting.","code":"missingno(pop, type = \"loci\", cutoff = 0.05, quiet = FALSE, freq = FALSE) library(\"poppr\") data(nancycats) info_table(nancycats, plot = TRUE) ##           Locus ## Population  fca8 fca23 fca43 fca45 fca77 fca78 fca90 fca96 fca37  Mean ##      P01   0.200     .     .     .     .     .     .     .     . 0.022 ##      P02       .     .     .     .     .     .     .     .     .     . ##      P03       .     .     .     .     .     .     .     .     .     . ##      P04       .     .     .     .     .     .     .     .     .     . ##      P05       .     .     .     .     .     .     .     .     .     . ##      P06       .     .     .     .     .     .     .     .     .     . ##      P07   0.357     .     .     .     .     .     .     .     . 0.040 ##      P08       .     .     .     .     .     .     .     .     .     . ##      P09       .     .     .     .     .     .     .     .     .     . ##      P10       .     .     .     .     .     .     .     .     .     . ##      P11   0.150     .     . 0.400     .     .     . 0.050     . 0.067 ##      P12   0.214     .     .     .     .     .     .     .     . 0.024 ##      P13       .     .     .     .     .     .     .     .     .     . ##      P14   0.412     .     .     .     .     .     .     .     . 0.046 ##      P15       .     .     .     .     .     .     .     .     .     . ##      P16       .     .     .     .     .     .     .     .     .     . ##      P17       .     .     . 1.000     .     .     . 0.615     . 0.179 ##      Total 0.084     .     . 0.089     .     .     . 0.038     . 0.023 tab(nancycats)[1:5, 8:13] ##      fca8.133 fca8.135 fca8.137 fca8.139 fca8.141 fca8.143 ## N215       NA       NA       NA       NA       NA       NA ## N216       NA       NA       NA       NA       NA       NA ## N217        0        1        0        0        0        1 ## N218        1        1        0        0        0        0 ## N219        1        1        0        0        0        0 nanloci <-  missingno(nancycats, \"loci\") nangeno <-  missingno(nancycats, \"geno\") tab(nanloci)[1:5, 8:13] ##      fca23.144 fca23.146 fca23.148 fca23.150 fca43.133 fca43.135 ## N215         0         1         0         0         0         0 ## N216         0         2         0         0         0         0 ## N217         0         1         0         0         0         0 ## N218         0         0         0         0         0         0 ## N219         0         1         0         0         0         0 nInd(nanloci)     # Individuals ## [1] 237 locNames(nanloci) # Names of the loci ## [1] \"fca23\" \"fca43\" \"fca77\" \"fca78\" \"fca90\" \"fca96\" \"fca37\" tab(nangeno)[1:5, 8:13] ##      fca8.133 fca8.135 fca8.137 fca8.139 fca8.141 fca8.143 ## N217        0        1        0        0        0        1 ## N218        1        1        0        0        0        0 ## N219        1        1        0        0        0        0 ## N220        0        1        0        0        0        1 ## N221        0        2        0        0        0        0 nInd(nangeno)     # Individuals ## [1] 199 locNames(nangeno) # Names of the loci ## [1] \"fca8\"  \"fca23\" \"fca43\" \"fca45\" \"fca77\" \"fca78\" \"fca90\" \"fca96\" \"fca37\""},{"path":"/articles/poppr_manual.html","id":"data-manip:divide","dir":"Articles","previous_headings":"Data Manipulation","what":"Extract populations {Divide (populations) and conquer (your analysis)}","title":"Data import and manipulation in poppr version `r packageVersion('poppr')`","text":"poppr function popsub makes subsetting genind genlight objects population easier:","code":""},{"path":"/articles/poppr_manual.html","id":"data-manip:divide:popsub","dir":"Articles","previous_headings":"Data Manipulation > Extract populations {Divide (populations) and conquer (your analysis)}","what":"Function: popsub","title":"Data import and manipulation in poppr version `r packageVersion('poppr')`","text":"command popsub powerful allows choose exactly populations choose include exclude analyses. many R functions, can also use within function avoid creating new variable keep track . pop - genind object. sublist - vector populations integers representing populations data set wish retain. example: sublist = c(pop_z, pop_y) sublist = 1:2. exclude - vector populations integers representing populations data set wish exclude. can take type arguments sublist, can used conjunction sublist want range populations, know one want analyze. example: sublist = 1:15, exclude = pop_x. One useful thing exclude allows user extremely paranoid data. can set exclude contain populations even data set still work! mat - matrix produced mlg.table function. overrides pop argument subsets table instead. demonstrate tool, ‚Äôll use H3N2 virus data set provided adegenet. contains data frame ‚Äú‚Äù slot called ‚Äúx‚Äù contains information year epidemic, country, etc. demonstrate popsub functionality setting population factor ‚Äúcountry‚Äù. Note, section, naming variables staring ‚Äúv‚Äù indicating ‚Äúvirus‚Äù. want see population size, can use adegenet function nInd(): can see population factors correct size data set considerably smaller. Let‚Äôs see data set without North American countries. Let‚Äùs make sure number individuals data sets equal number individuals original data set: Now data sets without North America. Let‚Äôs try something bit challenging. Let‚Äôs say want first 10 populations alphabetical order, know still don‚Äùt want countries North America. can easily using base function sort. , subset data poppr!","code":"popsub(gid, sublist = \"ALL\", exclude = NULL, blacklist = NULL,      mat = NULL, drop = TRUE) data(\"H3N2\", package = \"adegenet\") strata(H3N2) <- data.frame(other(H3N2)$x) H3N2 ## /// GENIND OBJECT ///////// ##  ##  // 1,903 individuals; 125 loci; 334 alleles; size: 4.1 Mb ##  ##  // Basic content ##    @tab:  1903 x 334 matrix of allele counts ##    @loc.n.all: number of alleles per locus (range: 2-4) ##    @loc.fac: locus factor for the 334 columns of @tab ##    @all.names: list of allele names for each locus ##    @ploidy: ploidy of each individual  (range: 1-1) ##    @type:  codom ##    @call: .local(x = x, i = i, j = j, drop = drop) ##  ##  // Optional content ##    @strata: a data frame with 17 columns ( accession, length, host, segment, subtype, country, ... ) ##    @other: a list containing: x  xy  epid setPop(H3N2) <- ~country popNames(H3N2) # Only two countries from North America. ##  [1] \"Japan\"          \"USA\"            \"Finland\"        \"China\"          \"South Korea\"    ##  [6] \"Norway\"         \"Taiwan\"         \"France\"         \"Latvia\"         \"Netherlands\"    ## [11] \"Bulgaria\"       \"Turkey\"         \"United Kingdom\" \"Denmark\"        \"Austria\"        ## [16] \"Canada\"         \"Italy\"          \"Russia\"         \"Bangladesh\"     \"Egypt\"          ## [21] \"Germany\"        \"Romania\"        \"Ukraine\"        \"Czech Republic\" \"Greece\"         ## [26] \"Iceland\"        \"Ireland\"        \"Sweden\"         \"Nepal\"          \"Saudi Arabia\"   ## [31] \"Switzerland\"    \"Iran\"           \"Mongolia\"       \"Spain\"          \"Slovenia\"       ## [36] \"Croatia\"        \"Algeria\" v_na <- popsub(H3N2, sublist = c(\"USA\", \"Canada\")) popNames(v_na) ## [1] \"USA\"    \"Canada\" c(NorthAmerica = nInd(v_na), Total = nInd(H3N2)) ## NorthAmerica        Total  ##          665         1903 v_na_minus <- popsub(H3N2, exclude = c(\"USA\", \"Canada\")) popNames(v_na_minus) ##  [1] \"Japan\"          \"Finland\"        \"China\"          \"South Korea\"    \"Norway\"         ##  [6] \"Taiwan\"         \"France\"         \"Latvia\"         \"Netherlands\"    \"Bulgaria\"       ## [11] \"Turkey\"         \"United Kingdom\" \"Denmark\"        \"Austria\"        \"Italy\"          ## [16] \"Russia\"         \"Bangladesh\"     \"Egypt\"          \"Germany\"        \"Romania\"        ## [21] \"Ukraine\"        \"Czech Republic\" \"Greece\"         \"Iceland\"        \"Ireland\"        ## [26] \"Sweden\"         \"Nepal\"          \"Saudi Arabia\"   \"Switzerland\"    \"Iran\"           ## [31] \"Mongolia\"       \"Spain\"          \"Slovenia\"       \"Croatia\"        \"Algeria\" (nInd(v_na_minus) + nInd(v_na)) == nInd(H3N2) ## [1] TRUE vsort <- sort(popNames(H3N2))[1:10] vsort ##  [1] \"Algeria\"        \"Austria\"        \"Bangladesh\"     \"Bulgaria\"       \"Canada\"         ##  [6] \"China\"          \"Croatia\"        \"Czech Republic\" \"Denmark\"        \"Egypt\" valph <- popsub(H3N2, sublist = vsort, exclude = c(\"USA\", \"Canada\")) popNames(valph) ## [1] \"China\"          \"Bulgaria\"       \"Denmark\"        \"Austria\"        \"Bangladesh\"     ## [6] \"Egypt\"          \"Czech Republic\" \"Croatia\"        \"Algeria\""},{"path":"/articles/poppr_manual.html","id":"data-manip:cc","dir":"Articles","previous_headings":"Data Manipulation","what":"Clone-censor data sets {Attack of the clone correction}","title":"Data import and manipulation in poppr version `r packageVersion('poppr')`","text":"Clone correction refers ability keeping one observation MLG given population (sub-population). Clone correcting can hazardous done hand (even small data sets) requires defined population hierarchy get relevant results. Poppr clone correcting function correct lowest level defined population hierarchy. Note clone correction poppr sensitive missing data, treats missing data single extra allele. function create new data sets, also utilized functions poppr() poppr.amova() natively.","code":""},{"path":"/articles/poppr_manual.html","id":"data-manip:cc:clonecorrect","dir":"Articles","previous_headings":"Data Manipulation > Clone-censor data sets {Attack of the clone correction}","what":"Function: clonecorrect","title":"Data import and manipulation in poppr version `r packageVersion('poppr')`","text":"function return clone corrected data set corrected lowest population level. Population levels specified hier flag. can choose combine population hierarchy analyze lowest population level choosing combine = TRUE. pop - genclone object defined hierarchy genind object population hierarchy data frame @slot. Note, genind object necessarily require population factor begin . strata - hierarchical formula (eg. \\simPop/Subpop), representing hierarchical levels data. combine - want combine population hierarchy? ‚Äùs set FALSE (default), returned object top hierarchical level population factor unless keep argument defined. set TRUE, hierarchy returned combined. keep - flag used set combine = FALSE. tell clone correct return specific combination hierarchy defined integers. example, imagine hierarchy needs clone corrected three levels: Population Year Month. wanted run analysis Population level, set keep = 1 since Population first level hierarchy. hand, wanted run analysis Year Month, set keep = 2:3 since second third levels hierarchy. Let‚Äùs look ways clone-correct data. ‚Äùll look . euteichies data used earlier section since data set known include clonal populations (N. J. Gr√ºnwald Hoheisel 2006). Try playing around data see different combinations strata, keep flags produce. , give three examples clone corrections sample level respect field, field level, finally, level entire data set. First, examine original data set. read data read.genalex(), default represent genclone object. Since clonecorrect() function works multilocus genotype definitions, ‚Äôs efficient convert genclone object first. also rename strata ‚Äúfield‚Äù ‚Äúsample‚Äù make biological relevance data clearer. Now correct sample respect field keep field population. Correcting field. Notice number MLG much closer census. Correcting whole data set. MLG equal census.","code":"clonecorrect(pop, strata = 1, combine = FALSE, keep = 1) data(Aeut) strata(Aeut) <- data.frame(other(Aeut)$population_hierarchy[-1]) Aeut ## /// GENIND OBJECT ///////// ##  ##  // 187 individuals; 56 loci; 56 alleles; size: 72.7 Kb ##  ##  // Basic content ##    @tab:  187 x 56 matrix of allele counts ##    @loc.n.all: number of alleles per locus (range: 56-56) ##    @ploidy: ploidy of each individual  (range: 2-2) ##    @type:  PA ##    @call: old2new_genind(object = x, donor = new(class(x))) ##  ##  // Optional content ##    @pop: population of each individual (group size range: 90-97) ##    @strata: a data frame with 2 columns ( Pop, Subpop ) ##    @other: a list containing: population_hierarchy aphan <- as.genclone(Aeut) nameStrata(Aeut) <- ~field/sample clonecorrect(aphan,  strata = ~Pop/Subpop) ##  ## This is a genclone object ## ------------------------- ## Genotype information: ##  ##    119 original multilocus genotypes  ##    141 diploid individuals ##     56 dominant loci ##  ## Population information: ##  ##      2 strata - Pop, Subpop ##      2 populations defined - Athena, Mt. Vernon # Your turn: Use the same stratification and use combine = TRUE and then # keep = 1:2. Is there any difference? clonecorrect(aphan, strata = ~Pop) ##  ## This is a genclone object ## ------------------------- ## Genotype information: ##  ##    119 original multilocus genotypes  ##    120 diploid individuals ##     56 dominant loci ##  ## Population information: ##  ##      2 strata - Pop, Subpop ##      2 populations defined - Athena, Mt. Vernon clonecorrect(aphan, strata = NA) ##  ## This is a genclone object ## ------------------------- ## Genotype information: ##  ##    119 original multilocus genotypes  ##    119 diploid individuals ##     56 dominant loci ##  ## Population information: ##  ##      2 strata - Pop, Subpop ##      2 populations defined - Athena, Mt. Vernon"},{"path":"/articles/poppr_manual.html","id":"data-manip:shuffle","dir":"Articles","previous_headings":"Data Manipulation","what":"Permutations and bootstrap resampling {every day I‚Äôm shuffling (data sets)}","title":"Data import and manipulation in poppr version `r packageVersion('poppr')`","text":"common null hypothesis populations mixed reproductive modes panmixia, put simply: lots sex. Poppr randomly shuffles data sets order calculate P-values index association (\\(I_A\\) \\(\\bar{r} _d\\)) (Agapow Burt 2001) using 4 different methods: methods detailed . create dummy data set shuffled example . Let‚Äùs assume single diploid locus four alleles (1, 2, 3, 4) frequencies 0.1, 0.2, 0.3, 0.4, respectively: Original 4 methods detailed .","code":""},{"path":"/articles/poppr_manual.html","id":"data-manip:shuffle:shufflepop","dir":"Articles","previous_headings":"Data Manipulation > Permutations and bootstrap resampling {every day I‚Äôm shuffling (data sets)}","what":"Function: shufflepop","title":"Data import and manipulation in poppr version `r packageVersion('poppr')`","text":"pop - genind object. method - number indicating method sampling wish use. following methods available use: Permute Alleles (default) sampling scheme permute alleles within locus. can see, heterozygosity changed, yet allelic frequencies remain . Overall show happen sample underwent panmixis within sample . Parametric Bootstrap previous scheme reshuffled observed sample, parametric bootstrap draws samples multinomial distribution using observed allele frequencies weights. Notice heterozygosity changed along allelic frequencies. frequencies alleles 3 4 switched first data set, ‚Äùve lost allele 1 second data set purely chance! type sampling scheme attempts show true population look like panmictic original sample gave basis estimating expected allele frequencies. Since estimates made observed allele frequencies, small samples produce skewed results. Non-Parametric Bootstrap third method sampling replacement, drawing multinomial distribution, assumption allele frequencies. , heterozygosity allele frequencies maintained, now alleles 1 4 chance chosen. Multilocus permutation called Multilocus permutation thing permutation analysis program multilocus Paul Agapow Austin Burt (Agapow Burt 2001). shuffle genotypes locus. Note genotypes shuffling, locus, maintain allelic frequencies heterozygosity. , sample, see homozygote allele 2. also ensures P-values associated \\(I_A\\) \\(\\bar{r} _d\\) exactly . method assumes alleles independently assorting within individuals. strategy useful suspect population inbreeding (Jerome Goudet, personal communication). shuffling schemes implemented index association, may summary statistics can use shufflepop . use function replicate. Let‚Äùs use average Bruvo‚Äùs distance first population data set nancycats example: use method replicate resampling 999 times create histogram visualize distribution happen different assumptions panmixia.","code":"shufflepop(pop, method = 1) data(nancycats) nan1 <- popsub(nancycats, 1) reps <- rep(2, 9) # Assuming dinucleotide repeats. observed <- mean(bruvo.dist(nan1, replen = reps)) observed ## [1] 0.4180619 set.seed(9999) bd.test <- replicate(999, mean(bruvo.dist(shufflepop(nan1, method = 2), replen = reps))) hist(bd.test, xlab = \"Bruvo's Distance\", main = \"Average Bruvo's distance over 999 randomizations\") abline(v = observed, col = \"red\") legend('topleft', legend=\"observed\", col=\"red\", lty = 1)"},{"path":"/articles/poppr_manual.html","id":"data-manip:informloci","dir":"Articles","previous_headings":"Data Manipulation","what":"Removing uninformative loci {Cut It Out!}","title":"Data import and manipulation in poppr version `r packageVersion('poppr')`","text":"Phylogenetically uninformative loci one sample differentiating rest. can lead biased results using multilocus analyses index association (Brown, Feldman, Nevo 1980; Smith et al. 1993). nuisance loci can removed following function.","code":""},{"path":"/articles/poppr_manual.html","id":"data-manip:informloci:informloci","dir":"Articles","previous_headings":"Data Manipulation > Removing uninformative loci {Cut It Out!}","what":"Function: informloci","title":"Data import and manipulation in poppr version `r packageVersion('poppr')`","text":"pop - genind object. cutoff - represents minimum fraction individuals needed locus considered informative. default set \\(2/n\\) \\(n\\) number individuals data set (represented adegenet function nInd). Essentially, means locus fewer 2 observations differing removed. user can also specify fraction observations cutoff (eg. 0.05). MAF - (Minor Allele Frequency), defaults 0.01 indicating loci contain one allele representing 1 - MAF data removed. quiet - TRUE, nothing printed screen, FALSE (default), cutoff value percentage number individuals printed well names uninfomrative loci found. ‚Äôs quick example using H3N2 virus SNP data set earlier section. retain loci minor allele frequency \\(\\geq 5\\%\\) Now happens informative loci. ‚Äùll use nancycats data set, microsatellite loci. important note searching loci specified genotype frequency fixed heterozygous sites also uninformative:","code":"informloci(pop, cutoff = 2/nInd(pop), MAF = 0.01, quiet = FALSE) H.five <- informloci(H3N2, cutoff = 0.05) ## cutoff value: 5 % ( 95 samples ). ## MAF         : 0.01 ##  ##  Found 49 uninformative loci  ##  ============================  ##  47 loci found with a cutoff of 95 samples : ##  157, 177, 233, 243, 262, 267, 280, 303, 313, 327, 357, 382, 384, 399, 412, 418, ## 424, 425, 429, 433, 451, 470, 529, 546, 555, 557, 564, 576, 592, 595, 597, 602, ## 612, 627, 642, 647, 648, 654, 658, 663, 667, 681, 717, 806, 824, 837, 882  ##  5 loci found with MAF < 0.01 : ##  42, 313, 433, 597, 915 data(nancycats) naninform <- informloci(nancycats, cutoff = 0.05) ## cutoff value: 5 % ( 12 samples ). ## MAF         : 0.01 ##  ## All sites polymorphic"},{"path":"/articles/poppr_manual.html","id":"mlg","dir":"Articles","previous_headings":"","what":"Multilocus Genotype Analysis","title":"Data import and manipulation in poppr version `r packageVersion('poppr')`","text":"populations mixed sexual clonal reproduction, common multiple samples population set alleles loci. , introduce tools tracking MLGs within across populations genind, genlight objects adegenet package. using H3N2 data set containing SNP data isolates H3N2 virus 2002 2006. Note genclone snpclone objects optimal analyses. -depth document methods multilocus genotypes poppr, see ‚ÄúMultilocus Genotype Analysis‚Äù vignette typing","code":"vignette(\"mlg\", package = \"poppr\")"},{"path":"/articles/poppr_manual.html","id":"mlg:mlg","dir":"Articles","previous_headings":"Multilocus Genotype Analysis","what":"How many multilocus genotypes are in our data set? {Just a peek}","title":"Data import and manipulation in poppr version `r packageVersion('poppr')`","text":"Counting number MLGs population first step analyses allow us see many clones exist. genclone object, information already displayed view object. need store number MLGs variable, can simply run mlg() command. Since number individuals exceeds number multilocus genotypes, conclude data set contains clones. Let‚Äùs examine populations clones belong .","code":"H3N2 ## /// GENIND OBJECT ///////// ##  ##  // 1,903 individuals; 125 loci; 334 alleles; size: 4.1 Mb ##  ##  // Basic content ##    @tab:  1903 x 334 matrix of allele counts ##    @loc.n.all: number of alleles per locus (range: 2-4) ##    @loc.fac: locus factor for the 334 columns of @tab ##    @all.names: list of allele names for each locus ##    @ploidy: ploidy of each individual  (range: 1-1) ##    @type:  codom ##    @call: .local(x = x, i = i, j = j, drop = drop) ##  ##  // Optional content ##    @pop: population of each individual (group size range: 1-646) ##    @strata: a data frame with 17 columns ( accession, length, host, segment, subtype, country, ... ) ##    @other: a list containing: x  xy  epid H3N2_mlg <- mlg(H3N2) ## ############################# ## # Number of Individuals:  1903  ## # Number of MLG:  752  ## ############################# H3N2_mlg ## [1] 752"},{"path":"/articles/poppr_manual.html","id":"mlg:cross","dir":"Articles","previous_headings":"Multilocus Genotype Analysis","what":"MLGs across populations {clone-ing around}","title":"Data import and manipulation in poppr version `r packageVersion('poppr')`","text":"Since ability define hierarchical levels data set freely, quite possible see MLGs across different populations. Tracking hand can nightmare large data sets. Luckily, mlg.crosspop covered regard.","code":""},{"path":"/articles/poppr_manual.html","id":"mlg:cross:mlg-crosspop","dir":"Articles","previous_headings":"Multilocus Genotype Analysis > MLGs across populations {clone-ing around}","what":"Function: mlg.crosspop","title":"Data import and manipulation in poppr version `r packageVersion('poppr')`","text":"Analyze MLGs cross populations within data set. three output modes. default one gives list MLGs, MLG, gives named numeric vector indicating abundance MLG population. Alternate outputs described indexreturn df. pop - genind object. sublist - Populations include (Defaults ‚Äú‚Äù). see popsub() exclude - Populations exclude. see popsub() mlgsub - see mlg.table() analyze specified MLGs. vector flag can produced function see later vignette. indexreturn - return vector indices MLGs. (can use mlgsub flag, can use subset columns MLG table). df - return data frame containing MLGs, populations cross, number copies find population. useful making graphs ggplot2. quiet - TRUE FALSE. populations printed screen processed? (print nothing indexreturn TRUE) can see MLGs cross different populations give vector shows many populations one MLGs crosses. snippet output looks like quiet FALSE. print MLG name, total number individuals make MLG, populations MLG can found. output function list MLGs, containing vector indicating number copies population. ‚Äùll count number populations MLG crosses using function sapply loop data function length.","code":"mlg.crosspop(gid, strata = NULL, sublist = \"ALL\", exclude = NULL,      blacklist = NULL, mlgsub = NULL, indexreturn = FALSE, df = FALSE,      quiet = FALSE) setPop(H3N2) <- ~country v.dup <- mlg.crosspop(H3N2, quiet=TRUE) ## MLG.3: (12 inds) USA Denmark  ## MLG.9: (16 inds) Japan USA Finland Denmark  ## MLG.31: (9 inds) Japan Canada  ## MLG.75: (23 inds) Japan USA Finland Norway Denmark Austria Russia Ireland  ## MLG.80: (2 inds) USA Denmark  ## MLG.86: (7 inds) Denmark Austria  ## MLG.95: (2 inds) USA Bangladesh  ## MLG.97: (8 inds) USA Austria Bangladesh Romania  ## MLG.104: (3 inds) USA France  ## MLG.110: (16 inds) Japan USA China head(v.dup) ## $MLG.3 ##     USA Denmark  ##       4       8  ##  ## $MLG.9 ##   Japan     USA Finland Denmark  ##       1      13       1       1  ##  ## $MLG.31 ##  Japan Canada  ##      2      7  ##  ## $MLG.75 ##   Japan     USA Finland  Norway Denmark Austria  Russia Ireland  ##       2       8       2       1       6       2       1       1  ##  ## $MLG.80 ##     USA Denmark  ##       1       1  ##  ## $MLG.86 ## Denmark Austria  ##       3       4 v.num <- sapply(v.dup, length) # count the number of populations each MLG crosses. head(v.num) ##  MLG.3  MLG.9 MLG.31 MLG.75 MLG.80 MLG.86  ##      2      4      2      8      2      2"},{"path":"/articles/poppr_manual.html","id":"mlg:table","dir":"Articles","previous_headings":"Multilocus Genotype Analysis","what":"Producing MLG tables and graphs {bringing something to the table}","title":"Data import and manipulation in poppr version `r packageVersion('poppr')`","text":"can also create table MLGs per population well bar graphs give us visual representation data. achieved function mlg.table","code":""},{"path":"/articles/poppr_manual.html","id":"mlg:table:mlg-table","dir":"Articles","previous_headings":"Multilocus Genotype Analysis > Producing MLG tables and graphs {bringing something to the table}","what":"Function: mlg.table","title":"Data import and manipulation in poppr version `r packageVersion('poppr')`","text":"function produce matrix containing counts MLGs (columns) per population (rows). populations defined data set, vector produced instead. pop - genind object. sublist - Populations include (Defaults ‚Äú‚Äù). see popsub() exclude - Populations exclude. see popsub() mlgsub - vector containing indices MLGs wish subset table . plot - TRUE FALSE. TRUE, bar plot printed population one individual. total - set TRUE, pooled data set added table. Defaults FALSE. quiet - Defaults FALSE: population names printed console processed. example bar-chart produced mlg.table. Note data set produce several charts chart Norway shown . MLG table limited use poppr. fact, one main advantages mlg.table() allows easy access diversity functions present package vegan (Oksanen et al. 2012). One example create rarefaction curve population data set giving number expected MLGs given sample size. information, type help(diversity, package=vegan) R console. sake example, instead drawing curve 37 countries represented sample, let‚Äùs set hierarchical level year. example rarefaction curve produced using MLG table. minimum value base function rowSums() table represents minimum common sample size populations defined table. Setting ‚Äúsample‚Äù flag draws horizontal vertical lines see graph. intersections lines correspond numbers find ran function poppr data set (column ‚ÄúeMLG‚Äù).","code":"mlg.table(gid, strata = NULL, sublist = \"ALL\", exclude = NULL,      blacklist = NULL, mlgsub = NULL, bar = TRUE, plot = TRUE,      total = FALSE, color = FALSE, background = FALSE, quiet = FALSE) v.tab <- mlg.table(H3N2, plot = TRUE) v.tab[1:10, 1:10] # Showing the first 10 columns and rows of the table. ##             MLG.1 MLG.2 MLG.3 MLG.4 MLG.5 MLG.6 MLG.7 MLG.8 MLG.9 MLG.10 ## Japan           0     0     0     0     0     0     1     2     1      0 ## USA             0     2     4     1     1     0     0     0    13      0 ## Finland         0     0     0     0     0     0     0     0     1      0 ## China           0     0     0     0     0     0     0     0     0      0 ## South Korea     0     0     0     0     0     1     0     0     0      0 ## Norway          1     0     0     0     0     0     0     0     0      0 ## Taiwan          0     0     0     0     0     0     0     0     0      0 ## France          0     0     0     0     0     0     0     0     0      0 ## Latvia          0     0     0     0     0     0     0     0     0      0 ## Netherlands     0     0     0     0     0     0     0     0     0      0 mlg.table(H3N2, sublist = \"Norway\", plot = TRUE) setPop(H3N2) <- ~year summary(H3N2) # Check the data to make sure it's correct. ##  ## // Number of individuals: 1903 ## // Group sizes: 158 415 399 469 462 ## // Number of alleles per locus: 3 3 4 2 4 2 3 2 4 3 4 2 4 3 2 2 3 3 2 2 3 3 3 2 2 2 2 2 2 2 2 2 2 4 4 3 3 3 4 2 2 2 4 3 2 3 4 2 3 2 3 2 2 2 4 2 2 2 2 2 2 2 4 4 4 3 3 2 3 4 3 2 3 3 3 3 2 3 2 4 2 3 2 2 3 3 3 3 2 2 2 2 3 2 3 2 3 2 3 2 3 3 2 2 2 3 2 2 2 3 3 3 2 2 3 3 3 3 4 2 3 3 4 3 2 ## // Number of alleles per group: 203 255 232 262 240 ## // Percentage of missing data: 2.36 % ## // Observed heterozygosity: 0 library(\"vegan\") H.year <- mlg.table(H3N2, plot = FALSE) rarecurve(H.year, ylab=\"Number of expected MLGs\", sample=min(rowSums(H.year)),           border = NA, fill = NA, font = 2, cex = 1, col = \"blue\")"},{"path":"/articles/poppr_manual.html","id":"mlg:mix","dir":"Articles","previous_headings":"Multilocus Genotype Analysis","what":"Combining MLG functions {getting into the mix}","title":"Data import and manipulation in poppr version `r packageVersion('poppr')`","text":"Alone, different functionalities neat. Combined, can create interesting data sets. Let‚Äùs say wanted know MLGs duplicated across regions United Kingdom, Germany, Netherlands, Norway. use sublist flag function: OK, output tells us three MLGs crossing populations, know many . can easily find subset original table, v.tab. Now can see Norway higher incidence nearly MLGs. can investigate incidence MLGs throughout data set. One thing genclone object keeps track single vector defining unique multilocus genotypes within data. represented integers can accessed mlg.vector. useful finding MLGs correspond certain individuals populations. Let‚Äùs use mlg.vector find individuals corresponding MLGs. First ‚Äùll investigate output function looks like. integers produced MLG assignment individual order data set. means first two individuals exact set alleles locus, MLG: 605. look number unique integers vector, corresponds number observed multilocus genotypes: take UGNN (MLGs crossing UK, Germany, Netherlands, Norway) compare elements MLG vector (v.vec) see else occur. 22 individuals matched three MLGs. can use vector show us 22 individuals. Note alternative way list individuals matching specific MLGs using function mlg.id. function return list element represents unique MLG. can use data find individuals correspond specific MLGs. element list named MLG, index necessarily match , important convert query MLGs strings: can also use vector MLGs subset mlg.table() mlgsub flag. showed us exactly populations three MLGs came data set. populations contain MLGs","code":"setPop(H3N2) <- ~country UGNN.list <- c(\"United Kingdom\", \"Germany\", \"Netherlands\", \"Norway\") UGNN <- mlg.crosspop(H3N2, sublist=UGNN.list, indexreturn=TRUE) UGNN # Note that we have three numbers here. This will index the columns for us. ## [1] 315 317 620 UGNN.list # And let's not forget that we have the population names. ## [1] \"United Kingdom\" \"Germany\"        \"Netherlands\"    \"Norway\" v.tab[UGNN.list, UGNN] ##                MLG.315 MLG.317 MLG.620 ## United Kingdom       1       0       0 ## Germany              0       1       1 ## Netherlands          0       0       0 ## Norway               2       3       1 v.vec <- mlg.vector(H3N2) str(v.vec) # Analyze the structure. ##  int [1:1903] 605 605 672 675 674 673 670 671 670 678 ... length(unique(v.vec)) # count the number of MLGs ## [1] 752 H3N2 # equal to the first number in this output. ## /// GENIND OBJECT ///////// ##  ##  // 1,903 individuals; 125 loci; 334 alleles; size: 4.1 Mb ##  ##  // Basic content ##    @tab:  1903 x 334 matrix of allele counts ##    @loc.n.all: number of alleles per locus (range: 2-4) ##    @loc.fac: locus factor for the 334 columns of @tab ##    @all.names: list of allele names for each locus ##    @ploidy: ploidy of each individual  (range: 1-1) ##    @type:  codom ##    @call: .local(x = x, i = i, j = j, drop = drop) ##  ##  // Optional content ##    @pop: population of each individual (group size range: 1-646) ##    @strata: a data frame with 17 columns ( accession, length, host, segment, subtype, country, ... ) ##    @other: a list containing: x  xy  epid UGNN # Show what we are looking for ## [1] 315 317 620 UGNN_match <- v.vec %in% UGNN table(UGNN_match) # How many individuals matched to those three MLGs? ## UGNN_match ## FALSE  TRUE  ##  1881    22 indNames(H3N2)[UGNN_match] ##       0329       0330       0331       0332       0341       0342       0345       0556  ## \"CY026119\" \"CY026120\" \"CY026121\" \"CY026122\" \"CY026131\" \"CY026132\" \"CY026135\" \"EU502462\"  ##       0557       0558       0870       0974       1112       1113       1114       1122  ## \"EU502463\" \"EU502464\" \"EU501513\" \"AB243868\" \"DQ883618\" \"DQ883619\" \"DQ883620\" \"DQ883628\"  ##       1193       1209       1210       1281       1288       1426  ## \"EU501609\" \"EU501642\" \"EU501643\" \"EU501735\" \"EU501742\" \"EU502513\" H3N2.id <- mlg.id(H3N2) H3N2.id[as.character(UGNN)] ## $`315` ##       0974       1112       1122       1209       1210       1281       1288  ## \"AB243868\" \"DQ883618\" \"DQ883628\" \"EU501642\" \"EU501643\" \"EU501735\" \"EU501742\"  ##  ## $`317` ##       0870       1113       1114       1193       1426  ## \"EU501513\" \"DQ883619\" \"DQ883620\" \"EU501609\" \"EU502513\"  ##  ## $`620` ##       0329       0330       0331       0332       0341       0342       0345       0556  ## \"CY026119\" \"CY026120\" \"CY026121\" \"CY026122\" \"CY026131\" \"CY026132\" \"CY026135\" \"EU502462\"  ##       0557       0558  ## \"EU502463\" \"EU502464\" mlg.table(H3N2, mlgsub = UGNN)"},{"path":[]},{"path":"/articles/poppr_manual.html","id":"manipulating-graphics","dir":"Articles","previous_headings":"Appendix","what":"Manipulating Graphics","title":"Data import and manipulation in poppr version `r packageVersion('poppr')`","text":"Poppr utilizes ggplot2 produce many graphs. One advantage gives user ability manipulate graphs. base R graphs, manipulation can performed adding elements graph. static image. ggplot graphs actually represented objects R environment. can use function last_plot() ggplot2 able grab plot plotted last window. Let‚Äôs illustrate using MLG bar graph Aeut data set.  ‚Äôve captured plot using last_plot() now can manipulate . One common need change title. can easily function ggtitle(). Let‚Äùs say wanted label ‚ÄúAphanomyces euteiches multilocus genotype distribution‚Äù. use ggtitle(Aphanomyces euteiches multilocus genotype distribution). Unfortunately, need italics latin binomial. One way acheive using expression() function declaring text needs italicized.  Let‚Äùs say wanted remove grey background. use theme() function , use theme already implemented ggplot2 called theme_bw().  Uh-oh. x axis labels now horizontal vertical. Since ‚Äùs overall distribution ‚Äôre interested , don‚Äôt really need anyways. can remove axis.text.x axis.ticks.x (‚Äôll also remove x axis gridlines ‚Äôre ugly).  , bizarre reason, liked color gradient poppr version 1, can get back adding fill aesthetic:  allows produce publication quality graphs directly R. Please see Hadley Wickham‚Äùs ggplot2 package details (Wickham 2009). Note don‚Äùt like using ggplot2, can access data ggplot2 object plot data :","code":"library(\"poppr\") library(\"ggplot2\") data(Aeut) Aeut.tab <- mlg.table(Aeut) p <- last_plot() myTitle <- expression(paste(italic(\"Aphanomyces euteiches\"),                        \" multilocus genotype distribution\")) (pt <- p +    ggtitle(myTitle) +    xlab(\"Multilocus genotype\")) # We can label the x axis, too (ptt <- pt + theme_bw()) (ptta <- ptt + theme(axis.text.x = element_blank()) +   theme(axis.ticks.x = element_blank()) +   theme(panel.grid.major.x = element_blank())) (ptttaf <- ptta + aes(fill = count)) head(p$data) ## # A tibble: 6 √ó 4 ##   Population MLG    count order ##   <fct>      <chr>  <int> <fct> ## 1 Athena     MLG.20     9 1     ## 2 Athena     MLG.66     5 2     ## 3 Athena     MLG.14     3 3     ## 4 Athena     MLG.35     3 4     ## 5 Athena     MLG.13     2 5     ## 6 Athena     MLG.16     2 6"},{"path":"/articles/poppr_manual.html","id":"appendix:graphics","dir":"Articles","previous_headings":"Appendix","what":"Exporting Graphics","title":"Data import and manipulation in poppr version `r packageVersion('poppr')`","text":"R ability produce nice graphics type data, get graphics report, presentation, manuscript can bit challenging. ‚Äùs secret R Documentation pages little difficult interpret, give reader short example export graphics R. Note code produce images also present places vignette. default installation R GUI quite minimal, easy way manage plots code, strongly encourage user use Rstudio https://rstudio.com/.","code":""},{"path":"/articles/poppr_manual.html","id":"appendix:graphics:basics","dir":"Articles","previous_headings":"Appendix > Exporting Graphics","what":"Basics","title":"Data import and manipulation in poppr version `r packageVersion('poppr')`","text":"export graphics, ask used . want use graphic website, might want opt low-resolution image can load quickly. printing, ‚Äùll want make sure scalable least high resolution image. , give general guidelines graphics (note merely suggestions, defined rules). see always get often seen presentations colors light posters painfully pixellated graphs. Think going using graphic appear intended audience given media type. \\(\\geq\\) 300 dpi unless web page sort printed material requires raster based image, 300dpi (dots per inch) absolute minimum resolution use. simple black white line images, 1200dpi better. leave crisp, professional looking images. possible, save SVG, rasterize Raster images (bmp, png, jpg, etc‚Ä¶) based number pixels dots per inch takes render image. means raster image less fine mosaic. Vector images (SVG) built upon several interconnected polygons, arcs, lines scale relative one another create graphic. vector graphics, can produce plot scale size building wanted . save SVG file first, can also manipulate programs Adobe Illustrator Inkscape. saving, make sure units dimensions correct Unless really wanted save graph ‚Äùs 6 feet wide.","code":""},{"path":"/articles/poppr_manual.html","id":"appendix:graphics:editors","dir":"Articles","previous_headings":"Appendix > Exporting Graphics","what":"Image Editors","title":"Data import and manipulation in poppr version `r packageVersion('poppr')`","text":"Often times, fine details labels networks need tweaked hand. Luckily, wide variety programs can help . short list image editors (free price) can use edit graphics. Bitmap based editors (jpeg, bmp, png, etc‚Ä¶) GIMP Free, cross-platform. https://www.gimp.org Paint.net Free, Windows . https://www.getpaint.net Adobe Photoshop Pricey, Windows Mac. https://www.adobe.com/products/photoshop.html Scalable Vector Graphics based editors (svg, pdf) Inkscape Free, cross-platform https://inkscape.org Adobe Illustrator Pricey, Windows Mac. https://www.adobe.com/products/illustrator.html","code":""},{"path":"/articles/poppr_manual.html","id":"appendix:graphics:ggplot2","dir":"Articles","previous_headings":"Appendix > Exporting Graphics","what":"Exporting ggplot2 graphics","title":"Data import and manipulation in poppr version `r packageVersion('poppr')`","text":"ggplot2 fantastic package poppr uses produce graphs mlg.table(), poppr(), ia() functions. Saving plot ggplot2 performed one command plot rendered: Note can name file anything, ggsave save format . details documentation can access typing help(ggsave) R console. important things note can set width, height, unit. downside function can save one plot time. want able save multiple plots, read next section.","code":"data(nancycats) # Load the data set. poppr(nancycats, sample = 999) # Produce a single plot. ggsave(\"nancycats.pdf\")"},{"path":"/articles/poppr_manual.html","id":"appendix:graphics:export","dir":"Articles","previous_headings":"Appendix > Exporting Graphics","what":"Exporting any graphics","title":"Data import and manipulation in poppr version `r packageVersion('poppr')`","text":"functions poppr offers give multiple plots, want save , using ggsave require lot tedious typing clicking. Luckily, R Functions save plot generate nearly image format want. can save raster images png, bpm, jpeg. can also save vector based images svg, pdf, postscript. important thing remember saving raster format, default units measurement ‚Äúpixels‚Äù, can change specifying unit choice resolution. raster images svg files, can save plots multiple files, pdf postscript plots can saved one file multiple pages. functions basic form. call function specify file type want (eg. pdf(myfile.pdf)), create graphs want create, make sure close session function dev.(). Let‚Äùs give example saving pdf png files. Since data set made 30 populations 1 individual, save 30 files working directory named ‚Äúnancy_pair_barchart01.png‚Ä¶nancy_pair_barchart30.png‚Äù. way R knows number files %02d part command. ‚Äùs telling R use number two digits long place expression. files 14x14‚Äù resolution 300 dots per inch. wanted thing, place one file, use pdf option. Remember, important forget type dev.() done making graphs. Note specify resolution image since based vector graphics.","code":"data(nancycats)  png(\"nancy_pair%02d.png\", width = 14, height = 14, units = \"in\", res = 300) poppairs <- lapply(seppop(nancycats), pair.ia, limits = c(-0.25, 1)) dev.off() pdf(\"nancy_pair.png\", width = 14, height = 14, compress = FALSE) poppairs <- lapply(seppop(nancycats), pair.ia, limits = c(-0.25, 1)) dev.off()"},{"path":[]},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Zhian N. Kamvar. Maintainer, author. Javier F. Tabima. Author. Sydney E. Everhart. Contributor, data contributor. Jonah C. Brooks. Author. Stacy . Krueger-Hadfield. Contributor. Erik Sotka. Contributor. Brian J. Knaus. Contributor. Patrick G. Meirmans. Contributor. Fr√©d√©ric D. Chevalier. Contributor. David Folarin. Author. Niklaus J. Gr√ºnwald. Thesis advisor.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Kamvar ZN, Tabima JF, Gr√ºnwald NJ. (2014) Poppr: R package genetic analysis populations clonal, partially clonal, /sexual reproduction. PeerJ 2:e281. doi: 10.7717/peerj.281 Kamvar ZN, Brooks JC Gr√ºnwald NJ (2015) Novel R tools analysis genome-wide population genetic data emphasis clonality. Front. Genet. 6:208. doi: 10.3389/fgene.2015.00208","code":"@Article{kamvar2014poppr,   title = {\\textit{Poppr}: an {R} package for genetic analysis of populations with clonal, partially clonal, and/or sexual reproduction.},   author = {Zhian N. Kamvar and Javier F. Tabima and Niklaus J. Gr√ºnwald},   year = {2014},   month = {3},   volume = {2},   pages = {e281},   keywords = {population genetics, clonality, genotypic diversity, index of association, Bruvo's distance, clone correction, minimum spanning networks, hierarchy, bootstrap, permutation},   issn = {2167-8359},   url = {https://doi.org/10.7717/peerj.281},   doi = {10.7717/peerj.281},   journal = {PeerJ}, } @Article{kamvar2015novel,   title = {{Novel R tools for analysis of genome-wide population genetic data with emphasis on clonality}},   author = {Zhian N. Kamvar and Jonah C. Brooks and Niklaus J. Gr√ºnwald},   year = {2015},   month = {6},   volume = {6},   pages = {208},   keywords = {clonality, population genomics, bootstrap, index of association, hierarchical analysis, sliding window},   url = {https://doi.org/10.3389/fgene.2015.00208},   doi = {10.3389/fgene.2015.00208},   journal = {Front. Genet.}, }"},{"path":[]},{"path":"/index.html","id":"what-is-poppr","dir":"","previous_headings":"","what":"What is poppr?","title":"Genetic Analysis of Populations with Mixed Reproduction","text":"Poppr R package designed analysis populations mixed modes sexual clonal reproduction. built around framework adegenet‚Äôs genind genlight objects offers following implementations: clone censoring populations multiple levels hierarchy convenient counting multilocus genotypes sub-setting populations multiple levels hierarchy define multilocus genotypes calculation indices genotypic diversity, evenness, richness, rarefaction drawing dendrograms bootstrap support genetic distances drawing minimum spanning networks genetic distances calculation index association () () batch processing server R (‚â• 2.15.1) installed calculation Bruvo‚Äôs distance microsatellite (SSR) markers (implemented C speed) import data export GenAlEx","code":""},{"path":"/index.html","id":"new-in-version-20","dir":"","previous_headings":"What is poppr?","what":"New in version 2.0:","title":"Genetic Analysis of Populations with Mixed Reproduction","text":"handling genomic SNP data custom multilocus genotype definitions collapse multilocus lineages genetic distance calculate reticulate minimum spanning networks calculate index association sliding window across snps bootstrapping MLG diversity statistics interactive exploration minimum spanning networks ! full details, see NEWS file type R console:","code":"news(Version >= \"2.0.0\", package = \"poppr\")"},{"path":"/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Genetic Analysis of Populations with Mixed Reproduction","text":"use poppr , please specify version cite: Kamvar ZN, Tabima JF, Gr√ºnwald NJ. (2014) Poppr: R package genetic analysis populations clonal, partially clonal, /sexual reproduction. PeerJ 2:e281 https://doi.org/10.7717/peerj.281 use poppr presentation please mention poppr R package, specify version, use logo: (png) | (svg). Additionally, use following functionalities: minimum spanning networks reticulation collapsing multilocus genotypes multilocus lineages mlg.filter() custom multilocus genotype definitions mlg.custom() index association genomic data win.ia() samp.ia() bootstrapping genetic distance genind, genlight, genpop objects aboot() Please also cite: Kamvar ZN, Brooks JC Gr√ºnwald NJ (2015) Novel R tools analysis genome-wide population genetic data emphasis clonality. Front. Genet. 6:208. doi: 10.3389/fgene.2015.00208 can obtain citation information R typing:","code":"citation(package = \"poppr\")"},{"path":[]},{"path":"/index.html","id":"from-cran","dir":"","previous_headings":"Installation","what":"From CRAN","title":"Genetic Analysis of Populations with Mixed Reproduction","text":"Binary versions mac windows available R ‚â• 2.15.1 . install, make sure R least version 2.15.1 (authors recommend ‚â• 3.0), console, type: want absolute latest version poppr, see installing unreleased versions .","code":"install.packages(\"poppr\")"},{"path":"/index.html","id":"stable-version","dir":"","previous_headings":"Installation","what":"Stable version","title":"Genetic Analysis of Populations with Mixed Reproduction","text":"New features occasionally added {poppr}, can take time get CRAN. know want latest version {poppr}, (contain bug fixes new features included future releases), can use custom R-Universe repository, updated hourly: https://zkamvar.r-universe.dev/builds install poppr R-Universe, can use following code: universe repository also contain --date versions {adegenet} {hierfstat}, commonly used conjunction {poppr} notoriously date CRAN.","code":"universe <- c(\"https://zkamvar.r-universe.dev\", \"https://cloud.r-project.org\") install.packages(\"poppr\", repos = universe)"},{"path":"/index.html","id":"unstabledevelopment-versions","dir":"","previous_headings":"Installation","what":"Unstable/Development versions","title":"Genetic Analysis of Populations with Mixed Reproduction","text":"Development versions {poppr} GitHub, need compiled. install package github, make sure following: Xcode (OSX) Rtools (Windows) {remotes} (install, use: install.packages(\"remotes\")) Linux users, make sure function getOption(\"unzip\") returns \"unzip\" \"internal\". , run options(unzip = \"internal\"). {remotes} C compiler installed, can use install_github() function install current version github. new features testing released different branches. features various stages development may may documented. Install caution. command install features branch called ‚Äúdevel‚Äù. Note branches might date main branch. Note: don‚Äôt LaTeX installed, set build_vignettes = FALSE.","code":"remotes::install_github(repo = \"grunwaldlab/poppr@devel\", build_vignettes = TRUE) library(\"poppr\")"},{"path":[]},{"path":"/index.html","id":"r-documentation","dir":"","previous_headings":"Help / Documentation","what":"R documentation","title":"Genetic Analysis of Populations with Mixed Reproduction","text":"access descriptive index help files poppr, type console:","code":"package?poppr"},{"path":"/index.html","id":"vignettes","dir":"","previous_headings":"Help / Documentation","what":"Vignettes","title":"Genetic Analysis of Populations with Mixed Reproduction","text":"vignettes written poppr:","code":""},{"path":"/index.html","id":"user-group","dir":"","previous_headings":"Help / Documentation","what":"User Group","title":"Genetic Analysis of Populations with Mixed Reproduction","text":"Users questions/comments/suggestions regarding version poppr (stable development) direct comments Poppr google group","code":""},{"path":"/index.html","id":"bookprimer","dir":"","previous_headings":"Help / Documentation","what":"Book/Primer","title":"Genetic Analysis of Populations with Mixed Reproduction","text":"Spring 2014, Dr.¬†Niklaus J. Gr√ºnwald, Dr.¬†Sydney E. Everhart Zhian N. Kamvar wrote primer population genetic analysis R located https://grunwaldlab.github.io/Population_Genetics_in_R.","code":""},{"path":"/index.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"Genetic Analysis of Populations with Mixed Reproduction","text":"Please note project released Contributor Code Conduct. participating project agree abide terms. wish contribute code poppr, please fork repository create pull request added feature.","code":""},{"path":"/reference/Aeut.html","id":null,"dir":"Reference","previous_headings":"","what":"Oomycete root rot pathogen *Aphanomyces euteiches* AFLP data ‚Äî Aeut","title":"Oomycete root rot pathogen *Aphanomyces euteiches* AFLP data ‚Äî Aeut","text":"Aeut dataset consists 187 isolates Oomycete root    rot pathogen, *Aphanomyces euteiches* collected two different    fields NW Oregon W Washington, USA.","code":""},{"path":"/reference/Aeut.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Oomycete root rot pathogen *Aphanomyces euteiches* AFLP data ‚Äî Aeut","text":"","code":"data(Aeut)"},{"path":"/reference/Aeut.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Oomycete root rot pathogen *Aphanomyces euteiches* AFLP data ‚Äî Aeut","text":"[genind()] object two populations containing data   frame `` slot called `population_hierarchy`.   data frame gives indices populations subpopulations data   set.","code":""},{"path":"/reference/Aeut.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Oomycete root rot pathogen *Aphanomyces euteiches* AFLP data ‚Äî Aeut","text":"Grunwald, NJ Hoheisel, G.. 2006. Hierarchical Analysis   Diversity, Selfing, Genetic Differentiation Populations    Oomycete *Aphanomyces euteiches*. Phytopathology 96:1134-1141   doi: doi:10.1094/PHYTO-96-1134","code":""},{"path":"/reference/MLG-accessors.html","id":null,"dir":"Reference","previous_headings":"","what":"Accessors for the MLG object ‚Äî visible","title":"Accessors for the MLG object ‚Äî visible","text":"documentation developers poppr. accessors  preferred accessing elements via @ symbol. Please use code accessing MLG objects.","code":""},{"path":"/reference/MLG-accessors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Accessors for the MLG object ‚Äî visible","text":"","code":"visible(x)  visible(x) <- value  MLG2df(x)  distname(x)  distenv(x)  distname(x) <- value  distenv(x) <- value  distargs(x)  distargs(x) <- value  distalgo(x)  distalgo(x) <- value  cutoff(x)  cutoff(x) <- value"},{"path":"/reference/MLG-accessors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Accessors for the MLG object ‚Äî visible","text":"x MLG object value see details","code":""},{"path":"/reference/MLG-accessors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Accessors for the MLG object ‚Äî visible","text":"see details","code":""},{"path":"/reference/MLG-accessors.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Accessors for the MLG object ‚Äî visible","text":"accessors intended internal use . affect   MLG objects, genind objects. visible MLG2df general    forms MLG. distargs cutoff specific use    mlg.filter function offers filtering option. argument   \"value\" always take type defined MLG    class.","code":""},{"path":[]},{"path":"/reference/MLG-accessors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Accessors for the MLG object ‚Äî visible","text":"","code":"# \\dontrun{ # These examples will simply show you what you can do with these set.seed(5000) (x <- sample(10, 20, replace = TRUE)) #>  [1]  8  5  5  2  3  1  4  9  6  4  5  9  7 10  2  4  2  4 10  2 (m <- new(\"MLG\", x)) #> 20 original mlgs. #>  [1]  8  5  5  2  3  1  4  9  6  4  5  9  7 10  2  4  2  4 10  2  # Visibility ------------------------------ visible(m) # original #> [1] \"original\" visible(m) <- \"contracted\" m          # shows contracted MLGS #> 20 contracted mlgs with a cutoff of 0 based on the function diss.dist #>  [1]  8  5  5  2  3  1  4  9  6  4  5  9  7 10  2  4  2  4 10  2  # Conversion to data frame ---------------- MLG2df(m)  # Grab the internal data frame #>    expanded original contracted custom #> 1         8        8          8      8 #> 2         5        5          5      5 #> 3         5        5          5      5 #> 4         2        2          2      2 #> 5         3        3          3      3 #> 6         1        1          1      1 #> 7         4        4          4      4 #> 8         9        9          9      9 #> 9         6        6          6      6 #> 10        4        4          4      4 #> 11        5        5          5      5 #> 12        9        9          9      9 #> 13        7        7          7      7 #> 14       10       10         10     10 #> 15        2        2          2      2 #> 16        4        4          4      4 #> 17        2        2          2      2 #> 18        4        4          4      4 #> 19       10       10         10     10 #> 20        2        2          2      2  # Distance function handling -------------- distname(m) # nei.dist #> [1] \"diss.dist\" distargs(m) # list() #> list() distalgo(m) # farthest #> [1] \"farthest_neighbor\" cutoff(m) #>   expanded contracted  #>          0          0   distname(m) <- substitute(\"diss.dist\") distargs(m) <- list(percent = TRUE) distalgo(m) <- \"average\" cutoff(m)[\"contracted\"] <- 0.2  # }"},{"path":"/reference/MLG-class.html","id":null,"dir":"Reference","previous_headings":"","what":"MLG class ‚Äî MLG-class","title":"MLG class ‚Äî MLG-class","text":"class store multilocus genotypes genclone objects. intended internal use .","code":""},{"path":"/reference/MLG-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"MLG class ‚Äî MLG-class","text":"mlg list containing four vectors, one type MLG  manipulation. visible character specifying MLG type displayed  accessed. distname name distance function matrix used collapse  mlgs. distenv environment contains distance function matrix distargs arguments provided compute distance function. distalgo algorithm used contract multilocus genotypes. cutoff Two numbers specifying cutoff value expanding  collapsing MLGs.","code":""},{"path":[]},{"path":"/reference/MLG-class.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"MLG class ‚Äî MLG-class","text":"Zhian N. Kamvar","code":""},{"path":"/reference/MLG-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"MLG class ‚Äî MLG-class","text":"","code":"# These examples will simply show you what you can do with these set.seed(5000) (x <- sample(10, 20, replace = TRUE)) #>  [1]  8  5  5  2  3  1  4  9  6  4  5  9  7 10  2  4  2  4 10  2 (m <- new(\"MLG\", x)) #> 20 original mlgs. #>  [1]  8  5  5  2  3  1  4  9  6  4  5  9  7 10  2  4  2  4 10  2   visible(m) # original is always default #> [1] \"original\"    m[]       # adding braces after the object will always return a vector of  #>  [1]  8  5  5  2  3  1  4  9  6  4  5  9  7 10  2  4  2  4 10  2            # the same type as defined in \"visible\"              m + 1     # You can do math on the numeric ones #>  [1]  9  6  6  3  4  2  5 10  7  5  6 10  8 11  3  5  3  5 11  3    visible(m) <- \"custom\"  m + 2     # This should throw a warning #> Warning: ‚Äò+‚Äô not meaningful for factors #>  [1] NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA  # The types are stored in a data frame. You can retrieve them easily:  visible(m) <- \"original\"  m #> 20 original mlgs. #>  [1]  8  5  5  2  3  1  4  9  6  4  5  9  7 10  2  4  2  4 10  2  m[, \"custom\"] #>  [1] 8  5  5  2  3  1  4  9  6  4  5  9  7  10 2  4  2  4  10 2  #> Levels: 1 2 3 4 5 6 7 8 9 10    # Important for subsetting, if you subset the object, normally, it will   # return a vector unless you specify all = TRUE  m[1:10]             # original vector #>  [1] 8 5 5 2 3 1 4 9 6 4  m[1:10, all = TRUE] # still class MLG #> 10 original mlgs. #>  [1] 8 5 5 2 3 1 4 9 6 4"},{"path":"/reference/MLG-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Methods used for MLG objects ‚Äî initialize,MLG-method","title":"Methods used for MLG objects ‚Äî initialize,MLG-method","text":"Default methods accessing subsetting MLG objects.","code":""},{"path":"/reference/MLG-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Methods used for MLG objects ‚Äî initialize,MLG-method","text":"","code":"# S4 method for MLG initialize(.Object, mlg)  # S4 method for MLG,ANY,ANY,ANY [(x, i, j, ..., all = FALSE, drop = TRUE)  # S4 method for MLG,ANY,ANY,ANY [(x, i, j) <- value  # S4 method for MLG show(object)  # S4 method for MLG length(x)  # S4 method for MLG,ANY Ops(e1, e2)  # S4 method for MLG Math(x)  # S4 method for MLG Math2(x, digits)  # S4 method for MLG Summary(x, ..., na.rm = FALSE)"},{"path":"/reference/MLG-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Methods used for MLG objects ‚Äî initialize,MLG-method","text":".Object character, \"MLG\" mlg vector element assigns multilocus genotype  individual data set. x MLG object vector integers logical values index MLG vector. j One \"original\" \"expanded\" \"contracted\" \"custom\" ... passed summary methods logical value indicating whether return subset MLG values numeric. value vector MLGs replace. internal use . object MLG object. e1 MLG object e2 number digits number digits retain na.rm passed summary methods","code":""},{"path":[]},{"path":"/reference/MLG-method.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Methods used for MLG objects ‚Äî initialize,MLG-method","text":"Zhian N. Kamvar","code":""},{"path":"/reference/Pinf.html","id":null,"dir":"Reference","previous_headings":"","what":"Phytophthora infestans data from Mexico and South America. ‚Äî Pinf","title":"Phytophthora infestans data from Mexico and South America. ‚Äî Pinf","text":"Pinf data set contains 86 isolates genotyped 11    microsatellite loci collected Mexico, Peru, Columbia, Ecuador.    subset data used reference .","code":""},{"path":"/reference/Pinf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Phytophthora infestans data from Mexico and South America. ‚Äî Pinf","text":"","code":"data(Pinf)"},{"path":"/reference/Pinf.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Phytophthora infestans data from Mexico and South America. ‚Äî Pinf","text":"[genclone-class] object 2 hierarchical levels    called \"Continent\" \"Country\" contain 2 4 populations,    respectively.","code":""},{"path":"/reference/Pinf.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Phytophthora infestans data from Mexico and South America. ‚Äî Pinf","text":"Goss, Erica M., Javier F. Tabima, David EL Cooke, Silvia    Restrepo, William E. Fry, Gregory . Forbes, Valerie J. Fieland, Martha    Cardenas, Niklaus J. Gr√ºnwald. \"Irish potato famine pathogen    *Phytophthora infestans* originated central Mexico rather    Andes.\" Proceedings National Academy Sciences 111:8791-8796. doi:   doi:10.1073/pnas.1401884111","code":""},{"path":"/reference/Pram.html","id":null,"dir":"Reference","previous_headings":"","what":"Phytophthora ramorum data from OR Forests and Nurseries (OR and CA) ‚Äî Pram","title":"Phytophthora ramorum data from OR Forests and Nurseries (OR and CA) ‚Äî Pram","text":"data set    doi:10.5281/zenodo.13007 . converted    genclone object poppr version 2.0. contains 729 samples    Sudden Oak Death pathogen *Phytophthora ramorum* genotyped five    microsatellite loci (Kamvar et. al., 2015). 513 samples collected   forests Curry County, 2001 mid-2014 (labeled watershed   region). 216 samples represents genotypes collected   Nurseries CA Goss et. al. (2009).","code":""},{"path":"/reference/Pram.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Phytophthora ramorum data from OR Forests and Nurseries (OR and CA) ‚Äî Pram","text":"","code":"data(Pram)"},{"path":"/reference/Pram.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Phytophthora ramorum data from OR Forests and Nurseries (OR and CA) ‚Äî Pram","text":"[genclone-class] object 3 hierarchical levels    called \"SOURCE\", \"YEAR\", , \"STATE\". slot contains    named vector repeat lengths called \"REPLEN\", matrix xy    coordinates forest samples called \"xy\", palette    color ~SOURCE/STATE stratification called \"comparePal\".","code":""},{"path":"/reference/Pram.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Phytophthora ramorum data from OR Forests and Nurseries (OR and CA) ‚Äî Pram","text":"Kamvar, Z. N., Larsen, M. M., Kanaskie, . M., Hansen, E. M., &    Gr√ºnwald, N. J. (2015). Spatial temporal analysis populations   sudden oak death pathogen Oregon forests. Phytopathology 105:982-989.    doi:   doi:10.1094/PHYTO-12-14-0350-FI Zhian N. Kamvar, Meg M. Larsen, Alan M. Kanaskie, Everett M. Hansen, &    Niklaus J. Gr√ºnwald. 2014. Sudden_Oak_Death_in_Oregon_Forests: Spatial    temporal population dynamics sudden oak death epidemic Oregon    Forests. ZENODO, doi:   doi:10.5281/zenodo.13007 Goss, E. M., Larsen, M., Chastagner, G. ., Givens, D. R., Gr√ºnwald, N.   J. 2009. Population genetic analysis infers migration pathways    *Phytophthora ramorum* US nurseries. PLoS Pathog. 5:e1000583. doi:   doi:10.1371/journal.ppat.1000583","code":""},{"path":"/reference/Pram.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Phytophthora ramorum data from OR Forests and Nurseries (OR and CA) ‚Äî Pram","text":"","code":"data(Pram)  # Repeat lengths (previously processed via fix_replen) other(Pram)$REPLEN #>  PrMS6A1  Pr9C3A1 PrMS39A1 PrMS45A1 PrMS43A1  #>  3.00000  2.00000  4.00001  4.00000  4.00000   # Color palette for source by state. Useful for minimum spanning networks other(Pram)$comparePal #>    Nursery_CA    Nursery_OR    JHallCr_OR NFChetHigh_OR      Coast_OR  #>     \"#000000\"     \"#808080\"     \"#A6CEE3\"     \"#99CD91\"     \"#B89B74\"  #>   HunterCr_OR   Winchuck_OR ChetcoMain_OR  PistolRSF_OR  #>     \"#F06C45\"     \"#ED8F47\"     \"#825D99\"     \"#B15928\""},{"path":"/reference/aboot.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate a dendrogram with bootstrap support using any distance applicable\nto genind or genclone objects. ‚Äî aboot","title":"Calculate a dendrogram with bootstrap support using any distance applicable\nto genind or genclone objects. ‚Äî aboot","text":"Calculate dendrogram bootstrap support using distance applicable genind genclone objects.","code":""},{"path":"/reference/aboot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate a dendrogram with bootstrap support using any distance applicable\nto genind or genclone objects. ‚Äî aboot","text":"","code":"aboot(   x,   strata = NULL,   tree = \"upgma\",   distance = \"nei.dist\",   sample = 100,   cutoff = 0,   showtree = TRUE,   missing = \"mean\",   mcutoff = 0,   quiet = FALSE,   root = NULL,   ... )"},{"path":"/reference/aboot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate a dendrogram with bootstrap support using any distance applicable\nto genind or genclone objects. ‚Äî aboot","text":"x genind-class, genpop-class, genclone-class, genlight, snpclone matrix object. strata formula specifying strata used convert x genclone object x genind object. Defaults NULL. See details. tree text string function can calculate tree distance matrix. Defaults \"upgma\". Note must load package function work. distance character function defining distance applied x. Defaults nei.dist(). sample integer representing number bootstrap replicates Default 100. cutoff integer 0 100 setting cutoff value return bootstrap values nodes. Default 0. showtree TRUE (Default), dendrogram plotted. FALSE, nothing plotted. missing method used missingno(): \"mean\" (default), \"zero\", \"loci\", \"genotype\", \"ignore\". mcutoff value 0 (default) 1 defining percentage tolerable missing data missing parameter set \"loci\" \"genotype\". set distance metric can handle missing data. quiet FALSE (default), progress bar printed screen. root tree rooted? parameter passed ape::boot.phylo(). tree parameter returns rooted tree (like UPGMA), TRUE, otherwise (like neighbor-joining), false. set NULL (default), tree considered rooted ape::.ultrametric() true. ... parameters passed distance method.","code":""},{"path":"/reference/aboot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate a dendrogram with bootstrap support using any distance applicable\nto genind or genclone objects. ‚Äî aboot","text":"object class ape::phylo().","code":""},{"path":"/reference/aboot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate a dendrogram with bootstrap support using any distance applicable\nto genind or genclone objects. ‚Äî aboot","text":"function automates process bootstrapping genetic data create dendrogram bootstrap support nodes. randomly sample replacement loci gen (genind/genpop) object columns numeric matrix, assuming loci/columns independent. process randomly sampling gen objects replacement carried use internal class called bootgen. necessary due fact columns genind matrix defined alleles thus interrelated. function specifically bootstrap loci results biologically relevant. function, user can also define custom distance performed genind genclone object. data frame-like object columns independent pairs columns independent, may simpler use ape::boot.phylo() calculate bootstrap support values.","code":""},{"path":"/reference/aboot.html","id":"the-strata-argument","dir":"Reference","previous_headings":"","what":"the strata argument","title":"Calculate a dendrogram with bootstrap support using any distance applicable\nto genind or genclone objects. ‚Äî aboot","text":"argument called strata. argument useful want bootstrap populations adegenet::genind() object. specify strata, genind object converted adegenet::genpop() specified strata.","code":""},{"path":"/reference/aboot.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Calculate a dendrogram with bootstrap support using any distance applicable\nto genind or genclone objects. ‚Äî aboot","text":"prevosti.dist() diss.dist() exactly , diss.dist() scales better large numbers individuals (n > 125) cost required memory.","code":""},{"path":"/reference/aboot.html","id":"missing-data","dir":"Reference","previous_headings":"","what":"missing data","title":"Calculate a dendrogram with bootstrap support using any distance applicable\nto genind or genclone objects. ‚Äî aboot","text":"Missing data allowed many distances. Thus, one first steps function treat missing data setting average allele frequency data set. using distance can handle missing data (Prevosti's distance), can set missing = \"ignore\" allow distance function handle missing data. See missingno() details missing data.","code":""},{"path":"/reference/aboot.html","id":"bruvo-s-distance","dir":"Reference","previous_headings":"","what":"Bruvo's Distance","title":"Calculate a dendrogram with bootstrap support using any distance applicable\nto genind or genclone objects. ‚Äî aboot","text":"calculation Bruvo's distance possible function, optimized function bruvo.boot().","code":""},{"path":"/reference/aboot.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculate a dendrogram with bootstrap support using any distance applicable\nto genind or genclone objects. ‚Äî aboot","text":"Kamvar ZN, Brooks JC Gr√ºnwald NJ (2015) Novel R tools analysis genome-wide population genetic data emphasis clonality. Frontiers Genetics 6:208. doi:10.3389/fgene.2015.00208","code":""},{"path":[]},{"path":"/reference/aboot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate a dendrogram with bootstrap support using any distance applicable\nto genind or genclone objects. ‚Äî aboot","text":"","code":"data(nancycats) nan9 <- popsub(nancycats, 9)  set.seed(9999) # Generate a tree using nei's distance neinan <- aboot(nan9, dist = nei.dist) #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #>  Running bootstraps:       100 / 100 #> Calculating bootstrap values... done.   set.seed(9999) # Generate a tree using custom distance bindist <- function(x) dist(tab(x), method = \"binary\") binnan <- aboot(nan9, dist = bindist) #>  Running bootstraps:       100 / 100 #> Calculating bootstrap values... done.   # \\dontrun{ # Distances from other packages. # # Sometimes, distance functions from other packages will have the constraint # that the incoming data MUST be genind. Internally, aboot uses the  # bootgen class ( class?bootgen ) to shuffle loci, and will throw an error # The function bootgen2genind helps fix that. Here's an example of a function # that expects a genind class from above bindist <- function(x){   stopifnot(is.genind(x))   dist(tab(x), method = \"binary\") } # # Fails: # aboot(nan9, dist = bindist) ## Error: is.genind(x) is not TRUE # # Add bootgen2genind to get it working! # Works: aboot(nan9, dist = function(x) bootgen2genind(x) %>% bindist) #>  Running bootstraps:       100 / 100 #> Calculating bootstrap values... done.  #>  #> Phylogenetic tree with 9 tips and 8 internal nodes. #>  #> Tip labels: #>   N104, N105, N106, N107, N108, N109, ... #> Node labels: #>   100, 86, 52, 72, 42, 81, ... #>  #> Rooted; includes branch lengths.  # AFLP data data(Aeut)  # Nei's distance anei <- aboot(Aeut, dist = nei.dist, sample = 1000, cutoff = 50) #> Warning: Some branch lengths of the tree are negative. Normalizing branches according to Kuhner and Felsenstein (1994) #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #>  Running bootstraps:       100 / 1000 #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #>  Running bootstraps:       200 / 1000 #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #>  Running bootstraps:       300 / 1000 #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #>  Running bootstraps:       400 / 1000 #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #>  Running bootstraps:       500 / 1000 #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #>  Running bootstraps:       600 / 1000 #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #>  Running bootstraps:       700 / 1000 #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #>  Running bootstraps:       800 / 1000 #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #>  Running bootstraps:       900 / 1000 #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #> Warning: Infinite values detected. #>  Running bootstraps:       1000 / 1000 #> Calculating bootstrap values... done.   # Rogers' distance arog <- aboot(Aeut, dist = rogers.dist, sample = 1000, cutoff = 50) #> Error in `levels<-`(`*tmp*`, value = as.character(levels)): factor level [12] is duplicated  # This can also be run on genpop objects strata(Aeut) <- other(Aeut)$population_hierarchy[-1] Aeut.gc <- as.genclone(Aeut) setPop(Aeut.gc) <- ~Pop/Subpop Aeut.pop <- genind2genpop(Aeut.gc) #>  #>  Converting data from a genind to a genpop object...  #>  #> ...done. #>  set.seed(5000) aboot(Aeut.pop, sample = 1000) # compare to Grunwald et al. 2006 #> Warning: Infinite values detected. #>  Running bootstraps:       100 / 1000 Running bootstraps:       200 / 1000 Running bootstraps:       300 / 1000 Running bootstraps:       400 / 1000 #> Warning: Infinite values detected. #> Warning: Infinite values detected. #>  Running bootstraps:       500 / 1000 #> Warning: Infinite values detected. #>  Running bootstraps:       600 / 1000 #> Warning: Infinite values detected. #>  Running bootstraps:       700 / 1000 #> Warning: Infinite values detected. #> Warning: Infinite values detected. #>  Running bootstraps:       800 / 1000 #> Warning: Infinite values detected. #>  Running bootstraps:       900 / 1000 Running bootstraps:       1000 / 1000 #> Calculating bootstrap values... done. #>  #> Phylogenetic tree with 18 tips and 17 internal nodes. #>  #> Tip labels: #>   Athena_1, Athena_2, Athena_3, Athena_4, Athena_5, Athena_6, ... #> Node labels: #>   100, 98.4, 98.5, 67.7, 60.1, 45.6, ... #>  #> Rooted; includes branch lengths.  # You can also use the strata argument to convert to genpop inside the function. set.seed(5000) aboot(Aeut.gc, strata = ~Pop/Subpop, sample = 1000) #> Warning: Infinite values detected. #>  Running bootstraps:       100 / 1000 Running bootstraps:       200 / 1000 Running bootstraps:       300 / 1000 Running bootstraps:       400 / 1000 #> Warning: Infinite values detected. #> Warning: Infinite values detected. #>  Running bootstraps:       500 / 1000 #> Warning: Infinite values detected. #>  Running bootstraps:       600 / 1000 #> Warning: Infinite values detected. #>  Running bootstraps:       700 / 1000 #> Warning: Infinite values detected. #> Warning: Infinite values detected. #>  Running bootstraps:       800 / 1000 #> Warning: Infinite values detected. #>  Running bootstraps:       900 / 1000 Running bootstraps:       1000 / 1000 #> Calculating bootstrap values... done.  #>  #> Phylogenetic tree with 18 tips and 17 internal nodes. #>  #> Tip labels: #>   Athena_1, Athena_2, Athena_3, Athena_4, Athena_5, Athena_6, ... #> Node labels: #>   100, 98.4, 98.5, 67.7, 60.1, 45.6, ... #>  #> Rooted; includes branch lengths.  # And genlight objects  # From glSim: ## 1,000 non structured SNPs, 100 structured SNPs x <- glSim(100, 1e3, n.snp.struc=100, ploid=2) aboot(x, distance = bitwise.dist) #>  Running bootstraps:       100 / 100 #> Calculating bootstrap values... done.  #>  #> Phylogenetic tree with 100 tips and 99 internal nodes. #>  #> Tip labels: #>   1, 2, 3, 4, 5, 6, ... #> Node labels: #>   100, NA, NA, NA, NA, NA, ... #>  #> Rooted; includes branch lengths.  # Utilizing other tree methods  library(\"ape\")  aboot(Aeut.pop, tree = fastme.bal, sample = 1000) #> Warning: Some branch lengths of the tree are negative. Normalizing branches according to Kuhner and Felsenstein (1994) #>  Running bootstraps:       100 / 1000 #> Warning: Infinite values detected. #>  Running bootstraps:       200 / 1000 Running bootstraps:       300 / 1000 #> Warning: Infinite values detected. #>  Running bootstraps:       400 / 1000 Running bootstraps:       500 / 1000 Running bootstraps:       600 / 1000 #> Warning: Infinite values detected. #>  Running bootstraps:       700 / 1000 Running bootstraps:       800 / 1000 Running bootstraps:       900 / 1000 #> Warning: Infinite values detected. #>  Running bootstraps:       1000 / 1000 #> Calculating bootstrap values... done.  #>  #> Phylogenetic tree with 18 tips and 16 internal nodes. #>  #> Tip labels: #>   Athena_1, Athena_2, Athena_3, Athena_4, Athena_5, Athena_6, ... #> Node labels: #>   NA, 95.7, 69, 46.4, 48.7, 100, ... #>  #> Unrooted; includes branch lengths.  # Utilizing options in other tree methods  myFastME <- function(x) fastme.bal(x, nni = TRUE, spr = FALSE, tbr = TRUE) aboot(Aeut.pop, tree = myFastME, sample = 1000) #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: Some branch lengths of the tree are negative. Normalizing branches according to Kuhner and Felsenstein (1994) #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: Infinite values detected. #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #>  Running bootstraps:       100 / 1000 #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: Infinite values detected. #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: Infinite values detected. #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #>  Running bootstraps:       200 / 1000 #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #>  Running bootstraps:       300 / 1000 #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #>  Running bootstraps:       400 / 1000 #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: Infinite values detected. #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #>  Running bootstraps:       500 / 1000 #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: Infinite values detected. #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #>  Running bootstraps:       600 / 1000 #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: Infinite values detected. #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: Infinite values detected. #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #>  Running bootstraps:       700 / 1000 #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #>  Running bootstraps:       800 / 1000 #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #>  Running bootstraps:       900 / 1000 #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #>  Running bootstraps:       1000 / 1000 #> Calculating bootstrap values... done.  #>  #> Phylogenetic tree with 18 tips and 16 internal nodes. #>  #> Tip labels: #>   Athena_1, Athena_2, Athena_3, Athena_4, Athena_5, Athena_6, ... #> Node labels: #>   NA, 95.3, 70.1, 47.3, 48.8, 100, ... #>  #> Unrooted; includes branch lengths.  # }"},{"path":"/reference/bitwise.dist.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate dissimilarity or Euclidean distance for genlight objects ‚Äî bitwise.dist","title":"Calculate dissimilarity or Euclidean distance for genlight objects ‚Äî bitwise.dist","text":"function calculates dissimilarity Euclidean distances genlight snpclone objects.","code":""},{"path":"/reference/bitwise.dist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate dissimilarity or Euclidean distance for genlight objects ‚Äî bitwise.dist","text":"","code":"bitwise.dist(   x,   percent = TRUE,   mat = FALSE,   missing_match = TRUE,   scale_missing = FALSE,   euclidean = FALSE,   differences_only = FALSE,   threads = 0L )"},{"path":"/reference/bitwise.dist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate dissimilarity or Euclidean distance for genlight objects ‚Äî bitwise.dist","text":"x genlight snpclone object. percent logical. distance represented 0 1? Default set TRUE. FALSE return distance represented integers 1 n n number loci. option effect euclidean = TRUE mat logical. Return matrix object. Default set FALSE, returning dist object. TRUE returns matrix object. missing_match logical. Determines whether two samples differing missing data location counted matching location. Default set TRUE, forces missing data match anything. FALSE forces missing data match information, including missing data. scale_missing logical. TRUE, comparisons missing data scaled proportionally number columns used multiplying value m / (m - x) m number loci x number missing sites. option matches behavior base R's dist() function. Defaults FALSE. euclidean logical. TRUE, Euclidean distance calculated. differences_only logical. differences_only = TRUE, output reflect number different loci. default setting, differences_only = FALSE, reflects number different alleles. Note: effect haploid organisms since 1 locus = 1 allele. option recommended. threads maximum number parallel threads used within function. value 0 (default) attempt use many threads available cores/CPUs. cases ideal. value 1 force function run serially, may increase stability systems. values may specified, used caution.","code":""},{"path":"/reference/bitwise.dist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate dissimilarity or Euclidean distance for genlight objects ‚Äî bitwise.dist","text":"dist object containing pairwise distances samples.","code":""},{"path":"/reference/bitwise.dist.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate dissimilarity or Euclidean distance for genlight objects ‚Äî bitwise.dist","text":"default distance calculated quite simple goes many names depending application. familiar name might Hamming distance, number differences two strings. poppr version 2.8.0, function now also calculates Euclidean distance considerably faster memory-efficient standard dist() function.","code":""},{"path":"/reference/bitwise.dist.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Calculate dissimilarity or Euclidean distance for genlight objects ‚Äî bitwise.dist","text":"function optimized genlight snpclone objects. mean catch-optimization SNP data. Three assumptions must met function work: SNPs bi-allelic Samples haploid diploid samples ploidy user supplies genind genclone object, prevosti.dist() used calculation.","code":""},{"path":[]},{"path":"/reference/bitwise.dist.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Calculate dissimilarity or Euclidean distance for genlight objects ‚Äî bitwise.dist","text":"Zhian N. Kamvar, Jonah C. Brooks","code":""},{"path":"/reference/bitwise.dist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate dissimilarity or Euclidean distance for genlight objects ‚Äî bitwise.dist","text":"","code":"set.seed(999) x <- glSim(n.ind = 10, n.snp.nonstruc = 5e2, n.snp.struc = 5e2, ploidy = 2) x #>  /// GENLIGHT OBJECT ///////// #>  #>  // 10 genotypes,  1,000 binary SNPs, size: 20.6 Kb #>  0 (0 %) missing data #>  #>  // Basic content #>    @gen: list of 10 SNPbin #>    @ploidy: ploidy of each individual  (range: 2-2) #>  #>  // Optional content #>    @pop: population of each individual (group size range: 4-6) #>    @other: a list containing: ancestral.pops  #>  # Assess fraction of different alleles system.time(xd <- bitwise.dist(x, threads = 1L)) #>    user  system elapsed  #>   0.001   0.000   0.005  xd #>         1      2      3      4      5      6      7      8      9 #> 2  0.2230                                                         #> 3  0.2260 0.2280                                                  #> 4  0.2250 0.2170 0.2040                                           #> 5  0.3795 0.3835 0.3795 0.3805                                    #> 6  0.4035 0.3985 0.4055 0.3975 0.2100                             #> 7  0.4005 0.3955 0.3935 0.3885 0.2000 0.2200                      #> 8  0.3880 0.3860 0.3870 0.3960 0.2035 0.2205 0.2135               #> 9  0.3920 0.4030 0.4080 0.3970 0.2135 0.2125 0.2005 0.2150        #> 10 0.3935 0.3905 0.4015 0.3885 0.2230 0.2160 0.2120 0.2265 0.2195  # Calculate Euclidean distance system.time(xdt <- bitwise.dist(x, euclidean = TRUE, scale_missing = TRUE, threads = 1L)) #>    user  system elapsed  #>   0.001   0.000   0.000  xdt #>           1        2        3        4        5        6        7        8 #> 2  23.40940                                                                #> 3  23.74868 24.04163                                                       #> 4  23.36664 23.10844 22.31591                                              #> 5  34.36568 34.82815 34.71311 34.56877                                     #> 6  35.59494 35.45420 36.09709 35.76311 22.93469                            #> 7  35.53871 35.17101 35.79106 35.00000 22.31591 23.57965                   #> 8  34.75629 34.98571 35.12834 35.49648 22.24860 23.08679 23.13007          #> 9  35.49648 35.88872 36.19392 35.41186 23.04344 23.13007 22.24860 22.93469 #> 10 34.71311 34.68429 35.81899 35.05710 23.57965 23.10844 22.80351 23.81176 #>           9 #> 2           #> 3           #> 4           #> 5           #> 6           #> 7           #> 8           #> 9           #> 10 23.51595  # \\dontrun{  # This function is more efficient in both memory and speed than [dist()] for # calculating Euclidean distance on genlight objects. For example, we can # observe a clear speed increase when we attempt a calculation on 100k SNPs # with 10% missing data:  set.seed(999) mat <- matrix(sample(c(0:2, NA),                       100000 * 50,                       replace = TRUE,                       prob = c(0.3, 0.3, 0.3, 0.1)),               nrow = 50) glite <- new(\"genlight\", mat, ploidy = 2)  # Default Euclidean distance  system.time(dist(glite)) #>    user  system elapsed  #>   1.768   0.037   1.812   # Bitwise dist system.time(bitwise.dist(glite, euclidean = TRUE, scale_missing = TRUE)) #>    user  system elapsed  #>   0.676   0.003   0.723   # }"},{"path":"/reference/bitwise.ia.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the index of association between samples in a genlight object. ‚Äî bitwise.ia","title":"Calculate the index of association between samples in a genlight object. ‚Äî bitwise.ia","text":"function parses genlight object calculate return index association samples.","code":""},{"path":"/reference/bitwise.ia.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the index of association between samples in a genlight object. ‚Äî bitwise.ia","text":"","code":"bitwise.ia(x, missing_match = TRUE, differences_only = FALSE, threads = 0)"},{"path":"/reference/bitwise.ia.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the index of association between samples in a genlight object. ‚Äî bitwise.ia","text":"x genlight snpclone object. missing_match boolean determining whether missing data considered match. TRUE (default) missing data locus match data locus comparison. FALSE, missing data locus cause comparisons return maximum possible distance locus (ie, sample 1 missing data locus 1, sample 2 heterozygous locus 1, distance locus 1. sample 2 heterozygous missing locus 1, distance 2. differences_only boolean determining distance counted diploids. Whether TRUE FALSE distance heterozygous locus homozygous locus 1. FALSE (default) distance opposite homozygous loci 2. TRUE distance counts 1, indicating two samples differ locus. threads maximum number parallel threads used within function. value 0 (default) attempt use many threads available cores/CPUs. cases ideal. value 1 force function run serially, may increase stability systems. values may specified, used caution.","code":""},{"path":"/reference/bitwise.ia.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the index of association between samples in a genlight object. ‚Äî bitwise.ia","text":"Index association representing samples genlight object.","code":""},{"path":[]},{"path":"/reference/bitwise.ia.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Calculate the index of association between samples in a genlight object. ‚Äî bitwise.ia","text":"Zhian N. Kamvar, Jonah C. Brooks","code":""},{"path":"/reference/boot.ia.html","id":null,"dir":"Reference","previous_headings":"","what":"Bootstrap the index of association ‚Äî boot.ia","title":"Bootstrap the index of association ‚Äî boot.ia","text":"function perform index association bootstrapped data set multiple times create distribution, showing variation index due repeat observations.","code":""},{"path":"/reference/boot.ia.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bootstrap the index of association ‚Äî boot.ia","text":"","code":"boot.ia(gid, how = \"partial\", reps = 999, quiet = FALSE, ...)"},{"path":"/reference/boot.ia.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bootstrap the index of association ‚Äî boot.ia","text":"gid genind genclone object method bootstrap. default = \"partial\" include unique genotypes sample replacement unique genotypes total number individuals reached. Using = \"full\" randomly sample replacement data . Using = \"psex\" sample full data set first weighting samples via probability encountering nth occurence particular multilocus genotype. See psex() details. reps integer specifying number replicates perform. Defaults 999. quiet logical. FALSE, progress bar displayed. TRUE, progress bar suppressed. ... options passed psex()","code":""},{"path":"/reference/boot.ia.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bootstrap the index of association ‚Äî boot.ia","text":"data frame index association standardized index association columns. Number rows represents number reps.","code":""},{"path":"/reference/boot.ia.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Bootstrap the index of association ‚Äî boot.ia","text":"function experimental. Please use unless know .","code":""},{"path":[]},{"path":"/reference/boot.ia.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bootstrap the index of association ‚Äî boot.ia","text":"","code":"data(Pinf) boot.ia(Pinf, reps = 99) #>           Ia      rbarD #> 1  0.6002580 0.06570511 #> 2  0.4958295 0.05426157 #> 3  0.5040736 0.05519292 #> 4  0.5286633 0.05798116 #> 5  0.5241143 0.05612128 #> 6  0.6025007 0.06580468 #> 7  0.5427107 0.05809528 #> 8  0.5295282 0.05775142 #> 9  0.5690735 0.06229472 #> 10 0.5060795 0.05534120 #> 11 0.5493813 0.06002754 #> 12 0.4331423 0.04727976 #> 13 0.5142747 0.05601795 #> 14 0.4671624 0.05128045 #> 15 0.5471555 0.05976389 #> 16 0.4352443 0.04768930 #> 17 0.5823540 0.06353523 #> 18 0.5256486 0.05740967 #> 19 0.6187546 0.06792873 #> 20 0.6349551 0.06971666 #> 21 0.4669628 0.05111945 #> 22 0.5604240 0.06108168 #> 23 0.6097946 0.06671314 #> 24 0.5290542 0.05790792 #> 25 0.4749155 0.05211690 #> 26 0.5856122 0.06403715 #> 27 0.5270459 0.05775218 #> 28 0.6348331 0.06955090 #> 29 0.6060745 0.06654738 #> 30 0.5416509 0.05911961 #> 31 0.5248975 0.05738266 #> 32 0.4922804 0.05321494 #> 33 0.5185133 0.05669959 #> 34 0.5807863 0.06354870 #> 35 0.5027411 0.05421811 #> 36 0.6143366 0.06635778 #> 37 0.5563455 0.06070333 #> 38 0.5173705 0.05686342 #> 39 0.4867296 0.05307533 #> 40 0.5124420 0.05611800 #> 41 0.7172388 0.07865902 #> 42 0.5736556 0.06295393 #> 43 0.5245316 0.05754646 #> 44 0.5031980 0.05511553 #> 45 0.5382812 0.05795169 #> 46 0.5542815 0.06065684 #> 47 0.4852969 0.05231277 #> 48 0.4738652 0.05178777 #> 49 0.4315105 0.04723402 #> 50 0.5923166 0.06494469 #> 51 0.5059820 0.05447639 #> 52 0.5133417 0.05549737 #> 53 0.5254167 0.05654974 #> 54 0.5766823 0.06338089 #> 55 0.5025817 0.05514337 #> 56 0.5139941 0.05618946 #> 57 0.5161934 0.05652557 #> 58 0.5746393 0.06297153 #> 59 0.5091208 0.05486803 #> 60 0.4884879 0.05281537 #> 61 0.6720210 0.07379432 #> 62 0.5621772 0.06109905 #> 63 0.4760382 0.05228237 #> 64 0.6648355 0.07286684 #> 65 0.5711334 0.06254289 #> 66 0.6240231 0.06736972 #> 67 0.5436718 0.05850436 #> 68 0.4901846 0.05355016 #> 69 0.5032063 0.05448991 #> 70 0.4464114 0.04880341 #> 71 0.4930172 0.05376145 #> 72 0.5378966 0.05859557 #> 73 0.5147597 0.05646401 #> 74 0.4946656 0.05373510 #> 75 0.5870128 0.06433058 #> 76 0.5051534 0.05503404 #> 77 0.6236030 0.06833563 #> 78 0.6127467 0.06632493 #> 79 0.5029579 0.05537807 #> 80 0.5083594 0.05575167 #> 81 0.5488711 0.05898251 #> 82 0.5707142 0.06218573 #> 83 0.6368270 0.06819685 #> 84 0.5291682 0.05804471 #> 85 0.5309435 0.05676489 #> 86 0.5049886 0.05529050 #> 87 0.5475800 0.05964201 #> 88 0.5744172 0.06277506 #> 89 0.5308597 0.05806689 #> 90 0.4086050 0.04413402 #> 91 0.5040869 0.05497732 #> 92 0.4906139 0.05355686 #> 93 0.5411727 0.05906306 #> 94 0.5249584 0.05750165 #> 95 0.5372819 0.05885665 #> 96 0.5068366 0.05533622 #> 97 0.5350064 0.05809123 #> 98 0.5663300 0.06214449 #> 99 0.4980202 0.05424621"},{"path":"/reference/bootgen-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Bootgen object ‚Äî bootgen-class","title":"Bootgen object ‚Äî bootgen-class","text":"internal object used bootstrapping. intended user interaction.","code":""},{"path":"/reference/bootgen-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Bootgen object ‚Äî bootgen-class","text":"type character denoting Codominant (\"codom\") Dominant data (\"P/\") ploidy integer denoting ploidy data set. (>=1) alllist list numeric vectors, representing different locus element vector represents index specific allele. names vector containing names observed samples.","code":""},{"path":"/reference/bootgen-class.html","id":"extends","dir":"Reference","previous_headings":"","what":"Extends","title":"Bootgen object ‚Äî bootgen-class","text":"Virtual Class \"gen\".","code":""},{"path":"/reference/bootgen-class.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Bootgen object ‚Äî bootgen-class","text":"Zhian N. Kamvar","code":""},{"path":"/reference/bootgen-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Methods used for the bootgen object. ‚Äî [,bootgen,ANY,ANY,ANY-method","title":"Methods used for the bootgen object. ‚Äî [,bootgen,ANY,ANY,ANY-method","text":"designed user interaction.","code":""},{"path":"/reference/bootgen-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Methods used for the bootgen object. ‚Äî [,bootgen,ANY,ANY,ANY-method","text":"","code":"# S4 method for bootgen,ANY,ANY,ANY [(x, i, j, ..., drop = FALSE)  # S4 method for bootgen dim(x)  # S4 method for bootgen $(x, name)  # S4 method for bootgen initialize(.Object, gen, na = \"mean\", freq = TRUE)"},{"path":"/reference/bootgen-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Methods used for the bootgen object. ‚Äî [,bootgen,ANY,ANY,ANY-method","text":"x \"bootgen\" object vector numerics indicating number individuals desired j vector numerics corresponding loci desired. ... unused. drop set FALSE .Object character, \"bootgen\" gen genind, genclone, genpop object na missing data treated. Default \"mean\", averaging  values matrix. Possible values listed  tab. freq TRUE, matrix genotype frequency matrix. FALSE, matrix allele counts.","code":""},{"path":"/reference/bootgen-methods.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Methods used for the bootgen object. ‚Äî [,bootgen,ANY,ANY,ANY-method","text":"Zhian N. Kamvar","code":""},{"path":"/reference/bruvo.boot.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a tree using Bruvo's Distance with non-parametric bootstrapping. ‚Äî bruvo.boot","title":"Create a tree using Bruvo's Distance with non-parametric bootstrapping. ‚Äî bruvo.boot","text":"Create tree using Bruvo's Distance non-parametric bootstrapping.","code":""},{"path":"/reference/bruvo.boot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a tree using Bruvo's Distance with non-parametric bootstrapping. ‚Äî bruvo.boot","text":"","code":"bruvo.boot(   pop,   replen = 1,   add = TRUE,   loss = TRUE,   sample = 100,   tree = \"upgma\",   showtree = TRUE,   cutoff = NULL,   quiet = FALSE,   root = NULL,   ... )"},{"path":"/reference/bruvo.boot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a tree using Bruvo's Distance with non-parametric bootstrapping. ‚Äî bruvo.boot","text":"pop genind genclone object replen vector integers indicating length nucleotide repeats microsatellite locus. add TRUE, genotypes zero values treated  genome addition model presented Bruvo et al. 2004. loss TRUE, genotypes zero values treated  genome loss model presented Bruvo et al. 2004. sample integer indicated number bootstrap replicates  desired. tree function can generate tree distance matrix. Default upgma. showtree logical TRUE, tree plotted  nodelabels. cutoff integer cutoff value bootstrap node label values (0 100). quiet logical defaults FALSE. TRUE,  progress bar messages suppressed. root logical parameter passed boot.phylo. tree argument produces rooted tree (e.g. \"upgma\"), value TRUE. produces unrooted tree (e.g. \"nj\"), value FALSE. default, set NULL, assume unrooted phylogeny unless function name contains \"upgma\". ... argument passed boot.phylo. eg.  quiet = TRUE.","code":""},{"path":"/reference/bruvo.boot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a tree using Bruvo's Distance with non-parametric bootstrapping. ‚Äî bruvo.boot","text":"tree class phylo nodelables","code":""},{"path":"/reference/bruvo.boot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a tree using Bruvo's Distance with non-parametric bootstrapping. ‚Äî bruvo.boot","text":"function calculate tree based Bruvo's distance   utilize boot.phylo randomly sample loci   replacement, recalculate tree, tally bootstrap support   (measured percent success). function can take tree   function, native support two algorithms: nj   upgma. want use functions,   must load package use (see examples).","code":""},{"path":"/reference/bruvo.boot.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Create a tree using Bruvo's Distance with non-parametric bootstrapping. ‚Äî bruvo.boot","text":"Please refer documentation bruvo.dist details   algorithm. user provide vector appropriate length   replen , estimated taking minimum difference   among represented alleles locus. RECOMMENDED RELY   ESTIMATION.","code":""},{"path":"/reference/bruvo.boot.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Create a tree using Bruvo's Distance with non-parametric bootstrapping. ‚Äî bruvo.boot","text":"Ruzica Bruvo, Nicolaas K. Michiels, Thomas G. D'Souza, Hinrich Schulenburg. simple method calculation microsatellite genotype distances irrespective ploidy level. Molecular Ecology, 13(7):2101-2106, 2004.","code":""},{"path":[]},{"path":"/reference/bruvo.boot.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create a tree using Bruvo's Distance with non-parametric bootstrapping. ‚Äî bruvo.boot","text":"Zhian N. Kamvar, Javier F. Tabima","code":""},{"path":"/reference/bruvo.boot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a tree using Bruvo's Distance with non-parametric bootstrapping. ‚Äî bruvo.boot","text":"","code":"# Please note that the data presented is assuming that the nancycat dataset  # contains all dinucleotide repeats, it most likely is not an accurate # representation of the data.  # Load the nancycats dataset and construct the repeat vector. data(nancycats) ssr <- rep(2, 9)  # Analyze the 1st population in nancycats  bruvo.boot(popsub(nancycats, 1), replen = ssr) #>  #> Bootstrapping... #> (note: calculation of node labels can take a while even after the progress bar is full) #>  #>  Running bootstraps:       100 / 100 #> Calculating bootstrap values... done.  #>  #> Phylogenetic tree with 10 tips and 9 internal nodes. #>  #> Tip labels: #>   N215, N216, N217, N218, N219, N220, ... #> Node labels: #>   100, 29, 18, 75, 48, 53, ... #>  #> Rooted; includes branch lengths.  # \\dontrun{  # Always load the library before you specify the function. library(\"ape\")  # Estimate the tree based off of the BIONJ algorithm.  bruvo.boot(popsub(nancycats, 9), replen = ssr, tree = bionj) #>  #> Bootstrapping... #> (note: calculation of node labels can take a while even after the progress bar is full) #>  #>  Running bootstraps:       100 / 100 #> Calculating bootstrap values... done.  #>  #> Phylogenetic tree with 9 tips and 7 internal nodes. #>  #> Tip labels: #>   N104, N105, N106, N107, N108, N109, ... #> Node labels: #>   NA, 18, 27, 28, 28, 60, ... #>  #> Unrooted; includes branch lengths.  # Utilizing  balanced FastME bruvo.boot(popsub(nancycats, 9), replen = ssr, tree = fastme.bal) #>  #> Bootstrapping... #> (note: calculation of node labels can take a while even after the progress bar is full) #>  #>  Running bootstraps:       100 / 100 #> Calculating bootstrap values... done.  #>  #> Phylogenetic tree with 9 tips and 7 internal nodes. #>  #> Tip labels: #>   N104, N105, N106, N107, N108, N109, ... #> Node labels: #>   NA, 29, 29, 24, 62, 22, ... #>  #> Unrooted; includes branch lengths.  # To change parameters for the tree, wrap it in a function. # For example, let's build the tree without utilizing subtree-prune-regraft  myFastME <- function(x) fastme.bal(x, nni = TRUE, spr = FALSE, tbr = TRUE) bruvo.boot(popsub(nancycats, 9), replen = ssr, tree = myFastME) #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #>  #> Bootstrapping... #> (note: calculation of node labels can take a while even after the progress bar is full) #>  #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #> Warning: option 'tbr = TRUE' was ignored: see ?fastme.bal #>  Running bootstraps:       100 / 100 #> Calculating bootstrap values... done.  #>  #> Phylogenetic tree with 9 tips and 7 internal nodes. #>  #> Tip labels: #>   N104, N105, N106, N107, N108, N109, ... #> Node labels: #>   NA, 15, 7, 23, 66, 94, ... #>  #> Unrooted; includes branch lengths.  # }"},{"path":"/reference/bruvo.dist.html","id":null,"dir":"Reference","previous_headings":"","what":"Bruvo's distance for microsatellites ‚Äî bruvo.dist","title":"Bruvo's distance for microsatellites ‚Äî bruvo.dist","text":"Calculate average Bruvo's distance loci population.","code":""},{"path":"/reference/bruvo.dist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bruvo's distance for microsatellites ‚Äî bruvo.dist","text":"","code":"bruvo.dist(pop, replen = 1, add = TRUE, loss = TRUE, by_locus = FALSE)  bruvo.between(   query,   ref,   replen = 1,   add = TRUE,   loss = TRUE,   by_locus = FALSE )"},{"path":"/reference/bruvo.dist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bruvo's distance for microsatellites ‚Äî bruvo.dist","text":"pop genind genclone object replen vector integers indicating length nucleotide repeats microsatellite locus. E.g. locus (CAT)  repeat replen value 3. (Also see fix_replen) add TRUE, genotypes zero values treated  genome addition model presented Bruvo et al. 2004. See Note section options. loss TRUE, genotypes zero values treated  genome loss model presented Bruvo et al. 2004. See Note section options. by_locus indicator get results per locus. default setting by_locus = FALSE, indicating Bruvo's distance averaged loci. by_locus = TRUE, list distance matrices returned. query genind genclone object ref genind genclone object","code":""},{"path":"/reference/bruvo.dist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bruvo's distance for microsatellites ‚Äî bruvo.dist","text":"object class dist list objects  by_locus = TRUE","code":""},{"path":"/reference/bruvo.dist.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Bruvo's distance for microsatellites ‚Äî bruvo.dist","text":"Bruvo's distance two alleles calculated    $$d = 1 - 2^{-\\mid x \\mid}$$, x   number repeat units two alleles (see Algorithms    Equations vignette details). distances calculated    combinations alleles locus minimum average   distance allele combinations taken distance    locus. loci averaged obtain distance two   samples. Missing data ignored (fashion    mean(c(1:9, NA), na.rm = TRUE)) alleles missing. See   next section cases.","code":""},{"path":"/reference/bruvo.dist.html","id":"polyploids","dir":"Reference","previous_headings":"","what":"Polyploids","title":"Bruvo's distance for microsatellites ‚Äî bruvo.dist","text":"Ploidy irrelevant respect calculation Bruvo's    distance. However, since makes comparison alleles    locus, makes sense two loci need ploidy    level. Unfortunately polyploids, often difficult fully separate   distinct alleles locus, end genotypes appear   lower ploidy level organism. help deal situations, Bruvo suggested three methods   dealing differences ploidy levels: Infinite Model - simplest way deal count   missing alleles infinitely large distance   anything else 1. Aside computationally simple,   tend inflate distances individuals. Genome Addition Model - suspected organism   gone recent genome expansion, missing alleles   replace possible combinations observed alleles   shorter genotype. example, genotype [69, 70, 0, 0]   0 missing allele, possible combinations : [69, 70, 69,   69], [69, 70, 69, 70], [69, 70, 70, 69], [69, 70, 70, 70].   resulting distances averaged number comparisons. Genome Loss Model - similar genome addition model,   except assumes recent genome reduction event   uses observed values full genotype fill missing   values short genotype. Genome Addition Model,   resulting distances averaged number comparisons. Combination Model - Combine average genome addition   loss models. mentioned , infinite model biased, nearly   computationally intensive either models. reason   addition loss models requires replacement   alleles recalculation Bruvo's distance. number replacements   required equal n^k n number potential   replacements k number alleles replaced.   reduce number calculations assumptions otherwise, Bruvo's    distance calculated using largest observed ploidy pairwise    comparisons. means comparing [69,70,71,0] [59,60,0,0],    treated triploids.","code":""},{"path":"/reference/bruvo.dist.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Bruvo's distance for microsatellites ‚Äî bruvo.dist","text":"bruvo.(): Bruvo's distance query reference diferences query individuals reference individuals reported values NaN","code":""},{"path":"/reference/bruvo.dist.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Bruvo's distance for microsatellites ‚Äî bruvo.dist","text":"use missingno function.","code":""},{"path":"/reference/bruvo.dist.html","id":"missing-alleles-and-bruvo-s-distance-in-poppr-versions-lt-","dir":"Reference","previous_headings":"","what":"Missing alleles and Bruvo's distance in poppr versions < 2.5","title":"Bruvo's distance for microsatellites ‚Äî bruvo.dist","text":"earlier versions poppr, authors assumed ,   calculation Bruvo's distance rely orderd sets   alleles, imputation methods genome addition genome loss   models also assume unordered alleles creating hypothetical   genotypes. means results imputation   consider possible combinations alleles, resulting either -   - estimation Bruvo's distance two samples two   missing alleles. version poppr considers possible   combinations calculating Bruvo's distance incomplete genotype   negligable gain computation time. want see effect change data, can use   global poppr option old.bruvo.model. Currently, option   FALSE can set using    options(old.bruvo.model = TRUE), make sure reset    FALSE afterwards.","code":""},{"path":"/reference/bruvo.dist.html","id":"repeat-lengths-replen-","dir":"Reference","previous_headings":"","what":"Repeat Lengths (replen)","title":"Bruvo's distance for microsatellites ‚Äî bruvo.dist","text":"replen argument crucial proper analysis Bruvo's   distance since calculation relies knowledge number   steps alleles. calculate Bruvo's distance, raw allele calls   first divided repeat lengths rounded. can create   problem repeat lengths even size due IEC 60559 standard   says rounding 0.5 nearest even number, meaning   possible two alleles one step apart may appear exactly   . can fixed subtracting tiny number repeat   length function fix_replen. Please consider using   running Bruvo's distance.","code":""},{"path":"/reference/bruvo.dist.html","id":"model-choice","dir":"Reference","previous_headings":"","what":"Model Choice","title":"Bruvo's distance for microsatellites ‚Äî bruvo.dist","text":"add loss arguments    modify model choice accordingly: Infinite    Model:  add = FALSE, loss = FALSE Genome Addition    Model:  add = TRUE, loss = FALSE Genome Loss Model:    add = FALSE, loss = TRUE Combination Model   (DEFAULT):  add = TRUE, loss = TRUE Details model   choice described Details section, . Additionally,   genotypes containing missing values locus return value   NA contribute average across loci.","code":""},{"path":"/reference/bruvo.dist.html","id":"repeat-lengths","dir":"Reference","previous_headings":"","what":"Repeat Lengths","title":"Bruvo's distance for microsatellites ‚Äî bruvo.dist","text":"user provide vector    appropriate length replen , estimated taking    minimum difference among represented alleles locus.    RECOMMENDED RELY ESTIMATION.","code":""},{"path":"/reference/bruvo.dist.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Bruvo's distance for microsatellites ‚Äî bruvo.dist","text":"Ruzica Bruvo, Nicolaas K. Michiels, Thomas G. D'Souza,    Hinrich Schulenburg. simple method calculation microsatellite    genotype distances irrespective ploidy level. Molecular Ecology,    13(7):2101-2106, 2004.","code":""},{"path":[]},{"path":"/reference/bruvo.dist.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Bruvo's distance for microsatellites ‚Äî bruvo.dist","text":"Zhian N. Kamvar David Folarin","code":""},{"path":"/reference/bruvo.dist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bruvo's distance for microsatellites ‚Äî bruvo.dist","text":"","code":"# Please note that the data presented is assuming that the nancycat dataset  # contains all dinucleotide repeats, it most likely is not an accurate # representation of the data.  # Load the nancycats dataset and construct the repeat vector. data(nancycats) names(alleles(nancycats)) <- locNames(nancycats) # small bug in this data set # Assume the alleles are all dinucleotide repeats. ssr <- rep(2, nLoc(nancycats)) test_replen(nancycats, ssr)         # Are the repeat lengths consistent? #>  fca8 fca23 fca43 fca45 fca77 fca78 fca90 fca96 fca37  #> FALSE  TRUE FALSE  TRUE  TRUE  TRUE FALSE FALSE  TRUE  (ssr <- fix_replen(nancycats, ssr)) # Nope. We need to fix them. #>    fca8   fca23   fca43   fca45   fca77   fca78   fca90   fca96   fca37  #> 1.99999 2.00000 1.99999 2.00000 2.00000 2.00000 1.99999 1.99999 2.00000   # Analyze the first population in nancycats bruvo.dist(popsub(nancycats, 1), replen = ssr) #>           N215      N216      N217      N218      N219      N220      N221 #> N216 0.2377930                                                             #> N217 0.3359375 0.5029297                                                   #> N218 0.4062195 0.5033875 0.5590007                                         #> N219 0.3964844 0.2929688 0.4600694 0.3940701                               #> N220 0.4491882 0.3984070 0.4947645 0.5104167 0.4114312                     #> N221 0.2617188 0.3217773 0.4288194 0.2603895 0.2517361 0.4110243           #> N222 0.4882202 0.4784546 0.5086263 0.5360243 0.4912652 0.2968479 0.4821777 #> N223 0.3789062 0.5166016 0.3142361 0.4444173 0.5451389 0.4769965 0.3541667 #> N224 0.5483093 0.4784851 0.5741916 0.3680556 0.4787055 0.3224826 0.3953722 #>           N222      N223 #> N216                     #> N217                     #> N218                     #> N219                     #> N220                     #> N221                     #> N222                     #> N223 0.4353027           #> N224 0.4956597 0.5307888  # \\dontrun{  # get the per locus estimates: bruvo.dist(popsub(nancycats, 1), replen = ssr, by_locus = TRUE) #> $fca8 #>          N215     N216     N217     N218     N219     N220     N221     N222 #> N216       NA                                                                #> N217       NA       NA                                                       #> N218       NA       NA 0.484375                                              #> N219       NA       NA 0.484375 0.000000                                     #> N220       NA       NA 0.000000 0.484375 0.484375                            #> N221       NA       NA 0.468750 0.250000 0.250000 0.468750                   #> N222       NA       NA 0.000000 0.484375 0.484375 0.000000 0.468750          #> N223       NA       NA 0.250000 0.734375 0.734375 0.250000 0.718750 0.250000 #> N224       NA       NA 0.468750 0.250000 0.250000 0.468750 0.000000 0.468750 #>          N223 #> N216          #> N217          #> N218          #> N219          #> N220          #> N221          #> N222          #> N223          #> N224 0.718750 #>  #> $fca23 #>           N215      N216      N217      N218      N219      N220      N221 #> N216 0.4843750                                                             #> N217 0.0000000 0.4843750                                                   #> N218 0.7187500 0.9375000 0.7187500                                         #> N219 0.3750000 0.4375000 0.3750000 0.7187500                               #> N220 0.0000000 0.4843750 0.0000000 0.7187500 0.3750000                     #> N221 0.0000000 0.4843750 0.0000000 0.7187500 0.3750000 0.0000000           #> N222 0.0000000 0.4843750 0.0000000 0.7187500 0.3750000 0.0000000 0.0000000 #> N223 0.0000000 0.4843750 0.0000000 0.7187500 0.3750000 0.0000000 0.0000000 #> N224 0.8710938 0.9921875 0.8710938 0.8750000 0.9648438 0.8710938 0.8710938 #>           N222      N223 #> N216                     #> N217                     #> N218                     #> N219                     #> N220                     #> N221                     #> N222                     #> N223 0.0000000           #> N224 0.8710938 0.8710938 #>  #> $fca43 #>          N215     N216     N217     N218     N219     N220     N221     N222 #> N216 0.437500                                                                #> N217 0.500000 0.625000                                                       #> N218 0.250000 0.375000 0.250000                                              #> N219 0.687500 0.250000 0.375000 0.437500                                     #> N220 0.921875 0.484375 0.843750 0.859375 0.468750                            #> N221 0.437500 0.000000 0.625000 0.375000 0.250000 0.484375                   #> N222 0.859375 0.750000 0.906250 0.843750 0.812500 0.484375 0.750000          #> N223 0.000000 0.437500 0.500000 0.250000 0.687500 0.921875 0.437500 0.859375 #> N224 0.687500 0.250000 0.375000 0.437500 0.000000 0.468750 0.250000 0.812500 #>          N223 #> N216          #> N217          #> N218          #> N219          #> N220          #> N221          #> N222          #> N223          #> N224 0.687500 #>  #> $fca45 #>          N215     N216     N217     N218     N219     N220     N221     N222 #> N216 0.484375                                                                #> N217 0.375000 0.859375                                                       #> N218 0.437500 0.375000 0.484375                                              #> N219 0.921875 0.437500 0.968750 0.484375                                     #> N220 0.484375 0.000000 0.859375 0.375000 0.437500                            #> N221 0.437500 0.375000 0.484375 0.000000 0.484375 0.375000                   #> N222 0.484375 0.000000 0.859375 0.375000 0.437500 0.000000 0.375000          #> N223 0.437500 0.375000 0.484375 0.000000 0.484375 0.375000 0.000000 0.375000 #> N224 0.484375 0.000000 0.859375 0.375000 0.437500 0.000000 0.375000 0.000000 #>          N223 #> N216          #> N217          #> N218          #> N219          #> N220          #> N221          #> N222          #> N223          #> N224 0.375000 #>  #> $fca77 #>          N215     N216     N217     N218     N219     N220     N221     N222 #> N216 0.000000                                                                #> N217 0.375000 0.375000                                                       #> N218 0.875000 0.875000 0.687500                                              #> N219 0.750000 0.750000 0.375000 0.500000                                     #> N220 0.437500 0.437500 0.250000 0.437500 0.625000                            #> N221 0.750000 0.750000 0.375000 0.500000 0.000000 0.625000                   #> N222 0.500000 0.500000 0.500000 0.843750 0.687500 0.625000 0.687500          #> N223 0.812500 0.812500 0.625000 0.484375 0.718750 0.375000 0.718750 0.625000 #> N224 0.437500 0.437500 0.250000 0.437500 0.625000 0.000000 0.625000 0.625000 #>          N223 #> N216          #> N217          #> N218          #> N219          #> N220          #> N221          #> N222          #> N223          #> N224 0.375000 #>  #> $fca78 #>        N215   N216   N217   N218   N219   N220   N221   N222   N223 #> N216 0.0000                                                         #> N217 0.4375 0.4375                                                  #> N218 0.0000 0.0000 0.4375                                           #> N219 0.0000 0.0000 0.4375 0.0000                                    #> N220 0.4375 0.4375 0.8750 0.4375 0.4375                             #> N221 0.0000 0.0000 0.4375 0.0000 0.0000 0.4375                      #> N222 0.0000 0.0000 0.4375 0.0000 0.0000 0.4375 0.0000               #> N223 0.4375 0.4375 0.0000 0.4375 0.4375 0.8750 0.4375 0.4375        #> N224 0.4375 0.4375 0.8750 0.4375 0.4375 0.0000 0.4375 0.4375 0.8750 #>  #> $fca90 #>           N215      N216      N217      N218      N219      N220      N221 #> N216 0.4960938                                                             #> N217 0.5000000 0.7421875                                                   #> N218 0.0000000 0.4960938 0.5000000                                         #> N219 0.4375000 0.4687500 0.6250000 0.4375000                               #> N220 0.8125000 0.8437500 0.6250000 0.8125000 0.3750000                     #> N221 0.0000000 0.4960938 0.5000000 0.0000000 0.4375000 0.8125000           #> N222 0.6875000 0.7187500 0.3750000 0.6875000 0.2500000 0.2500000 0.6875000 #> N223 0.5000000 0.7421875 0.0000000 0.5000000 0.6250000 0.6250000 0.5000000 #> N224 0.5000000 0.7421875 0.0000000 0.5000000 0.6250000 0.6250000 0.5000000 #>           N222      N223 #> N216                     #> N217                     #> N218                     #> N219                     #> N220                     #> N221                     #> N222                     #> N223 0.3750000           #> N224 0.3750000 0.0000000 #>  #> $fca96 #>           N215      N216      N217      N218      N219      N220      N221 #> N216 0.0000000                                                             #> N217 0.0000000 0.0000000                                                   #> N218 0.9685059 0.9685059 0.9685059                                         #> N219 0.0000000 0.0000000 0.0000000 0.9685059                               #> N220 0.4997559 0.4997559 0.4997559 0.4687500 0.4997559                     #> N221 0.4687500 0.4687500 0.4687500 0.4997559 0.4687500 0.4960938           #> N222 0.9995117 0.9995117 0.9995117 0.4960938 0.9995117 0.4997559 0.9958496 #> N223 0.4687500 0.4687500 0.4687500 0.4997559 0.4687500 0.4960938 0.0000000 #> N224 0.9685059 0.9685059 0.9685059 0.0000000 0.9685059 0.4687500 0.4997559 #>           N222      N223 #> N216                     #> N217                     #> N218                     #> N219                     #> N220                     #> N221                     #> N222                     #> N223 0.9958496           #> N224 0.4960938 0.4997559 #>  #> $fca37 #>       N215  N216  N217  N218  N219  N220  N221  N222  N223 #> N216 0.000                                                 #> N217 0.500 0.500                                           #> N218 0.000 0.000 0.500                                     #> N219 0.000 0.000 0.500 0.000                               #> N220 0.000 0.000 0.500 0.000 0.000                         #> N221 0.000 0.000 0.500 0.000 0.000 0.000                   #> N222 0.375 0.375 0.500 0.375 0.375 0.375 0.375             #> N223 0.375 0.375 0.500 0.375 0.375 0.375 0.375 0.000       #> N224 0.000 0.000 0.500 0.000 0.000 0.000 0.000 0.375 0.375 #>   # View each population as a heatmap. sapply(popNames(nancycats), function(x)  heatmap(as.matrix(bruvo.dist(popsub(nancycats, x), replen = ssr)), symm=TRUE))                  #>        P01        P02        P03        P04        P05        P06        #> rowInd integer,10 integer,22 integer,12 integer,23 integer,15 integer,11 #> colInd integer,10 integer,22 integer,12 integer,23 integer,15 integer,11 #> Rowv   NULL       NULL       NULL       NULL       NULL       NULL       #> Colv   NULL       NULL       NULL       NULL       NULL       NULL       #>        P07        P08        P09       P10        P11        P12        #> rowInd integer,14 integer,10 integer,9 integer,11 integer,20 integer,14 #> colInd integer,14 integer,10 integer,9 integer,11 integer,20 integer,14 #> Rowv   NULL       NULL       NULL      NULL       NULL       NULL       #> Colv   NULL       NULL       NULL      NULL       NULL       NULL       #>        P13        P14        P15        P16        P17        #> rowInd integer,13 integer,17 integer,11 integer,12 integer,13 #> colInd integer,13 integer,17 integer,11 integer,12 integer,13 #> Rowv   NULL       NULL       NULL       NULL       NULL       #> Colv   NULL       NULL       NULL       NULL       NULL       # }"},{"path":"/reference/bruvo.msn.html","id":null,"dir":"Reference","previous_headings":"","what":"Create minimum spanning network of selected populations using Bruvo's \ndistance. ‚Äî bruvo.msn","title":"Create minimum spanning network of selected populations using Bruvo's \ndistance. ‚Äî bruvo.msn","text":"Create minimum spanning network selected populations using Bruvo's  distance.","code":""},{"path":"/reference/bruvo.msn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create minimum spanning network of selected populations using Bruvo's \ndistance. ‚Äî bruvo.msn","text":"","code":"bruvo.msn(   gid,   replen = 1,   add = TRUE,   loss = TRUE,   mlg.compute = \"original\",   palette = topo.colors,   sublist = \"All\",   exclude = NULL,   blacklist = NULL,   vertex.label = \"MLG\",   gscale = TRUE,   glim = c(0, 0.8),   gadj = 3,   gweight = 1,   wscale = TRUE,   showplot = TRUE,   include.ties = FALSE,   threshold = NULL,   clustering.algorithm = NULL,   ... )"},{"path":"/reference/bruvo.msn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create minimum spanning network of selected populations using Bruvo's \ndistance. ‚Äî bruvo.msn","text":"gid genind genclone object replen vector integers indicating length nucleotide repeats microsatellite locus. add TRUE, genotypes zero values treated  genome addition model presented Bruvo et al. 2004. loss TRUE, genotypes zero values treated  genome loss model presented Bruvo et al. 2004. mlg.compute multilocus genotypes set \"custom\" (see  mll.custom details) genclone object,  specify mlg level calculate nodes . See details. palette vector function defining color palette  used color populations graph. defaults  topo.colors. See examples details. sublist vector population names indexes user  wishes keep. Default \"\". exclude vector population names indexes user wishes discard. Default NULL. blacklist DEPRECATED, use exclude. vertex.label vector characters label vertex. two defaults: \"MLG\" label nodes multilocus  genotype original data set \"inds\" label nodes  representative individual names. gscale \"grey scale\". TRUE, scale color edges proportional observed distance, lines becoming darker related nodes. See greycurve details. glim \"grey limit\". Two numbers zero one. determine  upper lower limits gray function. Default  0 (black) 0.8 (20% black). See greycurve details. gadj \"grey adjust\". positive integer greater zero  serve exponent edge weight scale grey value  represent weight. See greycurve details. gweight \"grey weight\". integer. 1, grey scale  weighted emphasize differences closely related  nodes. 2, grey scale weighted emphasize  differences distantly related nodes. See  greycurve details. wscale \"width scale\". TRUE, edge widths  scaled proportional inverse observed distance ,  lines becoming thicker related nodes. showplot logical. TRUE, graph plotted.  FALSE, simply returned. include.ties logical. TRUE, graph include edges arbitrarily passed favor another edge equal weight. FALSE, default, one edge arbitrarily  selected two edges tied, resulting pure minimum spanning network. threshold numeric. default, NULL, effect. threshold value passed argument used mlg.filter prior creating MSN. data set contains contracted MLGs, argument override threshold data set. See Details. clustering.algorithm string. default, NULL. threshold = NULL, argument effect. supplied either \"farthest_neighbor\", \"average_neighbor\", \"nearest_neighbor\", passed mlg.filter prior creating MSN. data set contains contracted MLGs, argument override algorithm data set. See Details. ... arguments go plot.igraph","code":""},{"path":"/reference/bruvo.msn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create minimum spanning network of selected populations using Bruvo's \ndistance. ‚Äî bruvo.msn","text":"graph minimum spanning network nodes corresponding    MLGs within data set. Colors nodes represent population    membership. Width color edges represent distance. populations vector population names corresponding    vertex colors colors vector hexadecimal representations   colors used vertex colors","code":""},{"path":"/reference/bruvo.msn.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create minimum spanning network of selected populations using Bruvo's \ndistance. ‚Äî bruvo.msn","text":"minimum spanning network generated function generated   via igraph's minimum.spanning.tree. resultant   graph produced can plotted using igraph functions, entire object   can plotted using function plot_poppr_msn,   give user scale bar option layout data.","code":""},{"path":"/reference/bruvo.msn.html","id":"node-sizes","dir":"Reference","previous_headings":"","what":"node sizes","title":"Create minimum spanning network of selected populations using Bruvo's \ndistance. ‚Äî bruvo.msn","text":"area nodes representative number samples.   igraph scales nodes radius, node sizes graph    represented square root number samples.","code":""},{"path":"/reference/bruvo.msn.html","id":"mlg-compute","dir":"Reference","previous_headings":"","what":"mlg.compute","title":"Create minimum spanning network of selected populations using Bruvo's \ndistance. ‚Äî bruvo.msn","text":"node graph represents different multilocus genotype.    edges graph represent genetic distances connect   multilocus genotypes. genclone objects, possible set   multilocus genotypes custom definition. creates problem   clone correction, however, possible define custom lineages   monophyletic. clone correction performed   definitions, information lost graph. circumvent ,   clone correction done via computed multilocus genotypes, either   \"original\" \"contracted\". specified mlg.compute   argument, .","code":""},{"path":"/reference/bruvo.msn.html","id":"contracted-multilocus-genotypes","dir":"Reference","previous_headings":"","what":"contracted multilocus genotypes","title":"Create minimum spanning network of selected populations using Bruvo's \ndistance. ‚Äî bruvo.msn","text":"incoming data set class genclone,   contains contracted multilocus genotypes, function retain   information creating minimum spanning network. can use   arguments threshold clustering.algorithm change   threshold clustering algorithm used network. example,   data set threshold 0.1 wish minimum   spanning network without threshold, can simply add    threshold = 0.0, clustering happen. threshold clustering.algorithm arguments can also   used filter un-contracted data sets.","code":""},{"path":"/reference/bruvo.msn.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Create minimum spanning network of selected populations using Bruvo's \ndistance. ‚Äî bruvo.msn","text":"Please see documentation   bruvo.dist details algorithm. edges   graphs may cross graph becomes large.   nodes graph represent multilocus genotypes. colors nodes   representative population membership. uncommon see   different populations containing multilocus genotype.","code":""},{"path":"/reference/bruvo.msn.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Create minimum spanning network of selected populations using Bruvo's \ndistance. ‚Äî bruvo.msn","text":"Ruzica Bruvo, Nicolaas K. Michiels, Thomas G. D'Souza,    Hinrich Schulenburg. simple method calculation microsatellite    genotype distances irrespective ploidy level. Molecular Ecology,    13(7):2101-2106, 2004.","code":""},{"path":[]},{"path":"/reference/bruvo.msn.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create minimum spanning network of selected populations using Bruvo's \ndistance. ‚Äî bruvo.msn","text":"Zhian N. Kamvar, Javier F. Tabima","code":""},{"path":"/reference/bruvo.msn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create minimum spanning network of selected populations using Bruvo's \ndistance. ‚Äî bruvo.msn","text":"","code":"# Load the data set. data(nancycats)  # View populations 8 and 9 with default colors.  bruvo.msn(nancycats, replen = rep(2, 9), sublist=8:9, vertex.label=\"inds\",            vertex.label.cex=0.7, vertex.label.dist=0.4)  #> $graph #> IGRAPH f2fb469 UNW- 19 18 --  #> + attr: name (v/c), size (v/n), shape (v/c), pie (v/x), pie.color #> | (v/x), color (v/c), label (v/c), weight (e/n), color (e/c), width #> | (e/n) #> + edges from f2fb469 (vertex names): #>  [1] N43 --N93  N92 --N112 N94 --N98  N95 --N96  N95 --N97  N98 --N99  #>  [7] N98 --N100 N98 --N97  N98 --N111 N100--N108 N93 --N97  N104--N107 #> [13] N105--N109 N106--N107 N106--N109 N107--N108 N107--N112 N111--N113 #>  #> $populations #> [1] \"P08\" \"P09\" #>  #> $colors #>       P08       P09  #> \"#4C00FF\" \"#00E5FF\"  #>  # \\dontrun{ # View heat colors. bruvo.msn(nancycats, replen=rep(2, 9), sublist=8:9, vertex.label=\"inds\",  palette=heat.colors, vertex.label.cex=0.7, vertex.label.dist=0.4)  #> $graph #> IGRAPH ec77078 UNW- 19 18 --  #> + attr: name (v/c), size (v/n), shape (v/c), pie (v/x), pie.color #> | (v/x), color (v/c), label (v/c), weight (e/n), color (e/c), width #> | (e/n) #> + edges from ec77078 (vertex names): #>  [1] N43 --N93  N92 --N112 N94 --N98  N95 --N96  N95 --N97  N98 --N99  #>  [7] N98 --N100 N98 --N97  N98 --N111 N100--N108 N93 --N97  N104--N107 #> [13] N105--N109 N106--N107 N106--N109 N107--N108 N107--N112 N111--N113 #>  #> $populations #> [1] \"P08\" \"P09\" #>  #> $colors #>       P08       P09  #> \"#FF0000\" \"#FFFF00\"  #>   # View custom colors. Here, we use black and orange. bruvo.msn(nancycats, replen=rep(2, 9), sublist=8:9, vertex.label=\"inds\",  palette = colorRampPalette(c(\"orange\", \"black\")), vertex.label.cex=0.7,  vertex.label.dist=0.4)  #> $graph #> IGRAPH 1d305b5 UNW- 19 18 --  #> + attr: name (v/c), size (v/n), shape (v/c), pie (v/x), pie.color #> | (v/x), color (v/c), label (v/c), weight (e/n), color (e/c), width #> | (e/n) #> + edges from 1d305b5 (vertex names): #>  [1] N43 --N93  N92 --N112 N94 --N98  N95 --N96  N95 --N97  N98 --N99  #>  [7] N98 --N100 N98 --N97  N98 --N111 N100--N108 N93 --N97  N104--N107 #> [13] N105--N109 N106--N107 N106--N109 N107--N108 N107--N112 N111--N113 #>  #> $populations #> [1] \"P08\" \"P09\" #>  #> $colors #>       P08       P09  #> \"#FFA500\" \"#000000\"  #>   # View with darker shades of grey (setting the upper limit to 1/2 black 1/2 white). bruvo.msn(nancycats, replen=rep(2, 9), sublist=8:9, vertex.label=\"inds\",  palette = colorRampPalette(c(\"orange\", \"black\")), vertex.label.cex=0.7,  vertex.label.dist=0.4, glim=c(0, 0.5))  #> $graph #> IGRAPH acd7269 UNW- 19 18 --  #> + attr: name (v/c), size (v/n), shape (v/c), pie (v/x), pie.color #> | (v/x), color (v/c), label (v/c), weight (e/n), color (e/c), width #> | (e/n) #> + edges from acd7269 (vertex names): #>  [1] N43 --N93  N92 --N112 N94 --N98  N95 --N96  N95 --N97  N98 --N99  #>  [7] N98 --N100 N98 --N97  N98 --N111 N100--N108 N93 --N97  N104--N107 #> [13] N105--N109 N106--N107 N106--N109 N107--N108 N107--N112 N111--N113 #>  #> $populations #> [1] \"P08\" \"P09\" #>  #> $colors #>       P08       P09  #> \"#FFA500\" \"#000000\"  #>   # View with no grey scaling. bruvo.msn(nancycats, replen=rep(2, 9), sublist=8:9, vertex.label=\"inds\",  palette = colorRampPalette(c(\"orange\", \"black\")), vertex.label.cex=0.7,  vertex.label.dist=0.4, gscale=FALSE)  #> $graph #> IGRAPH e59725a UNW- 19 18 --  #> + attr: name (v/c), size (v/n), shape (v/c), pie (v/x), pie.color #> | (v/x), color (v/c), label (v/c), weight (e/n), color (e/c), width #> | (e/n) #> + edges from e59725a (vertex names): #>  [1] N43 --N93  N92 --N112 N94 --N98  N95 --N96  N95 --N97  N98 --N99  #>  [7] N98 --N100 N98 --N97  N98 --N111 N100--N108 N93 --N97  N104--N107 #> [13] N105--N109 N106--N107 N106--N109 N107--N108 N107--N112 N111--N113 #>  #> $populations #> [1] \"P08\" \"P09\" #>  #> $colors #>       P08       P09  #> \"#FFA500\" \"#000000\"  #>   # View with no line widths. bruvo.msn(nancycats, replen=rep(2, 9), sublist=8:9, vertex.label=\"inds\",  palette = colorRampPalette(c(\"orange\", \"black\")), vertex.label.cex=0.7,  vertex.label.dist=0.4, wscale=FALSE)  #> $graph #> IGRAPH e0b8dcd UNW- 19 18 --  #> + attr: name (v/c), size (v/n), shape (v/c), pie (v/x), pie.color #> | (v/x), color (v/c), label (v/c), weight (e/n), color (e/c), width #> | (e/n) #> + edges from e0b8dcd (vertex names): #>  [1] N43 --N93  N92 --N112 N94 --N98  N95 --N96  N95 --N97  N98 --N99  #>  [7] N98 --N100 N98 --N97  N98 --N111 N100--N108 N93 --N97  N104--N107 #> [13] N105--N109 N106--N107 N106--N109 N107--N108 N107--N112 N111--N113 #>  #> $populations #> [1] \"P08\" \"P09\" #>  #> $colors #>       P08       P09  #> \"#FFA500\" \"#000000\"  #>   # View with no scaling at all. bruvo.msn(nancycats, replen=rep(2, 9), sublist=8:9, vertex.label=\"inds\",  palette = colorRampPalette(c(\"orange\", \"black\")), vertex.label.cex=0.7,  vertex.label.dist=0.4, gscale=FALSE)  #> $graph #> IGRAPH 6a4b1d4 UNW- 19 18 --  #> + attr: name (v/c), size (v/n), shape (v/c), pie (v/x), pie.color #> | (v/x), color (v/c), label (v/c), weight (e/n), color (e/c), width #> | (e/n) #> + edges from 6a4b1d4 (vertex names): #>  [1] N43 --N93  N92 --N112 N94 --N98  N95 --N96  N95 --N97  N98 --N99  #>  [7] N98 --N100 N98 --N97  N98 --N111 N100--N108 N93 --N97  N104--N107 #> [13] N105--N109 N106--N107 N106--N109 N107--N108 N107--N112 N111--N113 #>  #> $populations #> [1] \"P08\" \"P09\" #>  #> $colors #>       P08       P09  #> \"#FFA500\" \"#000000\"  #>   # View the whole population, but without labels. bruvo.msn(nancycats, replen=rep(2, 9), vertex.label=NA)  #> $graph #> IGRAPH adc44fb UNW- 237 236 --  #> + attr: name (v/c), size (v/n), shape (v/c), pie (v/x), pie.color #> | (v/x), color (v/c), label (v/l), weight (e/n), color (e/c), width #> | (e/n) #> + edges from adc44fb (vertex names): #>  [1] N215--N216 N215--N113 N215--N130 N215--N246 N215--N296 N216--N83  #>  [7] N216--N165 N216--N182 N217--N223 N218--N293 N219--N221 N219--N79  #> [13] N219--N84  N219--N189 N219--N182 N219--N270 N220--N222 N220--N57  #> [19] N220--N67  N220--N171 N220--N254 N221--N87  N221--N123 N221--N230 #> [25] N222--N212 N223--N294 N224--N239 N7  --N148 N7  --N234 N141--N151 #> [31] N141--N159 N141--N138 N142--N154 N142--N162 N142--N295 N143--N192 #> + ... omitted several edges #>  #> $populations #>  [1] \"P01\" \"P02\" \"P03\" \"P04\" \"P05\" \"P06\" \"P07\" \"P08\" \"P09\" \"P10\" \"P11\" \"P12\" #> [13] \"P13\" \"P14\" \"P15\" \"P16\" \"P17\" #>  #> $colors #>       P01       P02       P03       P04       P05       P06       P07       P08  #> \"#4C00FF\" \"#1900FF\" \"#0019FF\" \"#004CFF\" \"#0080FF\" \"#00B2FF\" \"#00E5FF\" \"#00FF4D\"  #>       P09       P10       P11       P12       P13       P14       P15       P16  #> \"#00FF00\" \"#4DFF00\" \"#99FF00\" \"#E6FF00\" \"#FFFF00\" \"#FFEA2D\" \"#FFDE59\" \"#FFDB86\"  #>       P17  #> \"#FFE0B3\"  #>  # }"},{"path":"/reference/bruvomat-class.html","id":null,"dir":"Reference","previous_headings":"","what":"bruvomat object ‚Äî bruvomat-class","title":"bruvomat object ‚Äî bruvomat-class","text":"internal object used bruvo's distance.  intended user interaction.","code":""},{"path":"/reference/bruvomat-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"bruvomat object ‚Äî bruvomat-class","text":"mat matrix genotypes one allele per locus. Number rows equal (ploidy)*(number loci) replen repeat length microsatellite loci ploidy ploidy data set ind.names names individuals matrix rows.","code":""},{"path":"/reference/bruvomat-class.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"bruvomat object ‚Äî bruvomat-class","text":"Zhian N. Kamvar","code":""},{"path":"/reference/bruvomat-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Methods used for the bruvomat object. ‚Äî initialize,bruvomat-method","title":"Methods used for the bruvomat object. ‚Äî initialize,bruvomat-method","text":"designed user interaction.","code":""},{"path":"/reference/bruvomat-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Methods used for the bruvomat object. ‚Äî initialize,bruvomat-method","text":"","code":"# S4 method for bruvomat initialize(.Object, gen, replen)  # S4 method for bruvomat dim(x)  # S4 method for bruvomat,ANY,ANY,ANY [(x, i, j, ..., drop = FALSE)"},{"path":"/reference/bruvomat-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Methods used for the bruvomat object. ‚Äî initialize,bruvomat-method","text":".Object character, \"bruvomat\" gen \"genind\" object replen vector numbers indicating repeat length  microsatellite locus. x \"bruvomat\" object vector numerics indicating number individuals desired j vector numerics corresponding loci desired. ... unused. drop set FALSE","code":""},{"path":"/reference/bruvomat-methods.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Methods used for the bruvomat object. ‚Äî initialize,bruvomat-method","text":"Zhian N. Kamvar","code":""},{"path":"/reference/clonecorrect.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove potential bias caused by cloned genotypes in genind or genclone \nobject. ‚Äî clonecorrect","title":"Remove potential bias caused by cloned genotypes in genind or genclone \nobject. ‚Äî clonecorrect","text":"function removes duplicated multilocus genotypes specified  population strata.","code":""},{"path":"/reference/clonecorrect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove potential bias caused by cloned genotypes in genind or genclone \nobject. ‚Äî clonecorrect","text":"","code":"clonecorrect(pop, strata = 1, combine = FALSE, keep = 1)"},{"path":"/reference/clonecorrect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove potential bias caused by cloned genotypes in genind or genclone \nobject. ‚Äî clonecorrect","text":"pop genind, genclone, snpclone object strata hierarchical formula numeric vector. define columns data frame strata slot use. combine logical. set TRUE, strata combined create new population clone-corrected genind genclone object. keep integer. combine set FALSE,  can use flag choose levels population strata.  example: clone correction strata set \"Pop\", \"Subpop\",  \"Year\", want analyze populations respect year,  can set keep = c(1,3).","code":""},{"path":"/reference/clonecorrect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove potential bias caused by cloned genotypes in genind or genclone \nobject. ‚Äî clonecorrect","text":"clone corrected genclone,  snpclone, genind object.","code":""},{"path":"/reference/clonecorrect.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Remove potential bias caused by cloned genotypes in genind or genclone \nobject. ‚Äî clonecorrect","text":"function clone correct based stratification    provided. clone correct indiscriminately population structure, set    strata = NA.","code":""},{"path":"/reference/clonecorrect.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Remove potential bias caused by cloned genotypes in genind or genclone \nobject. ‚Äî clonecorrect","text":"Zhian N. Kamvar","code":""},{"path":"/reference/clonecorrect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove potential bias caused by cloned genotypes in genind or genclone \nobject. ‚Äî clonecorrect","text":"","code":"# LOAD A. euteiches data set data(Aeut)  # Redefine it as a genclone object Aeut <- as.genclone(Aeut) strata(Aeut) <- other(Aeut)$population_hierarchy[-1]  # Check the number of multilocus genotypes mlg(Aeut) #> ############################# #> # Number of Individuals:  187  #> # Number of MLG:  119  #> ############################# #> [1] 119 popNames(Aeut) #> [1] \"Athena\"     \"Mt. Vernon\"  # Clone correct at the population level. Aeut.pop <- clonecorrect(Aeut, strata =  ~Pop) mlg(Aeut.pop) #> ############################# #> # Number of Individuals:  120  #> # Number of MLG:  119  #> ############################# #> [1] 119 popNames(Aeut.pop) #> [1] \"Athena\"     \"Mt. Vernon\"  # \\dontrun{ # Clone correct at the subpopulation level with respect to population and # combine. Aeut.subpop <- clonecorrect(Aeut, strata = ~Pop/Subpop, combine=TRUE) mlg(Aeut.subpop) #> ############################# #> # Number of Individuals:  141  #> # Number of MLG:  119  #> ############################# #> [1] 119 popNames(Aeut.subpop) #>  [1] \"Athena_1\"     \"Athena_2\"     \"Athena_3\"     \"Athena_4\"     \"Athena_5\"     #>  [6] \"Athena_6\"     \"Athena_7\"     \"Athena_8\"     \"Athena_9\"     \"Athena_10\"    #> [11] \"Mt. Vernon_1\" \"Mt. Vernon_2\" \"Mt. Vernon_3\" \"Mt. Vernon_4\" \"Mt. Vernon_5\" #> [16] \"Mt. Vernon_6\" \"Mt. Vernon_7\" \"Mt. Vernon_8\"  # Do the same, but set to the population level. Aeut.subpop2 <- clonecorrect(Aeut, strata = ~Pop/Subpop, keep=1) mlg(Aeut.subpop2) #> ############################# #> # Number of Individuals:  141  #> # Number of MLG:  119  #> ############################# #> [1] 119 popNames(Aeut.subpop2) #> [1] \"Athena\"     \"Mt. Vernon\"  # LOAD H3N2 dataset data(H3N2)  strata(H3N2) <- other(H3N2)$x  # Extract only the individuals located in China country <- clonecorrect(H3N2, strata =  ~country)  # How many isolates did we have from China before clone correction? sum(strata(H3N2, ~country) == \"China\") # 155 #> [1] 155  # How many unique isolates from China after clone correction? sum(strata(country, ~country) == \"China\") # 79 #> [1] 79  # Something a little more complicated. (This could take a few minutes on # slower computers)  # setting the hierarchy to be Country > Year > Month   c.y.m <- clonecorrect(H3N2, strata =  ~year/month/country)  # How many isolates in the original data set? nInd(H3N2) # 1903 #> [1] 1903  # How many after we clone corrected for country, year, and month? nInd(c.y.m) # 1190 #> [1] 1190 # }"},{"path":"/reference/coercion-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Switch between genind and genclone objects. ‚Äî bootgen2genind","title":"Switch between genind and genclone objects. ‚Äî bootgen2genind","text":".genclone create genclone object genind object anything can passed genind initializer.","code":""},{"path":"/reference/coercion-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Switch between genind and genclone objects. ‚Äî bootgen2genind","text":"","code":"bootgen2genind(bg)  as.genclone(x, ..., mlg, mlgclass = TRUE)  genclone2genind(x)  as.genambig(x)"},{"path":"/reference/coercion-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Switch between genind and genclone objects. ‚Äî bootgen2genind","text":"bg bootgen object x genind genclone  object ... arguments passed genind constructor mlg optional vector multilocus genotypes integers mlgclass mlg slot class MLG?","code":""},{"path":"/reference/coercion-methods.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Switch between genind and genclone objects. ‚Äî bootgen2genind","text":"genclone2genind remove mlg slot genclone object, creating  genind object. .genambig convert genind genclone object polysat genambig  class.","code":""},{"path":[]},{"path":"/reference/coercion-methods.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Switch between genind and genclone objects. ‚Äî bootgen2genind","text":"Zhian N. Kamvar","code":""},{"path":"/reference/coercion-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Switch between genind and genclone objects. ‚Äî bootgen2genind","text":"","code":"data(Aeut) Aeut #> /// GENIND OBJECT ///////// #>  #>  // 187 individuals; 56 loci; 56 alleles; size: 68.9 Kb #>  #>  // Basic content #>    @tab:  187 x 56 matrix of allele counts #>    @loc.n.all: number of alleles per locus (range: 56-56) #>    @ploidy: ploidy of each individual  (range: 2-2) #>    @type:  PA #>    @call: old2new_genind(object = x, donor = new(class(x))) #>  #>  // Optional content #>    @pop: population of each individual (group size range: 90-97) #>    @other: a list containing: population_hierarchy  #>   # Conversion to genclone -------------------------------------------------- Aeut.gc <- as.genclone(Aeut) Aeut.gc #>  #> This is a genclone object #> ------------------------- #> Genotype information: #>  #>    119 original multilocus genotypes  #>    187 diploid individuals #>     56 dominant loci #>  #> Population information: #>  #>      0 strata.  #>      2 populations defined - Athena, Mt. Vernon  # Conversion to genind ---------------------------------------------------- Aeut.gi <- genclone2genind(Aeut.gc) Aeut.gi #> /// GENIND OBJECT ///////// #>  #>  // 187 individuals; 56 loci; 56 alleles; size: 68.2 Kb #>  #>  // Basic content #>    @tab:  187 x 56 matrix of allele counts #>    @loc.n.all: number of alleles per locus (range: 56-56) #>    @ploidy: ploidy of each individual  (range: 2-2) #>    @type:  PA #>    @call: genclone2genind(x = Aeut.gc) #>  #>  // Optional content #>    @pop: population of each individual (group size range: 90-97) #>    @other: a list containing: population_hierarchy  #>   # Conversion to polysat's \"genambig\" class -------------------------------- if (require(\"polysat\")) {   data(Pinf)   Pinf.gb <- as.genambig(Pinf)   summary(Pinf.gb) } #> Loading required package: polysat #> Dataset with allele copy number ambiguity. #> Insert dataset description here. #> Number of missing genotypes: 10 #> 86 samples, 11 loci. #> 2 populations. #> Ploidies: 2 3 NA #> Length(s) of microsatellite repeats: NA  data(nancycats)  # Conversion to bootgen for random sampling of loci ----------------------- nan.bg  <- new(\"bootgen\", nancycats[pop = 9]) nan.bg #> An object of class \"bootgen\" #> Slot \"type\": #> [1] \"codom\" #>  #> Slot \"ploidy\": #> [1] 2 2 2 2 2 2 2 2 2 #>  #> Slot \"names\": #> [1] \"N104\" \"N105\" \"N106\" \"N107\" \"N108\" \"N109\" \"N111\" \"N112\" \"N113\" #>  #> Slot \"alllist\": #> [[1]] #>  [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 #>  #> [[2]] #>  [1] 17 18 19 20 21 22 23 24 25 26 27 #>  #> [[3]] #>  [1] 28 29 30 31 32 33 34 35 36 37 #>  #> [[4]] #> [1] 38 39 40 41 42 43 44 45 46 #>  #> [[5]] #>  [1] 47 48 49 50 51 52 53 54 55 56 57 58 #>  #> [[6]] #> [1] 59 60 61 62 63 64 65 66 #>  #> [[7]] #>  [1] 67 68 69 70 71 72 73 74 75 76 77 78 #>  #> [[8]] #>  [1] 79 80 81 82 83 84 85 86 87 88 89 90 #>  #> [[9]] #>  [1]  91  92  93  94  95  96  97  98  99 100 101 102 103 104 105 106 107 108 #>  #>  #> Slot \"tab\": #>      fca8.117 fca8.119 fca8.121 fca8.123 fca8.127 fca8.129 fca8.131 fca8.133 #> N104        0        0      0.5      0.0        0        0        0        0 #> N105        0        0      0.0      0.0        0        0        0        0 #> N106        0        0      0.0      0.0        0        0        0        0 #> N107        0        0      0.5      0.0        0        0        0        0 #> N108        0        0      0.0      0.0        0        0        0        0 #> N109        0        0      0.0      0.0        0        0        0        0 #> N111        0        0      0.0      0.0        0        0        0        0 #> N112        0        0      0.5      0.0        0        0        0        0 #> N113        0        0      0.0      0.5        0        0        0        0 #>      fca8.135 fca8.137 fca8.139 fca8.141 fca8.143 fca8.145 fca8.147 fca8.149 #> N104      0.5      0.0        0        0        0        0        0        0 #> N105      0.0      1.0        0        0        0        0        0        0 #> N106      1.0      0.0        0        0        0        0        0        0 #> N107      0.5      0.0        0        0        0        0        0        0 #> N108      1.0      0.0        0        0        0        0        0        0 #> N109      0.0      1.0        0        0        0        0        0        0 #> N111      1.0      0.0        0        0        0        0        0        0 #> N112      0.0      0.5        0        0        0        0        0        0 #> N113      0.0      0.5        0        0        0        0        0        0 #>      fca23.128 fca23.130 fca23.132 fca23.136 fca23.138 fca23.140 fca23.142 #> N104         0         0       0.0       0.5       0.0       0.5       0.0 #> N105         0         0       0.0       0.5       0.0       0.5       0.0 #> N106         0         0       0.5       0.5       0.0       0.0       0.0 #> N107         0         0       0.5       0.5       0.0       0.0       0.0 #> N108         0         0       0.5       0.5       0.0       0.0       0.0 #> N109         0         0       0.0       0.5       0.0       0.5       0.0 #> N111         0         0       0.0       0.0       0.5       0.0       0.0 #> N112         0         0       0.5       0.5       0.0       0.0       0.0 #> N113         0         0       0.0       0.5       0.0       0.0       0.5 #>      fca23.144 fca23.146 fca23.148 fca23.150 fca43.133 fca43.135 fca43.137 #> N104         0       0.0         0         0         0         0         0 #> N105         0       0.0         0         0         0         0         0 #> N106         0       0.0         0         0         0         0         0 #> N107         0       0.0         0         0         0         0         0 #> N108         0       0.0         0         0         0         0         0 #> N109         0       0.0         0         0         0         0         0 #> N111         0       0.5         0         0         0         0         0 #> N112         0       0.0         0         0         0         0         0 #> N113         0       0.0         0         0         0         0         0 #>      fca43.139 fca43.141 fca43.143 fca43.145 fca43.147 fca43.149 fca43.157 #> N104       1.0       0.0         0       0.0         0         0         0 #> N105       0.0       0.0         0       1.0         0         0         0 #> N106       0.5       0.0         0       0.5         0         0         0 #> N107       0.5       0.0         0       0.5         0         0         0 #> N108       0.5       0.0         0       0.5         0         0         0 #> N109       0.5       0.0         0       0.5         0         0         0 #> N111       1.0       0.0         0       0.0         0         0         0 #> N112       0.0       0.5         0       0.5         0         0         0 #> N113       1.0       0.0         0       0.0         0         0         0 #>      fca45.116 fca45.118 fca45.120 fca45.122 fca45.126 fca45.128 fca45.130 #> N104       0.0       0.0       0.0       0.0       0.0       1.0       0.0 #> N105       0.0       0.0       0.5       0.0       0.5       0.0       0.0 #> N106       0.0       0.0       0.0       0.5       0.5       0.0       0.0 #> N107       0.0       0.0       0.0       0.5       0.0       0.5       0.0 #> N108       0.0       0.0       0.0       0.5       0.0       0.5       0.0 #> N109       0.0       0.0       0.5       0.0       0.5       0.0       0.0 #> N111       0.0       0.0       0.0       0.5       0.0       0.0       0.0 #> N112       0.0       0.0       0.0       0.5       0.0       0.0       0.5 #> N113       0.5       0.5       0.0       0.0       0.0       0.0       0.0 #>      fca45.132 fca45.134 fca77.132 fca77.142 fca77.144 fca77.146 fca77.148 #> N104       0.0         0         0         0       0.0         0         0 #> N105       0.0         0         0         0       0.0         0         0 #> N106       0.0         0         0         0       0.0         0         0 #> N107       0.0         0         0         0       0.0         0         0 #> N108       0.0         0         0         0       0.0         0         0 #> N109       0.0         0         0         0       0.5         0         0 #> N111       0.5         0         0         0       0.0         0         0 #> N112       0.0         0         0         0       0.0         0         0 #> N113       0.0         0         0         0       0.0         0         0 #>      fca77.150 fca77.152 fca77.154 fca77.156 fca77.158 fca77.160 fca77.162 #> N104       0.5         0       0.5       0.0       0.0         0         0 #> N105       1.0         0       0.0       0.0       0.0         0         0 #> N106       0.5         0       0.0       0.5       0.0         0         0 #> N107       0.5         0       0.5       0.0       0.0         0         0 #> N108       0.5         0       0.0       0.0       0.5         0         0 #> N109       0.5         0       0.0       0.0       0.0         0         0 #> N111       0.0         0       0.0       0.0       1.0         0         0 #> N112       1.0         0       0.0       0.0       0.0         0         0 #> N113       0.0         0       0.0       0.0       1.0         0         0 #>      fca78.138 fca78.140 fca78.142 fca78.144 fca78.146 fca78.148 fca78.150 #> N104         0         0       0.5         0         0       0.0       0.5 #> N105         0         0       0.5         0         0       0.0       0.5 #> N106         0         0       0.5         0         0       0.0       0.5 #> N107         0         0       0.5         0         0       0.0       0.5 #> N108         0         0       0.5         0         0       0.0       0.5 #> N109         0         0       0.5         0         0       0.0       0.5 #> N111         0         0       1.0         0         0       0.0       0.0 #> N112         0         0       0.5         0         0       0.0       0.5 #> N113         0         0       0.5         0         0       0.5       0.0 #>      fca78.152 fca90.181 fca90.185 fca90.187 fca90.189 fca90.191 fca90.193 #> N104         0         0       0.0       0.5         0         0       0.0 #> N105         0         0       0.0       0.0         0         0       0.0 #> N106         0         0       0.0       0.5         0         0       0.0 #> N107         0         0       0.0       0.5         0         0       0.0 #> N108         0         0       0.0       0.0         0         0       0.5 #> N109         0         0       0.0       0.5         0         0       0.0 #> N111         0         0       0.5       0.0         0         0       0.0 #> N112         0         0       0.0       0.0         0         0       0.5 #> N113         0         0       0.0       0.0         0         0       0.0 #>      fca90.195 fca90.197 fca90.199 fca90.201 fca90.203 fca90.205 fca96.091 #> N104         0         0       0.5       0.0         0         0       0.0 #> N105         0         0       1.0       0.0         0         0       0.0 #> N106         0         0       0.5       0.0         0         0       0.0 #> N107         0         0       0.5       0.0         0         0       0.0 #> N108         0         0       0.5       0.0         0         0       0.0 #> N109         0         0       0.5       0.0         0         0       0.0 #> N111         0         0       0.0       0.5         0         0       0.5 #> N112         0         0       0.5       0.0         0         0       0.0 #> N113         0         0       1.0       0.0         0         0       0.5 #>      fca96.101 fca96.103 fca96.105 fca96.107 fca96.109 fca96.111 fca96.113 #> N104       0.0       0.5         0         0         0         0       0.5 #> N105       0.5       0.5         0         0         0         0       0.0 #> N106       0.5       0.0         0         0         0         0       0.5 #> N107       0.0       0.5         0         0         0         0       0.5 #> N108       0.0       0.5         0         0         0         0       0.5 #> N109       0.0       0.5         0         0         0         0       0.0 #> N111       0.0       0.0         0         0         0         0       0.5 #> N112       0.0       1.0         0         0         0         0       0.0 #> N113       0.5       0.0         0         0         0         0       0.0 #>      fca96.115 fca96.117 fca96.119 fca96.121 fca37.182 fca37.184 fca37.186 #> N104       0.0         0         0         0       0.0         0         0 #> N105       0.0         0         0         0       1.0         0         0 #> N106       0.0         0         0         0       0.5         0         0 #> N107       0.0         0         0         0       0.5         0         0 #> N108       0.0         0         0         0       0.0         0         0 #> N109       0.5         0         0         0       0.5         0         0 #> N111       0.0         0         0         0       0.0         0         0 #> N112       0.0         0         0         0       0.5         0         0 #> N113       0.0         0         0         0       0.0         0         0 #>      fca37.192 fca37.194 fca37.200 fca37.202 fca37.204 fca37.206 fca37.208 #> N104         0         0         0         0         0       0.0       1.0 #> N105         0         0         0         0         0       0.0       0.0 #> N106         0         0         0         0         0       0.0       0.5 #> N107         0         0         0         0         0       0.0       0.5 #> N108         0         0         0         0         0       0.0       1.0 #> N109         0         0         0         0         0       0.0       0.5 #> N111         0         0         0         0         0       0.0       0.5 #> N112         0         0         0         0         0       0.5       0.0 #> N113         0         0         0         0         0       0.0       0.5 #>      fca37.210 fca37.212 fca37.214 fca37.216 fca37.218 fca37.220 fca37.224 #> N104         0         0       0.0         0         0         0         0 #> N105         0         0       0.0         0         0         0         0 #> N106         0         0       0.0         0         0         0         0 #> N107         0         0       0.0         0         0         0         0 #> N108         0         0       0.0         0         0         0         0 #> N109         0         0       0.0         0         0         0         0 #> N111         0         0       0.5         0         0         0         0 #> N112         0         0       0.0         0         0         0         0 #> N113         0         0       0.5         0         0         0         0 #>      fca37.226 #> N104         0 #> N105         0 #> N106         0 #> N107         0 #> N108         0 #> N109         0 #> N111         0 #> N112         0 #> N113         0 #>  #> Slot \"loc.fac\": #>   [1] fca8  fca8  fca8  fca8  fca8  fca8  fca8  fca8  fca8  fca8  fca8  fca8  #>  [13] fca8  fca8  fca8  fca8  fca23 fca23 fca23 fca23 fca23 fca23 fca23 fca23 #>  [25] fca23 fca23 fca23 fca43 fca43 fca43 fca43 fca43 fca43 fca43 fca43 fca43 #>  [37] fca43 fca45 fca45 fca45 fca45 fca45 fca45 fca45 fca45 fca45 fca77 fca77 #>  [49] fca77 fca77 fca77 fca77 fca77 fca77 fca77 fca77 fca77 fca77 fca78 fca78 #>  [61] fca78 fca78 fca78 fca78 fca78 fca78 fca90 fca90 fca90 fca90 fca90 fca90 #>  [73] fca90 fca90 fca90 fca90 fca90 fca90 fca96 fca96 fca96 fca96 fca96 fca96 #>  [85] fca96 fca96 fca96 fca96 fca96 fca96 fca37 fca37 fca37 fca37 fca37 fca37 #>  [97] fca37 fca37 fca37 fca37 fca37 fca37 fca37 fca37 fca37 fca37 fca37 fca37 #> Levels: fca8 fca23 fca43 fca45 fca77 fca78 fca90 fca96 fca37 #>  #> Slot \"loc.n.all\": #>  fca8 fca23 fca43 fca45 fca77 fca78 fca90 fca96 fca37  #>    16    11    10     9    12     8    12    12    18  #>  #> Slot \"all.names\": #> $fca8 #>  [1] \"117\" \"119\" \"121\" \"123\" \"127\" \"129\" \"131\" \"133\" \"135\" \"137\" \"139\" \"141\" #> [13] \"143\" \"145\" \"147\" \"149\" #>  #> $fca23 #>  [1] \"128\" \"130\" \"132\" \"136\" \"138\" \"140\" \"142\" \"144\" \"146\" \"148\" \"150\" #>  #> $fca43 #>  [1] \"133\" \"135\" \"137\" \"139\" \"141\" \"143\" \"145\" \"147\" \"149\" \"157\" #>  #> $fca45 #> [1] \"116\" \"118\" \"120\" \"122\" \"126\" \"128\" \"130\" \"132\" \"134\" #>  #> $fca77 #>  [1] \"132\" \"142\" \"144\" \"146\" \"148\" \"150\" \"152\" \"154\" \"156\" \"158\" \"160\" \"162\" #>  #> $fca78 #> [1] \"138\" \"140\" \"142\" \"144\" \"146\" \"148\" \"150\" \"152\" #>  #> $fca90 #>  [1] \"181\" \"185\" \"187\" \"189\" \"191\" \"193\" \"195\" \"197\" \"199\" \"201\" \"203\" \"205\" #>  #> $fca96 #>  [1] \"091\" \"101\" \"103\" \"105\" \"107\" \"109\" \"111\" \"113\" \"115\" \"117\" \"119\" \"121\" #>  #> $fca37 #>  [1] \"182\" \"184\" \"186\" \"192\" \"194\" \"200\" \"202\" \"204\" \"206\" \"208\" \"210\" \"212\" #> [13] \"214\" \"216\" \"218\" \"220\" \"224\" \"226\" #>  #>  #> Slot \"other\": #> NULL #>  #> Slot \"call\": #> NULL #>   # Conversion back to genind ----------------------------------------------- nan.gid <- bootgen2genind(nan.bg) nan.gid #> /// GENIND OBJECT ///////// #>  #>  // 9 individuals; 9 loci; 108 alleles; size: 25.7 Kb #>  #>  // Basic content #>    @tab:  9 x 108 matrix of allele counts #>    @loc.n.all: number of alleles per locus (range: 8-18) #>    @loc.fac: locus factor for the 108 columns of @tab #>    @all.names: list of allele names for each locus #>    @ploidy: ploidy of each individual  (range: 2-2) #>    @type:  codom #>    @call: .local(.Object = .Object, tab = ..1) #>  #>  // Optional content #>    - empty -"},{"path":"/reference/cutoff_predictor.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict cutoff thresholds for use with mlg.filter ‚Äî cutoff_predictor","title":"Predict cutoff thresholds for use with mlg.filter ‚Äî cutoff_predictor","text":"Given series thresholds data set collapse one giant  cluster, search top fraction threshold differences find  largest difference. average thresholds spanning  difference cutoff threshold defining clonal lineage threshold.","code":""},{"path":"/reference/cutoff_predictor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict cutoff thresholds for use with mlg.filter ‚Äî cutoff_predictor","text":"","code":"cutoff_predictor(thresholds, fraction = 0.5)"},{"path":"/reference/cutoff_predictor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict cutoff thresholds for use with mlg.filter ‚Äî cutoff_predictor","text":"thresholds vector numerics coming mlg.filter  threshold set maximum threshold theoretically possible. fraction fraction data seek threshold.","code":""},{"path":"/reference/cutoff_predictor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predict cutoff thresholds for use with mlg.filter ‚Äî cutoff_predictor","text":"numeric value representing threshold multilocus    lineages defined.","code":""},{"path":"/reference/cutoff_predictor.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Predict cutoff thresholds for use with mlg.filter ‚Äî cutoff_predictor","text":"function originally appeared    doi:10.5281/zenodo.17424 .    bit blunt instrument.","code":""},{"path":"/reference/cutoff_predictor.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Predict cutoff thresholds for use with mlg.filter ‚Äî cutoff_predictor","text":"ZN Kamvar, JC Brooks, NJ Gr√ºnwald. 2015. Supplementary Material Frontiers Plant Genetics Genomics 'Novel R tools analysis genome-wide population genetic data emphasis clonality'. DOI: doi:10.5281/zenodo.17424 Kamvar ZN, Brooks JC Gr√ºnwald NJ (2015) Novel R tools analysis  genome-wide population genetic data emphasis clonality. Front. Genet. 6:208. doi: doi:10.3389/fgene.2015.00208","code":""},{"path":[]},{"path":"/reference/cutoff_predictor.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Predict cutoff thresholds for use with mlg.filter ‚Äî cutoff_predictor","text":"Zhian N. Kamvar","code":""},{"path":"/reference/cutoff_predictor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Predict cutoff thresholds for use with mlg.filter ‚Äî cutoff_predictor","text":"","code":"data(Pinf) pinfreps <- fix_replen(Pinf, c(2, 2, 6, 2, 2, 2, 2, 2, 3, 3, 2)) pthresh  <- filter_stats(Pinf, distance = bruvo.dist, replen = pinfreps,                           plot = TRUE, stats = \"THRESHOLD\", threads = 1L)   # prediction for farthest neighbor cutoff_predictor(pthresh$farthest) #> [1] 0.1132221  # prediction for all algorithms sapply(pthresh, cutoff_predictor) #>  farthest   average   nearest  #> 0.1132221 0.1084407 0.1092773"},{"path":"/reference/diss.dist.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate a distance matrix based on relative dissimilarity ‚Äî diss.dist","title":"Calculate a distance matrix based on relative dissimilarity ‚Äî diss.dist","text":"diss.dist uses discrete dissimilarity matrix utilized index  association (see ia details). default, returns distance reflecting number allelic differences two individuals. percent = TRUE, returns ratio number observed differences number possible differences. Eg. two individuals share half alleles distance 0.5. function can analyze distances marker system.","code":""},{"path":"/reference/diss.dist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate a distance matrix based on relative dissimilarity ‚Äî diss.dist","text":"","code":"diss.dist(x, percent = FALSE, mat = FALSE)"},{"path":"/reference/diss.dist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate a distance matrix based on relative dissimilarity ‚Äî diss.dist","text":"x genind object. percent logical. distance represented  percent? set FALSE (default), distance reflected  number alleles differing individuals. set  TRUE, divided ploidy multiplied  number  loci. mat logical. Return matrix object. Default set  FALSE, returning dist object. TRUE returns matrix object.","code":""},{"path":"/reference/diss.dist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate a distance matrix based on relative dissimilarity ‚Äî diss.dist","text":"Pairwise distances individuals present genind object.","code":""},{"path":"/reference/diss.dist.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate a distance matrix based on relative dissimilarity ‚Äî diss.dist","text":"distance calculated quite simple goes many names,   depending application. familiar name might Hamming   distance, number differences two strings.","code":""},{"path":"/reference/diss.dist.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Calculate a distance matrix based on relative dissimilarity ‚Äî diss.dist","text":"percent = TRUE, exactly   provesti.dist, except performs better large   numbers individuals (n > 125) cost available memory.","code":""},{"path":[]},{"path":"/reference/diss.dist.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Calculate a distance matrix based on relative dissimilarity ‚Äî diss.dist","text":"Zhian N. Kamvar","code":""},{"path":"/reference/diss.dist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate a distance matrix based on relative dissimilarity ‚Äî diss.dist","text":"","code":"# A simple example. Let's analyze the mean distance among populations of A. # euteiches.  data(Aeut) mean(diss.dist(popsub(Aeut, 1))) #> [1] 9.503866 # \\dontrun{ mean(diss.dist(popsub(Aeut, 2))) #> [1] 8.848939 mean(diss.dist(Aeut)) #> [1] 20.44299 # }"},{"path":"/reference/diversity_boot.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform a bootstrap analysis on diversity statistics ‚Äî diversity_boot","title":"Perform a bootstrap analysis on diversity statistics ‚Äî diversity_boot","text":"function intended perform bootstrap statistics matrix multilocus genotype counts different populations. Results function interpreted carefully default statistics known downward bias. See details information.","code":""},{"path":"/reference/diversity_boot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform a bootstrap analysis on diversity statistics ‚Äî diversity_boot","text":"","code":"diversity_boot(   tab,   n,   n.boot = 1L,   n.rare = NULL,   H = TRUE,   G = TRUE,   lambda = TRUE,   E5 = TRUE,   ... )"},{"path":"/reference/diversity_boot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform a bootstrap analysis on diversity statistics ‚Äî diversity_boot","text":"tab table produced poppr function mlg.table(). MLGs columns populations rows n integer > 0 specifying number bootstrap replicates perform (corresponds R function boot::boot(). n.boot integer specifying number samples drawn bootstrap replicate. n.boot < 2 (default), number samples drawn bootstrap replicate equal number samples data set. n.rare sample size resamplings performed. larger smallest sample size. Defaults NULL, indicating population sampled size. H logical whether calculate Shannon's index G logical whether calculate Stoddart Taylor's index (aka inverse Simpson's index). lambda logical whether calculate Simpson's index E5 logical whether calculate Evenness ... parameters passed boot::boot() diversity_stats().","code":""},{"path":"/reference/diversity_boot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform a bootstrap analysis on diversity statistics ‚Äî diversity_boot","text":"list objects class \"boot\".","code":""},{"path":"/reference/diversity_boot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Perform a bootstrap analysis on diversity statistics ‚Äî diversity_boot","text":"Bootstrapping performed three ways: n.rare number greater zero, bootstrapping performed randomly sampling without replacement n.rare samples data.","code":"\\item if `n.boot` is greater than 1, bootstrapping is performed by sampling n.boot samples from a multinomial distribution weighted by the proportion of each MLG in the data.  \\item if `n.boot` is less than 2, bootstrapping is performed by  sampling N samples from a multinomial distribution weighted by the proportion of each MLG in the data."},{"path":"/reference/diversity_boot.html","id":"downward-bias","dir":"Reference","previous_headings":"","what":"Downward Bias","title":"Perform a bootstrap analysis on diversity statistics ‚Äî diversity_boot","text":"sampling replacement, diversity statistics present downward bias partially due small number samples data. result mean bootstrapped samples often much lower observed value. Alternatively, can increase sample size bootstrap increasing size n.boot. methods taken caution interpretation. several R packages freely available calculate perform bootstrap estimates Shannon Simpson diversity metrics (eg. entropart, entropy, simboot, EntropyEstimation. packages also offer unbiased estimators Shannon Simpson diversity. Please take care attempting interpret results function.","code":""},{"path":[]},{"path":"/reference/diversity_boot.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Perform a bootstrap analysis on diversity statistics ‚Äî diversity_boot","text":"Zhian N. Kamvar","code":""},{"path":"/reference/diversity_boot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform a bootstrap analysis on diversity statistics ‚Äî diversity_boot","text":"","code":"library(poppr) data(Pinf) tab <- mlg.table(Pinf, plot = FALSE) diversity_boot(tab, 10L) #> $`South America` #>  #> PARAMETRIC BOOTSTRAP #>  #>  #> Call: #> boot::boot(data = xi, statistic = boot_stats, R = n, sim = \"parametric\",  #>     ran.gen = rg, mle = mle, H = H, G = G, lambda = lambda, E5 = E5) #>  #>  #> Bootstrap Statistics : #>       original       bias    std. error #> t1*  3.2679442 -0.408150065 0.105434202 #> t2* 23.2903226 -7.827538789 1.622159350 #> t3*  0.9570637 -0.022437673 0.007467245 #> t4*  0.8825297 -0.007866368 0.040895129 #>  #> $`North America` #>  #> PARAMETRIC BOOTSTRAP #>  #>  #> Call: #> boot::boot(data = xi, statistic = boot_stats, R = n, sim = \"parametric\",  #>     ran.gen = rg, mle = mle, H = H, G = G, lambda = lambda, E5 = E5) #>  #>  #> Bootstrap Statistics : #>       original        bias    std. error #> t1*  3.6870132 -5.005028e-01  0.11329447 #> t2* 34.9090909 -1.351801e+01  2.93476936 #> t3*  0.9713542 -1.909722e-02  0.00816362 #> t4*  0.8711297 -4.199509e-04  0.04615188 #>  # \\dontrun{ # This can be done in a parallel fashion (OSX uses \"multicore\", Windows uses \"snow\") system.time(diversity_boot(tab, 10000L, parallel = \"multicore\", ncpus = 4L)) #>    user  system elapsed  #>   3.955   2.159   3.277  system.time(diversity_boot(tab, 10000L)) #>    user  system elapsed  #>   2.269   0.088   2.389  # }"},{"path":"/reference/diversity_ci.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform bootstrap statistics, calculate, and plot confidence intervals. ‚Äî diversity_ci","title":"Perform bootstrap statistics, calculate, and plot confidence intervals. ‚Äî diversity_ci","text":"function calculating bootstrap statistics confidence intervals. important note calculation confidence intervals perfect (See Details). Please cautious interpreting results.","code":""},{"path":"/reference/diversity_ci.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform bootstrap statistics, calculate, and plot confidence intervals. ‚Äî diversity_ci","text":"","code":"diversity_ci(   tab,   n = 1000,   n.boot = 1L,   ci = 95,   total = TRUE,   rarefy = FALSE,   n.rare = 10,   plot = TRUE,   raw = TRUE,   center = TRUE,   ... )"},{"path":"/reference/diversity_ci.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform bootstrap statistics, calculate, and plot confidence intervals. ‚Äî diversity_ci","text":"tab genind(), genclone(), snpclone(), matrix produced mlg.table(). n integer defining number bootstrap replicates (defaults 1000). n.boot integer specifying number samples drawn bootstrap replicate. n.boot < 2 (default), number samples drawn bootstrap replicate equal number samples data set. See Details. ci percent confidence interval. total argument passed mlg.table() tab genind object. rarefy TRUE, bootstrapping performed smallest population size value n.rare, whichever larger. Defaults FALSE, indicating bootstrapping performed respective population size. n.rare integer specifying smallest size resample data. used rarefy = TRUE. plot TRUE (default), boxplots produced population, grouped statistic. Colored dots indicate observed value.plot can retrieved using p <- last_plot() ggplot2 package. raw TRUE (default) list containing three elements returned center TRUE (default), confidence interval centered around observed statistic. Otherwise, FALSE, confidence interval bias-corrected normal CI reported boot::boot.ci() ... parameters passed boot::boot() diversity_stats()","code":""},{"path":[]},{"path":"/reference/diversity_ci.html","id":"raw-true","dir":"Reference","previous_headings":"","what":"raw = TRUE","title":"Perform bootstrap statistics, calculate, and plot confidence intervals. ‚Äî diversity_ci","text":"obs matrix observed statistics columns, populations rows est matrix estimated statistics columns, populations rows CI array 3 dimensions giving lower upper bound, index measured, population. boot list containing output boot::boot() population.","code":""},{"path":"/reference/diversity_ci.html","id":"raw-false","dir":"Reference","previous_headings":"","what":"raw = FALSE","title":"Perform bootstrap statistics, calculate, and plot confidence intervals. ‚Äî diversity_ci","text":"data frame statistic observations, estimates, confidence intervals columns, populations rows. Note confidence intervals converted characters rounded three decimal places.","code":""},{"path":[]},{"path":"/reference/diversity_ci.html","id":"bootstrapping","dir":"Reference","previous_headings":"","what":"Bootstrapping","title":"Perform bootstrap statistics, calculate, and plot confidence intervals. ‚Äî diversity_ci","text":"details bootstrapping procedures, see diversity_boot(). Default bootstrapping performed sampling N samples multinomial distribution weighted relative multilocus genotype abundance per population N equal number samples data set. n.boot > 2, n.boot samples taken bootstrap replicate. rarefy = TRUE, samples taken smallest population size without replacement. provide confidence intervals smallest population.","code":""},{"path":"/reference/diversity_ci.html","id":"confidence-intervals","dir":"Reference","previous_headings":"","what":"Confidence intervals","title":"Perform bootstrap statistics, calculate, and plot confidence intervals. ‚Äî diversity_ci","text":"Confidence intervals derived function boot::norm.ci(). function attempt correct bias observed value bootstrapped estimate. center = TRUE (default), confidence interval calculated bootstrapped distribution centered around bias-corrected estimate prescribed Marcon (2012). method can lead undesirable properties, confidence interval lying outside maximum possible value. rarefaction, confidence interval simply determined calculating percentiles bootstrapped distribution. want calculate confidence intervals, can use results permutations stored $boot element output.","code":""},{"path":"/reference/diversity_ci.html","id":"rarefaction","dir":"Reference","previous_headings":"","what":"Rarefaction","title":"Perform bootstrap statistics, calculate, and plot confidence intervals. ‚Äî diversity_ci","text":"Rarefaction sense function simply sampling subset data size n.rare. estimates derived method straightforward interpretations allow compare diversity across populations since controlling sample size.","code":""},{"path":"/reference/diversity_ci.html","id":"plotting","dir":"Reference","previous_headings":"","what":"Plotting","title":"Perform bootstrap statistics, calculate, and plot confidence intervals. ‚Äî diversity_ci","text":"Results plotted boxplots point estimates. rarefaction applied, confidence intervals displayed around point estimates. boxplots represent actual values bootstrapping often appear estimates confidence intervals.","code":""},{"path":[]},{"path":"/reference/diversity_ci.html","id":"confidence-interval-calculation","dir":"Reference","previous_headings":"","what":"Confidence interval calculation","title":"Perform bootstrap statistics, calculate, and plot confidence intervals. ‚Äî diversity_ci","text":"Almost statistics supplied maximum genotypes equally represented. means bootstrapping samples always downwardly biased. many cases, confidence intervals bootstrapped distribution fall outside observed statistic. reported confidence intervals reported assuming variance bootstrapped distribution variance around observed statistic. different statistics different properties, always one clear method calculating confidence intervals. suggestion correction Shannon's index center CI around observed statistic (Marcon, 2012), theoretical limitations . details, see https://stats.stackexchange.com/q/156235/49413.","code":""},{"path":"/reference/diversity_ci.html","id":"user-defined-functions","dir":"Reference","previous_headings":"","what":"User-defined functions","title":"Perform bootstrap statistics, calculate, and plot confidence intervals. ‚Äî diversity_ci","text":"possible use custom functions , three important things remember using functions:   Anonymous functions okay (e.g. function(x) vegan::rarefy(t(.matrix(x)), 10)).","code":"1. The function must return a single value.  2. The function must allow for both matrix and vector inputs  3. The function name cannot match or partially match any arguments  from [boot::boot()]"},{"path":"/reference/diversity_ci.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Perform bootstrap statistics, calculate, and plot confidence intervals. ‚Äî diversity_ci","text":"Marcon, E., Herault, B., Baraloto, C. Lang, G. (2012). Decomposition Shannon‚Äôs Entropy Confidence Interval Beta Diversity. Oikos 121(4): 516-522.","code":""},{"path":[]},{"path":"/reference/diversity_ci.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Perform bootstrap statistics, calculate, and plot confidence intervals. ‚Äî diversity_ci","text":"Zhian N. Kamvar","code":""},{"path":"/reference/diversity_ci.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform bootstrap statistics, calculate, and plot confidence intervals. ‚Äî diversity_ci","text":"","code":"library(poppr) data(Pinf) diversity_ci(Pinf, n = 100L) #>  #> Confidence Intervals have been centered around observed statistic. #> Please see ?diversity_ci for details.  #> $obs #>                Index #> Pop                    H        G    lambda       E.5 #>   South America 3.267944 23.29032 0.9570637 0.8825297 #>   North America 3.687013 34.90909 0.9713542 0.8711297 #>   Total         4.188215 57.78125 0.9826933 0.8748360 #>  #> $est #>                Index #> Pop                    H        G    lambda       E.5 #>   South America 2.810714 14.50911 0.9293629 0.8545902 #>   North America 3.197910 21.22096 0.9521007 0.8553062 #>   Total         3.723559 35.49926 0.9715603 0.8504923 #>  #> $CI #> , , Pop = South America #>  #>         Index #> CI              H        G    lambda       E.5 #>   2.5 %  3.015398 18.99547 0.9339777 0.7946645 #>   97.5 % 3.520490 27.58517 0.9801498 0.9703949 #>  #> , , Pop = North America #>  #>         Index #> CI              H        G    lambda       E.5 #>   2.5 %  3.508988 29.77002 0.9587624 0.7726727 #>   97.5 % 3.865038 40.04816 0.9839460 0.9695868 #>  #> , , Pop = Total #>  #>         Index #> CI              H        G    lambda       E.5 #>   2.5 %  4.053701 51.09567 0.9770752 0.7956329 #>   97.5 % 4.322728 64.46683 0.9883115 0.9540391 #>  #>  #> $boot #> $boot$`South America` #>  #> PARAMETRIC BOOTSTRAP #>  #>  #> Call: #> boot::boot(data = xi, statistic = boot_stats, R = n, sim = \"parametric\",  #>     ran.gen = rg, mle = mle, H = H, G = G, lambda = lambda, E5 = E5) #>  #>  #> Bootstrap Statistics : #>       original      bias    std. error #> t1*  3.2679442 -0.45723059  0.12885234 #> t2* 23.2903226 -8.78121073  2.19128951 #> t3*  0.9570637 -0.02770083  0.01177882 #> t4*  0.8825297 -0.02793955  0.04483001 #>  #> $boot$`North America` #>  #> PARAMETRIC BOOTSTRAP #>  #>  #> Call: #> boot::boot(data = xi, statistic = boot_stats, R = n, sim = \"parametric\",  #>     ran.gen = rg, mle = mle, H = H, G = G, lambda = lambda, E5 = E5) #>  #>  #> Bootstrap Statistics : #>       original       bias    std. error #> t1*  3.6870132  -0.48910283 0.090830659 #> t2* 34.9090909 -13.68813373 2.622024383 #> t3*  0.9713542  -0.01925347 0.006424512 #> t4*  0.8711297  -0.01582350 0.050234108 #>  #> $boot$Total #>  #> PARAMETRIC BOOTSTRAP #>  #>  #> Call: #> boot::boot(data = xi, statistic = boot_stats, R = n, sim = \"parametric\",  #>     ran.gen = rg, mle = mle, H = H, G = G, lambda = lambda, E5 = E5) #>  #>  #> Bootstrap Statistics : #>       original       bias    std. error #> t1*  4.1882146  -0.46465576 0.068630576 #> t2* 57.7812500 -22.28198749 3.411071183 #> t3*  0.9826933  -0.01113304 0.002866475 #> t4*  0.8748360  -0.02434370 0.040410486 #>  #>  # \\dontrun{ # With pretty results diversity_ci(Pinf, n = 100L, raw = FALSE) #>  #> Confidence Intervals have been centered around observed statistic. #> Please see ?diversity_ci for details.  #>                  H H.est           H.ci    G G.est             G.ci lambda #> South America 3.27  2.84 (3.065, 3.471) 23.3  14.8 (19.394, 27.186)  0.957 #> North America 3.69  3.18 (3.492, 3.882) 34.9  20.9  (29.778, 40.04)  0.971 #> Total         4.19  3.71 (4.024, 4.353) 57.8  35.0 (49.827, 65.736)  0.983 #>               lambda.est      lambda.ci   E.5 E.5.est         E.5.ci #> South America      0.931 (0.938, 0.976) 0.883   0.851 (0.787, 0.978) #> North America      0.951 (0.956, 0.986) 0.871   0.857 (0.781, 0.961) #> Total              0.971 (0.976, 0.989) 0.875   0.849 (0.794, 0.955)  # This can be done in a parallel fasion (OSX uses \"multicore\", Windows uses \"snow\") system.time(diversity_ci(Pinf, 10000L, parallel = \"multicore\", ncpus = 4L)) #>  #> Confidence Intervals have been centered around observed statistic. #> Please see ?diversity_ci for details.  #>    user  system elapsed  #>   6.641   2.500   3.933  system.time(diversity_ci(Pinf, 10000L)) #>  #> Confidence Intervals have been centered around observed statistic. #> Please see ?diversity_ci for details.  #>    user  system elapsed  #>   3.618   0.126   3.823   # We often get many requests for a clonal fraction statistic. As this is  # simply the number of observed MLGs over the number of samples, we  # recommended that people calculate it themselves. With this function, you # can add it in:  CF <- function(x){  x <- drop(as.matrix(x))  if (length(dim(x)) > 1){    res <- rowSums(x > 0)/rowSums(x)  } else {    res <- sum(x > 0)/sum(x)  }  return(res) } # Show pretty results  diversity_ci(Pinf, 1000L, CF = CF, center = TRUE, raw = FALSE) #>  #> Confidence Intervals have been centered around observed statistic. #> Please see ?diversity_ci for details.  #>                  H H.est           H.ci    G G.est             G.ci lambda #> South America 3.27  2.84 (3.043, 3.493) 23.3  15.0 (19.182, 27.399)  0.957 #> North America 3.69  3.18  (3.49, 3.884) 34.9  20.9  (29.449, 40.37)  0.971 #> Total         4.19  3.71 (4.039, 4.337) 57.8  35.2 (50.814, 64.748)  0.983 #>               lambda.est      lambda.ci   E.5 E.5.est         E.5.ci    CF #> South America      0.932 (0.937, 0.977) 0.883   0.856 (0.792, 0.973) 0.763 #> North America      0.951 (0.958, 0.985) 0.871   0.852 (0.777, 0.965) 0.896 #> Total              0.971 (0.977, 0.989) 0.875   0.850 (0.804, 0.945) 0.837 #>               CF.est          CF.ci #> South America  0.528 (0.665, 0.862) #> North America  0.583 (0.808, 0.984) #> Total          0.558 (0.771, 0.903) diversity_ci(Pinf, 1000L, CF = CF, rarefy = TRUE, raw = FALSE) #>  #> Samples for rarefaction: 38  #>                  H H.est           H.ci    G G.est             G.ci lambda #> South America 3.27  3.27           <NA> 23.3  23.3             <NA>  0.957 #> North America 3.69  3.48 (3.405, 3.565) 34.9  29.5 (25.786, 34.381)  0.971 #> Total         4.19  3.50 (3.355, 3.601) 57.8  31.5   (25.786, 36.1)  0.983 #>               lambda.est      lambda.ci   E.5 E.5.est         E.5.ci    CF #> South America      0.957           <NA> 0.883   0.883           <NA> 0.763 #> North America      0.966 (0.961, 0.971) 0.871   0.904 (0.851, 0.972) 0.896 #> Total              0.968 (0.961, 0.972) 0.875   0.944 (0.873, 0.985) 0.837 #>               CF.est          CF.ci #> South America  0.763           <NA> #> North America  0.906 (0.868, 0.947) #> Total          0.909 (0.816, 0.974) # }"},{"path":"/reference/diversity_stats.html","id":null,"dir":"Reference","previous_headings":"","what":"Produce a table of diversity statistics ‚Äî diversity_stats","title":"Produce a table of diversity statistics ‚Äî diversity_stats","text":"Calculate diversity statistics matrix containing counts multilocus genotypes per population.","code":""},{"path":"/reference/diversity_stats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Produce a table of diversity statistics ‚Äî diversity_stats","text":"","code":"diversity_stats(z, H = TRUE, G = TRUE, lambda = TRUE, E5 = TRUE, ...)"},{"path":"/reference/diversity_stats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Produce a table of diversity statistics ‚Äî diversity_stats","text":"z table integers representing counts MLGs (columns) per population (rows) H logical whether calculate Shannon's index G logical whether calculate Stoddart Taylor's index (aka inverse Simpson's index). lambda logical whether calculate Simpson's index E5 logical whether calculate Evenness ... functions can calculated vector matrix genotype counts.","code":""},{"path":"/reference/diversity_stats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Produce a table of diversity statistics ‚Äî diversity_stats","text":"numeric matrix giving statistics (columns) population (rows).","code":""},{"path":"/reference/diversity_stats.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Produce a table of diversity statistics ‚Äî diversity_stats","text":"function calculate diversity statistic counts multilocus genotypes per population. count allelic diversity. calculations H, G, lambda performed vegan::diversity(). E5 calculated $$E_{5} =    \\frac{(1/\\lambda) - 1}{e^{H} - 1}$$.","code":""},{"path":[]},{"path":"/reference/diversity_stats.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Produce a table of diversity statistics ‚Äî diversity_stats","text":"Zhian N. Kamvar","code":""},{"path":"/reference/diversity_stats.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Produce a table of diversity statistics ‚Äî diversity_stats","text":"","code":"library(poppr) data(Pinf) tab <- mlg.table(Pinf, plot = FALSE) diversity_stats(tab) #>                Index #> Pop                    H        G    lambda       E.5 #>   South America 3.267944 23.29032 0.9570637 0.8825297 #>   North America 3.687013 34.90909 0.9713542 0.8711297 # \\dontrun{ # Example using the poweRlaw package to calculate the negative slope of the # Pareto distribution.  library(\"poweRlaw\") power_law_beta <- function(x){   xpow <- displ(x[x > 0])                 # Generate the distribution   xpow$setPars(estimate_pars(xpow))       # Estimate the parameters   xdat <- plot(xpow, draw = FALSE)        # Extract the data   xlm <- lm(log(y) ~ log(x), data = xdat) # Run log-log linear model for slope   return(-coef(xlm)[2]) }  Beta <- function(x){   x <- drop(as.matrix(x))   if (length(dim(x)) > 1){     res <- apply(x, 1, power_law_beta)   } else {     res <- power_law_beta(x)   }   return(res) }  diversity_stats(tab, B = Beta) #>                Index #> Pop                    H        G    lambda       E.5        B #>   South America 3.267944 23.29032 0.9570637 0.8825297 2.087440 #>   North America 3.687013 34.90909 0.9713542 0.8711297 2.735194 # }"},{"path":"/reference/filter_stats.html","id":null,"dir":"Reference","previous_headings":"","what":"Utilize all algorithms of mlg.filter ‚Äî filter_stats","title":"Utilize all algorithms of mlg.filter ‚Äî filter_stats","text":"function wrapper mlg.filter. calculate stats  mlg.filter utilizing algorithms.","code":""},{"path":"/reference/filter_stats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Utilize all algorithms of mlg.filter ‚Äî filter_stats","text":"","code":"filter_stats(   x,   distance = bitwise.dist,   threshold = 1e+06 + .Machine$double.eps^0.5,   stats = \"All\",   missing = \"ignore\",   plot = FALSE,   cols = NULL,   nclone = NULL,   hist = \"Scott\",   threads = 1L,   ... )"},{"path":"/reference/filter_stats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Utilize all algorithms of mlg.filter ‚Äî filter_stats","text":"x genind, genclone, genlight, snpclone object distance distance function matrix threshold threshold passed mlg.filter  (Default: 1e6) stats statistics calculated. missing treat missing data mlg.filter plot threshold maximum threshold, statistics plotted (Figure 2) cols colors use algorithm (defaults set1  RColorBrewer). nclone number multilocus genotypes expect data.  draw horizontal line graph value nclone  vertical lines showing cutoff thresholds algorithm. hist want histogram plotted behind statistics,  select method . Available methods \"sturges\", \"fd\", \"scott\"  (default) documented hist. want  plot histogram, set hist = NULL. threads (unused) Previously number threads used. poppr version 2.4.1, default set 1. ... extra parameters passed distance function.","code":""},{"path":"/reference/filter_stats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Utilize all algorithms of mlg.filter ‚Äî filter_stats","text":"list results mlg.filter three   algorithms. (returns invisibly plot = TRUE)","code":""},{"path":"/reference/filter_stats.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Utilize all algorithms of mlg.filter ‚Äî filter_stats","text":"function originally appeared    doi:10.5281/zenodo.17424","code":""},{"path":"/reference/filter_stats.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Utilize all algorithms of mlg.filter ‚Äî filter_stats","text":"ZN Kamvar, JC Brooks, NJ Gr√ºnwald. 2015. Supplementary    Material Frontiers Plant Genetics Genomics 'Novel R tools    analysis genome-wide population genetic data emphasis   clonality'. DOI:   doi:10.5281/zenodo.17424 Kamvar ZN, Brooks JC Gr√ºnwald NJ (2015) Novel R tools analysis    genome-wide population genetic data emphasis clonality. Front.   Genet. 6:208. doi:    doi:10.3389/fgene.2015.00208","code":""},{"path":[]},{"path":"/reference/filter_stats.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Utilize all algorithms of mlg.filter ‚Äî filter_stats","text":"Zhian N. Kamvar, Jonah C. Brooks","code":""},{"path":"/reference/filter_stats.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Utilize all algorithms of mlg.filter ‚Äî filter_stats","text":"","code":"# Basic usage example: Bruvo's Distance -------------------------------- data(Pinf) pinfreps <- fix_replen(Pinf, c(2, 2, 6, 2, 2, 2, 2, 2, 3, 3, 2)) bres <- filter_stats(Pinf, distance = bruvo.dist, replen = pinfreps, plot = TRUE, threads = 1L)  print(bres) # shows all of the statistics #> $farthest #> $farthest$MLGS #>  [1] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 #> [39] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 #> [77] 1 1 1 1 1 1 1 1 1 1 #>  #> $farthest$THRESHOLDS #>  [1] 0.01262626 0.02189867 0.02272727 0.02272727 0.03535354 0.04166667 #>  [7] 0.04261364 0.04545454 0.04699337 0.04758520 0.05681818 0.05681818 #> [13] 0.05835701 0.06451231 0.06534091 0.06818182 0.07871686 0.07954545 #> [19] 0.08772748 0.08877841 0.09375000 0.09469697 0.09722222 0.10144413 #> [25] 0.12500000 0.13099747 0.13593750 0.13740234 0.14488636 0.15000000 #> [31] 0.15656566 0.16688366 0.18115234 0.19317072 0.21022726 0.21590909 #> [37] 0.21874983 0.22561553 0.23115234 0.23295450 0.23437499 0.23532197 #> [43] 0.24147723 0.25850032 0.27201702 0.27500000 0.28338066 0.29208984 #> [49] 0.30000000 0.30042336 0.30326990 0.30549961 0.30632250 0.31325684 #> [55] 0.33639034 0.33709162 0.34089797 0.35170815 0.35619658 0.36079233 #> [61] 0.36487924 0.39646464 0.40280346 0.40332030 0.42325106 0.43731965 #> [67] 0.45436164 0.47047212 0.50827603 0.51496688 0.57474140 #>  #> $farthest$DISTANCES #> [1] 0 #>  #> $farthest$SIZES #>   [1] 86  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 #>  [26]  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 #>  [51]  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 #>  [76]  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 #> [101]  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 #>  #>  #> $average #> $average$MLGS #>  [1] 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 #> [39] 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 #> [77] 5 5 5 5 5 5 5 5 5 5 #>  #> $average$THRESHOLDS #>  [1] 0.01262626 0.02189867 0.02272727 0.02272727 0.02588384 0.04166667 #>  [7] 0.04261364 0.04545454 0.04551373 0.04666785 0.04758520 0.05116596 #> [13] 0.05455269 0.05681818 0.05681818 0.06534091 0.06818182 0.07469704 #> [19] 0.07765152 0.07954545 0.08386600 0.08664773 0.09154040 0.09375000 #> [25] 0.09904513 0.11783635 0.12500000 0.13593750 0.13740234 0.14488636 #> [31] 0.15000000 0.16688366 0.16922082 0.18115234 0.18281241 0.18983100 #> [37] 0.19317072 0.20648526 0.21022726 0.21098306 0.21590909 0.22248151 #> [43] 0.22604322 0.23175203 0.23294795 0.23437497 0.23998000 0.25621032 #> [49] 0.25625000 0.25680394 0.26530388 0.27031250 0.27487891 0.28437722 #> [55] 0.28752245 0.28876394 0.28902416 0.28944244 0.30326990 0.30955902 #> [61] 0.32030666 0.32450982 0.32465378 0.32678465 0.33795507 0.34365982 #> [67] 0.35371480 0.35817752 0.36059225 0.38745409 0.41290311 #>  #> $average$DISTANCES #> [1] 0 #>  #> $average$SIZES #>   [1]  0  0  0  0 86  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 #>  [26]  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 #>  [51]  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 #>  [76]  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 #> [101]  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 #>  #>  #> $nearest #> $nearest$MLGS #>  [1] 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 #> [39] 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 #> [77] 4 4 4 4 4 4 4 4 4 4 #>  #> $nearest$THRESHOLDS #>  [1] 0.01262626 0.02189867 0.02272727 0.02272727 0.02272727 0.03409091 #>  [7] 0.03977273 0.04166667 0.04261364 0.04403409 0.04403409 0.04545454 #> [13] 0.04758520 0.05681818 0.05681818 0.05681818 0.06534091 0.06818182 #> [19] 0.06818182 0.06818182 0.07196970 0.07954545 0.08238636 0.08585859 #> [25] 0.08838384 0.09375000 0.12480469 0.12500000 0.13470642 0.13593750 #> [31] 0.13740234 0.14488636 0.14687500 0.15000000 0.15190972 0.15625000 #> [37] 0.15625000 0.15932617 0.16102431 0.16688366 0.16879735 0.17274306 #> [43] 0.17329545 0.17768012 0.18115234 0.18181817 0.18181818 0.18417969 #> [49] 0.18437500 0.18661804 0.19062500 0.19317072 0.19375000 0.20625000 #> [55] 0.21022726 0.21240234 0.21484375 0.21527778 0.21590284 0.21874717 #> [61] 0.22348731 0.22490234 0.22490234 0.24062500 0.24105025 0.24113755 #> [67] 0.24667968 0.24912939 0.25923295 0.27812500 0.28737792 #>  #> $nearest$DISTANCES #> [1] 0 #>  #> $nearest$SIZES #>   [1]  0  0  0 86  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 #>  [26]  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 #>  [51]  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 #>  [76]  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 #> [101]  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 #>  #>   # Use these results with cutoff_filter() print(thresh <- cutoff_predictor(bres$farthest$THRESHOLDS)) #> [1] 0.1132221 mlg.filter(Pinf, distance = bruvo.dist, replen = pinfreps) <- thresh Pinf  #>  #> This is a genclone object #> ------------------------- #> Genotype information: #>  #>    48 contracted multilocus genotypes #>       (0.113) [t], (bruvo.dist) [d], (farthest) [a]  #>    86 tetraploid individuals #>    11 codominant loci #>  #> Population information: #>  #>     2 strata - Continent, Country #>     2 populations defined - South America, North America  # Different distances will give different results ----------------------- nres <- filter_stats(Pinf, distance = nei.dist, plot = TRUE, threads = 1L, missing = \"mean\") #>  #>  Replaced 167 missing values. #> Warning: @tab does not contain integers; as of adegenet_2.0-0, numeric values are no longer used #> Warning: @tab does not contain integers; as of adegenet_2.0-0, numeric values are no longer used  print(thresh <- cutoff_predictor(nres$farthest$THRESHOLDS)) #> [1] 0.01949039 mlg.filter(Pinf, distance = nei.dist, missing = \"mean\") <- thresh Pinf  #>  #> This is a genclone object #> ------------------------- #> Genotype information: #>  #>    66 contracted multilocus genotypes #>       (0.019) [t], (nei.dist) [d], (farthest) [a]  #>    86 tetraploid individuals #>    11 codominant loci #>  #> Population information: #>  #>     2 strata - Continent, Country #>     2 populations defined - South America, North America"},{"path":"/reference/fix_replen.html","id":null,"dir":"Reference","previous_headings":"","what":"Find and fix inconsistent repeat lengths ‚Äî fix_replen","title":"Find and fix inconsistent repeat lengths ‚Äî fix_replen","text":"Attempts fix inconsistent repeat lengths found test_replen","code":""},{"path":"/reference/fix_replen.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find and fix inconsistent repeat lengths ‚Äî fix_replen","text":"","code":"fix_replen(gid, replen, e = 1e-05, fix_some = TRUE)"},{"path":"/reference/fix_replen.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find and fix inconsistent repeat lengths ‚Äî fix_replen","text":"gid genind genclone object replen numeric vector repeat motif lengths. e number subtracted added inconsistent repeat lengths allow proper rounding. fix_some TRUE (default), inconsistent repeat  lengths fixed subtracting adding e, can  fixed . FALSE, original repeat lengths fixed.","code":""},{"path":"/reference/fix_replen.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find and fix inconsistent repeat lengths ‚Äî fix_replen","text":"numeric vector corrected repeat motif lengths.","code":""},{"path":"/reference/fix_replen.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Find and fix inconsistent repeat lengths ‚Äî fix_replen","text":"function modified version used    doi:10.5281/zenodo.13007 . fed   algorithm calculate Bruvo's distance, amplicon length divided   repeat unit length. amplified primer sequence attached   sequence repeat, division always result integer   resulting numbers rounded. rounding also protects   slight mis-calls alleles. know $$\\frac{(- e) - (B   - e)}{r}$$ equivalent $$\\frac{- B}{r}$$, know primer sequence alter relationships   alleles. Unfortunately nucleotide repeats powers   2, rounding R based IEC 60559 standard (see   round), means number ending 5 rounded   nearest even digit. function attempt alleviate   problem adding small amount repeat length division   result 0.5. fails, amount   subtracted. neither work, warning issued   user determine fault allele calls repeat   lengths.","code":""},{"path":"/reference/fix_replen.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Find and fix inconsistent repeat lengths ‚Äî fix_replen","text":"Zhian N. Kamvar, Meg M. Larsen, Alan M. Kanaskie, Everett M.    Hansen, & Niklaus J. Gr√ºnwald. Sudden_Oak_Death_in_Oregon_Forests: Spatial   temporal population dynamics sudden oak death epidemic Oregon   Forests. ZENODO, doi:10.5281/zenodo.13007 , 2014. Kamvar, Z. N., Larsen, M. M., Kanaskie, . M., Hansen, E. M., & Gr√ºnwald,   N. J. (2015). Spatial temporal analysis populations sudden   oak death pathogen Oregon forests. Phytopathology 105:982-989.   doi: doi:10.1094/PHYTO-12-14-0350-FI Ruzica Bruvo, Nicolaas K. Michiels, Thomas G. D'Souza, Hinrich    Schulenburg. simple method calculation microsatellite genotype   distances irrespective ploidy level. Molecular Ecology, 13(7):2101-2106,   2004.","code":""},{"path":[]},{"path":"/reference/fix_replen.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Find and fix inconsistent repeat lengths ‚Äî fix_replen","text":"Zhian N. Kamvar","code":""},{"path":"/reference/fix_replen.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find and fix inconsistent repeat lengths ‚Äî fix_replen","text":"","code":"data(Pram) (Pram_replen <- setNames(c(3, 2, 4, 4, 4), locNames(Pram))) #>  PrMS6A1  Pr9C3A1 PrMS39A1 PrMS45A1 PrMS43A1  #>        3        2        4        4        4  fix_replen(Pram, Pram_replen) #>  PrMS6A1  Pr9C3A1 PrMS39A1 PrMS45A1 PrMS43A1  #>  3.00000  2.00000  3.99999  4.00000  4.00000  # Let's start with an example of a tetranucleotide repeat motif and imagine # that there are twenty alleles all 1 step apart: (x <- 1:20L * 4L) #>  [1]  4  8 12 16 20 24 28 32 36 40 44 48 52 56 60 64 68 72 76 80 # These are the true lengths of the different alleles. Now, let's add the # primer sequence to them.  (PxP <- x + 21 + 21) #>  [1]  46  50  54  58  62  66  70  74  78  82  86  90  94  98 102 106 110 114 118 #> [20] 122 # Now we make sure that x / 4 is equal to 1:20, which we know each have # 1 difference. x/4 #>  [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 # Now, we divide the sequence with the primers by 4 and see what happens. (PxPc <- PxP/4) #>  [1] 11.5 12.5 13.5 14.5 15.5 16.5 17.5 18.5 19.5 20.5 21.5 22.5 23.5 24.5 25.5 #> [16] 26.5 27.5 28.5 29.5 30.5 (PxPcr <- round(PxPc)) #>  [1] 12 12 14 14 16 16 18 18 20 20 22 22 24 24 26 26 28 28 30 30 diff(PxPcr) # we expect all 1s #>  [1] 0 2 0 2 0 2 0 2 0 2 0 2 0 2 0 2 0 2 0  # Let's try that again by subtracting a tiny amount from 4 (PxPc <- PxP/(4 - 1e-5)) #>  [1] 11.50003 12.50003 13.50003 14.50004 15.50004 16.50004 17.50004 18.50005 #>  [9] 19.50005 20.50005 21.50005 22.50006 23.50006 24.50006 25.50006 26.50007 #> [17] 27.50007 28.50007 29.50007 30.50008 (PxPcr <- round(PxPc)) #>  [1] 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 diff(PxPcr) #>  [1] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"},{"path":"/reference/genclone-class.html","id":null,"dir":"Reference","previous_headings":"","what":"GENclone and SNPclone classes ‚Äî genclone-class","title":"GENclone and SNPclone classes ‚Äî genclone-class","text":"GENclone S4 class extends    genind object.SNPclone S4 class   extends genlight object.   attributes parent classes, contain   one extra slot store extra information multilocus genotypes.","code":""},{"path":"/reference/genclone-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"GENclone and SNPclone classes ‚Äî genclone-class","text":"genclone snpclone classes allow optimized    methods clone correction. Previously genind genlight objects,    multilocus genotypes retained data set subset    population. new mlg slot allows us assign    multilocus genotypes retain information matter subset    data set. new slot can either contain numeric values    multilocus genotypes can contain special internal    MLG class allows custom multilocus genotype    definitions filtering.","code":""},{"path":"/reference/genclone-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"GENclone and SNPclone classes ‚Äî genclone-class","text":"mlg vector representing multilocus genotypes data set  object class MLG.","code":""},{"path":"/reference/genclone-class.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"GENclone and SNPclone classes ‚Äî genclone-class","text":"calculating multilocus genotypes genclone objects, rank    function used, calculation multilocus genotypes snpclone   objects distance-based (via bitwise.dist    mlg.filter). means genclone objects sensitive   missing data, whereas snpclone objects insensitive.","code":""},{"path":"/reference/genclone-class.html","id":"extends","dir":"Reference","previous_headings":"","what":"Extends","title":"GENclone and SNPclone classes ‚Äî genclone-class","text":"genclone class extends class    \"genind\", directly.  snpclone class    extends class \"genlight\", directly.","code":""},{"path":[]},{"path":"/reference/genclone-class.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"GENclone and SNPclone classes ‚Äî genclone-class","text":"Zhian N. Kamvar","code":""},{"path":"/reference/genclone-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"GENclone and SNPclone classes ‚Äî genclone-class","text":"","code":"# \\dontrun{  # genclone objects can be created from genind objects # data(partial_clone) partial_clone #> /// GENIND OBJECT ///////// #>  #>  // 50 individuals; 10 loci; 35 alleles; size: 22.6 Kb #>  #>  // Basic content #>    @tab:  50 x 35 matrix of allele counts #>    @loc.n.all: number of alleles per locus (range: 3-5) #>    @loc.fac: locus factor for the 35 columns of @tab #>    @all.names: list of allele names for each locus #>    @ploidy: ploidy of each individual  (range: 2-2) #>    @type:  codom #>    @call: old2new_genind(object = x, donor = new(class(x))) #>  #>  // Optional content #>    @pop: population of each individual (group size range: 12-13) (pc <- as.genclone(partial_clone)) #>  #> This is a genclone object #> ------------------------- #> Genotype information: #>  #>    26 original multilocus genotypes  #>    50 diploid individuals #>    10 codominant loci #>  #> Population information: #>  #>     0 strata.  #>     4 populations defined - 1, 2, 3, 4  # snpclone objects can be created from genlight objects # set.seed(999) (gl <- glSim(100, 0, n.snp.struc = 1e3, ploidy = 2, parallel = FALSE)) #>  /// GENLIGHT OBJECT ///////// #>  #>  // 100 genotypes,  1,000 binary SNPs, size: 172 Kb #>  0 (0 %) missing data #>  #>  // Basic content #>    @gen: list of 100 SNPbin #>    @ploidy: ploidy of each individual  (range: 2-2) #>  #>  // Optional content #>    @pop: population of each individual (group size range: 50-50) #>    @other: a list containing: ancestral.pops  #>  (sc <- as.snpclone(rbind(gl, gl, parallel = FALSE), parallel = FALSE)) #>  ||| SNPCLONE OBJECT ||||||||| #>  #>  || 200 genotypes,  1,000 binary SNPs, size: 353.7 Kb #>  0 (0 %) missing data #>  #>  || Basic content #>    @gen: list of 200 SNPbin #>    @mlg: 100 original multilocus genotypes #>    @ploidy: ploidy of each individual  (range: 2-2) #>  #>  || Optional content #>    @pop: population of each individual (group size range: 100-100) #>    @other: a list containing: elements without names  #>  #> NULL #  # Use mlg.filter to create a distance threshold to define multilocus genotypes. mlg.filter(sc, threads = 1L) <- 0.25 sc # 82 mlgs #>  ||| SNPCLONE OBJECT ||||||||| #>  #>  || 200 genotypes,  1,000 binary SNPs, size: 353.7 Kb #>  0 (0 %) missing data #>  #>  || Basic content #>    @gen: list of 200 SNPbin #>    @mlg: 82 contracted multilocus genotypes #>          (0.25) [t], (bitwise.dist) [d], (farthest) [a] #>    @ploidy: ploidy of each individual  (range: 2-2) #>  #>  || Optional content #>    @pop: population of each individual (group size range: 100-100) #>    @other: a list containing: elements without names  #>  #> NULL  # }"},{"path":"/reference/genclone-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Methods used for the genclone object ‚Äî initialize,genclone-method","title":"Methods used for the genclone object ‚Äî initialize,genclone-method","text":"Default methods subsetting genclone objects.","code":""},{"path":"/reference/genclone-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Methods used for the genclone object ‚Äî initialize,genclone-method","text":"","code":"# S4 method for genclone initialize(.Object, ..., mlg, mlgclass = TRUE)  # S4 method for genclone,ANY,ANY,ANY [(x, i, j, ..., mlg.reset = FALSE, drop = FALSE)  # S4 method for genclone show(object)  # S4 method for genclone print(x, ..., fullnames = TRUE)"},{"path":"/reference/genclone-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Methods used for the genclone object ‚Äî initialize,genclone-method","text":".Object character, \"genclone\" ... passed genind object. mlg vector element assigns multilocus genotype  individual data set. mlgclass logical value specifying whether translate  mlg object MLG class object. x genclone object vector numerics indicating number individuals desired j vector numerics corresponding loci desired. mlg.reset logical. Defaults FALSE. TRUE, mlg vector reset drop set FALSE object genclone object fullnames logical. TRUE, full names populations printed. FALSE, first last three population names displayed.","code":""},{"path":"/reference/genclone-method.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Methods used for the genclone object ‚Äî initialize,genclone-method","text":"Zhian N. Kamvar","code":""},{"path":"/reference/genetic_distance.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Genetic Distance for a genind or genclone object. ‚Äî nei.dist","title":"Calculate Genetic Distance for a genind or genclone object. ‚Äî nei.dist","text":"functions modified function dist.genpop applicable distances individuals.","code":""},{"path":"/reference/genetic_distance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Genetic Distance for a genind or genclone object. ‚Äî nei.dist","text":"","code":"nei.dist(x, warning = TRUE)  edwards.dist(x)  rogers.dist(x)  reynolds.dist(x)  provesti.dist(x)  prevosti.dist"},{"path":"/reference/genetic_distance.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Calculate Genetic Distance for a genind or genclone object. ‚Äî nei.dist","text":"object class function length 1.","code":""},{"path":"/reference/genetic_distance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Genetic Distance for a genind or genclone object. ‚Äî nei.dist","text":"x genind, genclone, matrix object. warning TRUE, warning printed infinite  values detected replaced. FALSE, values  replaced without warning. See Details .","code":""},{"path":"/reference/genetic_distance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Genetic Distance for a genind or genclone object. ‚Äî nei.dist","text":"object class dist number observations    number individuals data.","code":""},{"path":"/reference/genetic_distance.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate Genetic Distance for a genind or genclone object. ‚Äî nei.dist","text":"important careful interpretation    distances originally intended calculation    -population distance. Nei's distance negative log 0:1,    means possible obtain distances infinity.    happens, infinite values corrected 10 * max(D) D   distance matrix without infinite values.","code":""},{"path":"/reference/genetic_distance.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Calculate Genetic Distance for a genind or genclone object. ‚Äî nei.dist","text":"Prevosti's distance identical diss.dist, except    diss.dist optimized larger number    individuals (n > 125) cost required memory.   prevosti.dist provesti.dist function,   provesti.dist spelling error exists backwards   compatibility. distances adapted adegenet function   dist.genpop work genind objects.","code":""},{"path":"/reference/genetic_distance.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculate Genetic Distance for a genind or genclone object. ‚Äî nei.dist","text":"Nei, M. (1972) Genetic distances populations. American Naturalist, 106, 283-292. Nei M. (1978) Estimation average heterozygosity genetic distance small number individuals. Genetics, 23, 341-369. Avise, J. C. (1994) Molecular markers, natural history evolution. Chapman & Hall, London. Edwards, .W.F. (1971) Distance populations basis gene frequencies. Biometrics, 27, 873-881. Cavalli-Sforza L.L. Edwards .W.F. (1967) Phylogenetic analysis: models estimation procedures. Evolution, 32, 550-570. Hartl, D.L. Clark, .G. (1989) Principles population genetics. Sinauer Associates, Sunderland, Massachussetts (p. 303). Reynolds, J. B., B. S. Weir, C. C. Cockerham. (1983) Estimation coancestry coefficient: basis short-term genetic distance. Genetics, 105, 767-779. Rogers, J.S. (1972) Measures genetic similarity genetic distances. Studies Genetics, Univ. Texas Publ., 7213, 145-153. Avise, J. C. (1994) Molecular markers, natural history evolution. Chapman & Hall, London. Prevosti . (1974) La distancia genetica entre poblaciones. Miscellanea Alcobe, 68, 109-118. Prevosti ., Ocana J. Alonso G. (1975) Distances populations Drosophila subobscura, based chromosome arrangements frequencies. Theoretical Applied Genetics, 45, 231-241. information dissimilarity indexes: Gower J. Legendre P. (1986) Metric Euclidean properties dissimilarity coefficients. Journal Classification, 3, 5-48 Legendre P. Legendre L. (1998) Numerical Ecology, Elsevier Science B.V. 20, pp274-288.","code":""},{"path":[]},{"path":"/reference/genetic_distance.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Calculate Genetic Distance for a genind or genclone object. ‚Äî nei.dist","text":"Zhian N. Kamvar (poppr adaptation) Thibaut Jombart (adegenet adaptation) Daniel Chessel (ade4)","code":""},{"path":"/reference/genetic_distance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Genetic Distance for a genind or genclone object. ‚Äî nei.dist","text":"","code":"data(nancycats) (nan9   <- popsub(nancycats, 9)) #> /// GENIND OBJECT ///////// #>  #>  // 9 individuals; 9 loci; 43 alleles; size: 16.8 Kb #>  #>  // Basic content #>    @tab:  9 x 43 matrix of allele counts #>    @loc.n.all: number of alleles per locus (range: 3-8) #>    @loc.fac: locus factor for the 43 columns of @tab #>    @all.names: list of allele names for each locus #>    @ploidy: ploidy of each individual  (range: 2-2) #>    @type:  codom #>    @call: popsub(gid = nancycats, sublist = 9) #>  #>  // Optional content #>    @pop: population of each individual (group size range: 9-9) #>    @other: a list containing: xy  #>  (neinan <- nei.dist(nan9)) #>           N104      N105      N106      N107      N108      N109      N111 #> N105 1.0579046                                                             #> N106 0.5219437 0.5990190                                                   #> N107 0.2009995 0.6263815 0.2350018                                         #> N108 0.3013348 0.9090384 0.2707986 0.2181184                               #> N109 0.6019864 0.2195294 0.5978370 0.5451567 0.7408023                     #> N111 0.8201799 2.6020033 0.7290191 0.8770096 0.5355122 1.5174765           #> N112 0.9373236 0.3784101 0.7408023 0.4257577 0.6061358 0.5584807 2.0759572 #> N113 0.8754687 1.0579046 1.0074515 1.0883026 0.8319630 0.8896685 0.6531258 #>           N112 #> N105           #> N106           #> N107           #> N108           #> N109           #> N111           #> N112           #> N113 1.5251102 (ednan  <- edwards.dist(nan9)) #>           N104      N105      N106      N107      N108      N109      N111 #> N105 0.7517229                                                             #> N106 0.6127062 0.6387116                                                   #> N107 0.3913906 0.6808143 0.4463299                                         #> N108 0.5140990 0.7362578 0.5047434 0.4197600                               #> N109 0.6312058 0.4309644 0.6236096 0.6236096 0.6906433                     #> N111 0.7730660 0.9599128 0.7517229 0.7730660 0.6808143 0.8873047           #> N112 0.7517229 0.5739208 0.6906433 0.5855469 0.6312058 0.6564788 0.9305251 #> N113 0.7878089 0.8022810 0.7878089 0.8223129 0.7580364 0.7730660 0.7297559 #>           N112 #> N105           #> N106           #> N107           #> N108           #> N109           #> N111           #> N112           #> N113 0.8687726 (rodnan <- rogers.dist(nan9)) #>           N104      N105      N106      N107      N108      N109      N111 #> N105 0.5813390                                                             #> N106 0.4295584 0.5000000                                                   #> N107 0.2222222 0.5081258 0.2222222                                         #> N108 0.3333333 0.5785674 0.2777778 0.2222222                               #> N109 0.4146723 0.2777778 0.3563452 0.3414591 0.4674563                     #> N111 0.5718072 0.8170412 0.5311377 0.5866932 0.4904682 0.6882725           #> N112 0.5664529 0.4119008 0.4702279 0.3888889 0.4146723 0.4674563 0.7465996 #> N113 0.5718072 0.6192369 0.6043508 0.6097051 0.5866932 0.5866932 0.4606960 #>           N112 #> N105           #> N106           #> N107           #> N108           #> N109           #> N111           #> N112           #> N113 0.6829183 (reynan <- reynolds.dist(nan9)) #>           N104      N105      N106      N107      N108      N109      N111 #> N105 0.7934920                                                             #> N106 0.6255432 0.6915641                                                   #> N107 0.4588315 0.6770032 0.4364358                                         #> N108 0.5619515 0.7595545 0.5000000 0.4472136                               #> N109 0.6454972 0.5423261 0.6000000 0.5656854 0.6504436                     #> N111 0.7483315 0.8574929 0.6928203 0.6938887 0.6741999 0.7620008           #> N112 0.7200823 0.6488857 0.6504436 0.5516773 0.6454972 0.6123724 0.7977240 #> N113 0.7337994 0.7934920 0.7071068 0.6948083 0.7071068 0.6938887 0.7223151 #>           N112 #> N105           #> N106           #> N107           #> N108           #> N109           #> N111           #> N112           #> N113 0.7620008 (pronan <- prevosti.dist(nan9)) #>           N104      N105      N106      N107      N108      N109      N111 #> N105 0.6111111                                                             #> N106 0.4444444 0.5000000                                                   #> N107 0.2222222 0.5555556 0.2222222                                         #> N108 0.3333333 0.6111111 0.2777778 0.2222222                               #> N109 0.4444444 0.2777778 0.3888889 0.3888889 0.5000000                     #> N111 0.6666667 0.9444444 0.6111111 0.6666667 0.5555556 0.8333333           #> N112 0.6111111 0.4444444 0.5000000 0.3888889 0.4444444 0.5000000 0.8888889 #> N113 0.6666667 0.6666667 0.6666667 0.7222222 0.6666667 0.6666667 0.5555556 #>           N112 #> N105           #> N106           #> N107           #> N108           #> N109           #> N111           #> N112           #> N113 0.7777778"},{"path":"/reference/genind2genalex.html","id":null,"dir":"Reference","previous_headings":"","what":"Export data from genind objects to genalex formatted \\*.csv files. ‚Äî genind2genalex","title":"Export data from genind objects to genalex formatted \\*.csv files. ‚Äî genind2genalex","text":"genind2genalex export genclone genind object \\*.csv file formatted use genalex.","code":""},{"path":"/reference/genind2genalex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Export data from genind objects to genalex formatted \\*.csv files. ‚Äî genind2genalex","text":"","code":"genind2genalex(   gid,   filename = \"\",   overwrite = FALSE,   quiet = FALSE,   pop = NULL,   allstrata = TRUE,   geo = FALSE,   geodf = \"xy\",   sep = \",\",   sequence = FALSE )"},{"path":"/reference/genind2genalex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Export data from genind objects to genalex formatted \\*.csv files. ‚Äî genind2genalex","text":"gid genclone genind object. filename string indicating name /path file wish create. left unchanged, results saved temporary file warning displayed six seconds file written. process give time cancel process choose file path. Otherwise, name file returned, can copy file choice file.copy() overwrite logical FALSE (default) filename exists, file overwritten. Set option TRUE overwrite file. quiet logical FALSE message printed screen. pop character vector formula specifying population factor. can used specify specific subset strata custom population factor output. Note allstrata command precedence unless value new population factor. allstrata TRUE, strata combined single population factor genalex file. geo logical Default FALSE. set TRUE, resulting file two columns geographic data. geodf character Since slot adegenet object can contain many different items, must specify name data frame slot containing geographic coordinates. defaults \"xy\". sep character specifying character use separate columns. Defaults \",\". sequence TRUE, sequence data converted integers per GenAlEx specifications.","code":""},{"path":"/reference/genind2genalex.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Export data from genind objects to genalex formatted \\*.csv files. ‚Äî genind2genalex","text":"file path connection data written.","code":""},{"path":"/reference/genind2genalex.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Export data from genind objects to genalex formatted \\*.csv files. ‚Äî genind2genalex","text":"data set lacks population structure, coded new file single population labeled \"Pop\". Likewise, labels individuals, labeled \"ind1\" \"indN\", N size population.","code":""},{"path":[]},{"path":"/reference/genind2genalex.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Export data from genind objects to genalex formatted \\*.csv files. ‚Äî genind2genalex","text":"Zhian N. Kamvar","code":""},{"path":"/reference/genind2genalex.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Export data from genind objects to genalex formatted \\*.csv files. ‚Äî genind2genalex","text":"","code":"# \\dontrun{ data(nancycats) genind2genalex(nancycats, \"~/Documents/nancycats.csv\", geo=TRUE) #> Extracting the table ... Writing the table to ~/Documents/nancycats.csv ... Done. #> [1] \"~/Documents/nancycats.csv\" # }"},{"path":"/reference/genotype_curve.html","id":null,"dir":"Reference","previous_headings":"","what":"Produce a genotype accumulation curve ‚Äî genotype_curve","title":"Produce a genotype accumulation curve ‚Äî genotype_curve","text":"Genotype accumulation curves useful determining minimum number loci necessary discriminate individuals population.  function randomly sample loci without replacement count number  multilocus genotypes observed.","code":""},{"path":"/reference/genotype_curve.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Produce a genotype accumulation curve ‚Äî genotype_curve","text":"","code":"genotype_curve(   gen,   sample = 100,   maxloci = 0L,   quiet = FALSE,   thresh = 1,   plot = TRUE,   drop = TRUE,   dropna = TRUE )"},{"path":"/reference/genotype_curve.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Produce a genotype accumulation curve ‚Äî genotype_curve","text":"gen genclone, genind, loci object. sample integer defining number times loci  resampled without replacement. maxloci maximum number loci sample. default,  maxloci = 0, indicates n - 1 loci used. Note  always take min(n - 1, maxloci) quiet FALSE (default), Progress iterations  displayed. TRUE, nothing printed screen function  runs. thresh number 0 1. draw line fraction multilocus genotypes, rounded. Defaults 1, draw line maximum number observable genotypes. plot TRUE (default), genotype curve plotted via  ggplot2. FALSE, resulting matrix visibly returned. drop TRUE (default), monomorphic loci removed analysis loci affect shape curve. dropna TRUE (default) drop = TRUE, NAs ignored determining locus monomorphic. FALSE, presence NAs result locus retained. argument effect drop = FALSE","code":""},{"path":"/reference/genotype_curve.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Produce a genotype accumulation curve ‚Äî genotype_curve","text":"(invisibly deafuls) matrix integers showing results   randomization. Columns represent number loci sampled rows    represent independent sample.","code":""},{"path":"/reference/genotype_curve.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Produce a genotype accumulation curve ‚Äî genotype_curve","text":"Internally, function works converting data    loci object, represents genotypes data    frame factors. Random samples taken 1 n-1 columns    matrix number unique rows counted determine number   multilocus genotypes random sample. function take    account definitions MLGs via mlg.filter    mll.custom.","code":""},{"path":"/reference/genotype_curve.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Produce a genotype accumulation curve ‚Äî genotype_curve","text":"Zhian N. Kamvar","code":""},{"path":"/reference/genotype_curve.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Produce a genotype accumulation curve ‚Äî genotype_curve","text":"","code":"data(nancycats) nan_geno <- genotype_curve(nancycats)  # \\dontrun{  # Marker Type Comparison -------------------------------------------------- # With AFLP data, it is often necessary to include more markers for resolution data(Aeut) Ageno <- genotype_curve(Aeut)   # Many microsatellite data sets have hypervariable markers data(microbov) mgeno <- geotype_curve(microbov) #> Error in geotype_curve(microbov): could not find function \"geotype_curve\"  # Adding a trendline ------------------------------------------------------  # Trendlines: you can add a smoothed trendline with geom_smooth() library(\"ggplot2\") p <- last_plot() p + geom_smooth() #> `geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'   # Producing Figures for Publication ---------------------------------------  # This data set has been pre filtered data(monpop) mongeno <- genotype_curve(monpop)   # Here, we add a curve and a title for publication p <- last_plot() mytitle <- expression(paste(\"Genotype Accumulation Curve for \",                              italic(\"M. fructicola\"))) p + geom_smooth() +    theme_bw() +    theme(text = element_text(size = 12, family = \"serif\")) +   theme(title = element_text(size = 14)) +   ggtitle(mytitle) #> `geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'  # }"},{"path":"/reference/getfile.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a file name and path and store them in a list. ‚Äî getfile","title":"Get a file name and path and store them in a list. ‚Äî getfile","text":"getfile convenience function serves wrapper functions file.choose(), file.path(), list.files(). user working GUI environment, window pop , allowing user choose specified file regardless path.","code":""},{"path":"/reference/getfile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a file name and path and store them in a list. ‚Äî getfile","text":"","code":"getfile(multi = FALSE, pattern = NULL, combine = TRUE)"},{"path":"/reference/getfile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a file name and path and store them in a list. ‚Äî getfile","text":"multi indicator allow user store names multiple files found directory. useful conjunction poppr.(). pattern regex() pattern use multi == TRUE. grab files matching pattern. combine logical. set TRUE (default), $files vector path appended . set FALSE, basename.","code":""},{"path":"/reference/getfile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a file name and path and store them in a list. ‚Äî getfile","text":"path character string absolute path chosen file files files character vector containing chosen file name names.","code":""},{"path":"/reference/getfile.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get a file name and path and store them in a list. ‚Äî getfile","text":"Zhian N. Kamvar","code":""},{"path":"/reference/getfile.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a file name and path and store them in a list. ‚Äî getfile","text":"","code":"# \\dontrun{  x <- getfile() #> Error in file.choose(): file choice cancelled poppr(x$files) #> Error in eval(expr, envir, enclos): object 'x' not found  y <- getfile(multi=TRUE, pattern=\"^.+?dat$\")  #> Error in file.choose(): file choice cancelled #useful for reading in multiple FSTAT formatted files.  yfiles <- poppr.all(y$files) #> Error in eval(expr, envir, enclos): object 'y' not found  # }"},{"path":"/reference/grapes-greater-than-grapes.html","id":null,"dir":"Reference","previous_headings":"","what":"magrittr forward-pipe operator ‚Äî %>%","title":"magrittr forward-pipe operator ‚Äî %>%","text":"magrittr forward-pipe operator","code":""},{"path":"/reference/greycurve.html","id":null,"dir":"Reference","previous_headings":"","what":"Display a greyscale gradient adjusted to specific parameters ‚Äî greycurve","title":"Display a greyscale gradient adjusted to specific parameters ‚Äî greycurve","text":"function one purpose. deciding appropriate scaling grey palette used edge weights minimum spanning network.","code":""},{"path":"/reference/greycurve.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Display a greyscale gradient adjusted to specific parameters ‚Äî greycurve","text":"","code":"greycurve(   data = seq(0, 1, length = 1000),   glim = c(0, 0.8),   gadj = 3,   gweight = 1,   scalebar = FALSE )"},{"path":"/reference/greycurve.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Display a greyscale gradient adjusted to specific parameters ‚Äî greycurve","text":"data sequence numbers converted greyscale. glim \"grey limit\". Two numbers zero one. determine  upper lower limits gray function. Default 0 (black) 0.8 (20% black). gadj \"grey adjust\". positive integer greater zero serve exponent edge weight scale grey value represent weight. gweight \"grey weight\". integer. 1, grey scale weighted emphasize differences closely related nodes. 2, grey scale weighted emphasize differences distantly related nodes. scalebar set TRUE, two scalebars plotted. purpose adding scale bar minimum spanning networks produced earlier versions poppr.","code":""},{"path":"/reference/greycurve.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Display a greyscale gradient adjusted to specific parameters ‚Äî greycurve","text":"plot displaying grey gradient 0.001 1 minimum  maximum values displayed yellow lines, equation correction  displayed red.","code":""},{"path":"/reference/greycurve.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Display a greyscale gradient adjusted to specific parameters ‚Äî greycurve","text":"Zhian N. Kamvar","code":""},{"path":"/reference/greycurve.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Display a greyscale gradient adjusted to specific parameters ‚Äî greycurve","text":"","code":"# Normal grey curve with an adjustment of 3, an upper limit of 0.8, and # weighted towards smaller values. greycurve()  # \\dontrun{ # 1:1 relationship grey curve. greycurve(gadj=1, glim=1:0)   # Grey curve weighted towards larger values. greycurve(gweight=2)   # Same as the first, but the limit is 1. greycurve(glim=1:0)   # Setting the lower limit to 0.1 and weighting towards larger values. greycurve(glim=c(0.1,0.8), gweight=2)  # }"},{"path":"/reference/ia.html","id":null,"dir":"Reference","previous_headings":"","what":"Index of Association ‚Äî ia","title":"Index of Association ‚Äî ia","text":"Calculate Index Association Standardized Index Association.","code":""},{"path":"/reference/ia.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Index of Association ‚Äî ia","text":"","code":"ia(   gid,   sample = 0,   method = 1,   quiet = FALSE,   missing = \"ignore\",   plot = TRUE,   hist = TRUE,   index = \"rbarD\",   valuereturn = FALSE )  pair.ia(   gid,   sample = 0L,   quiet = FALSE,   plot = TRUE,   low = \"blue\",   high = \"red\",   limits = NULL,   index = \"rbarD\",   method = 1L )  resample.ia(gid, n = NULL, reps = 999, quiet = FALSE, use_psex = FALSE, ...)  jack.ia(gid, n = NULL, reps = 999, quiet = FALSE)"},{"path":"/reference/ia.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Index of Association ‚Äî ia","text":"gid adegenet::genind() genclone() object. sample integer indicating number permutations desired (eg 999). method integer 1 4 indicating sampling method desired. see shufflepop() details. quiet function print anything screen performing calculations? TRUE prints nothing. FALSE (default) print population name progress bar. missing character string. see missingno() details. plot TRUE (default), heatmap values per locus pair plotted (pair.ia()). sampling > 0, different things happen ia() pair.ia(). ia(), histogram data set plotted. pair.ia(), p-values added text heatmap. hist logical Deprecated. Use plot. index character either \"Ia\" \"rbarD\". hist = TRUE, indicates index want represented plot (default: \"rbarD\"). valuereturn logical TRUE, index values reshuffled data returned. FALSE (default), index returned associated p-values 4 element numeric vector. low (pair.ia) color use low values `plot = TRUE` high (pair.ia) color use low values `plot = TRUE` limits (pair.ia) limits used color scale.  Defaults `NULL`. want use custom range, supply two numbers -1 1, (e.g. `limits = c(-0.15, 1)`) n integer specifying number samples drawn. Defaults NULL, uses number multilocus genotypes. reps integer specifying number replicates perform.  Defaults 999. use_psex logical. TRUE, samples weighted value  psex. Defaults FALSE. ... arguments passed psex","code":""},{"path":[]},{"path":"/reference/ia.html","id":"for-pair-ia-","dir":"Reference","previous_headings":"","what":"for pair.ia()","title":"Index of Association ‚Äî ia","text":"matrix two columns choose(nLoc(gid), 2) rows representing values Ia rbarD per locus pair.","code":""},{"path":"/reference/ia.html","id":"if-no-sampling-has-occurred-","dir":"Reference","previous_headings":"","what":"If no sampling has occurred:","title":"Index of Association ‚Äî ia","text":"named number vector length 2 giving Index Association, \"Ia\"; Standardized Index Association, \"rbarD\"","code":""},{"path":"/reference/ia.html","id":"if-there-is-sampling-","dir":"Reference","previous_headings":"","what":"If there is sampling:","title":"Index of Association ‚Äî ia","text":"named numeric vector length 4 following values: Ia - numeric. index association. p.Ia - number indicating p-value resulting one-sided permutation test based number samples indicated original call. rbarD - numeric. standardized index association. p.rD - factor indicating p-value resulting one-sided permutation test based number samples indicated original call.","code":""},{"path":"/reference/ia.html","id":"if-there-is-sampling-and-valureturn-true","dir":"Reference","previous_headings":"","what":"If there is sampling and valureturn = TRUE","title":"Index of Association ‚Äî ia","text":"list following elements: index vector samples data frame s 2 column data frame s number samples defined. columns values Ia rbarD, respectively.","code":""},{"path":"/reference/ia.html","id":"resample-ia-","dir":"Reference","previous_headings":"","what":"resample.ia()","title":"Index of Association ‚Äî ia","text":"data frame index association standardized index association columns. Number rows represents number reps.","code":""},{"path":"/reference/ia.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Index of Association ‚Äî ia","text":"ia() calculates index association loci data set. pair.ia() calculates index association pairwise manner among loci. resample.ia() calculates index association reduced data set multiple times create distribution, showing variation values observed given sample size (previously jack.ia()). index association originally developed .H.D. Brown analyzing population structure wild barley (Brown, 1980). widely used tool detect clonal reproduction within populations . Populations whose members undergoing sexual reproduction, whether selfing -crossing, produce gametes via meiosis, thus chance shuffle alleles next generation. Populations whose members undergoing clonal reproduction, however, generally via mitosis. means likely mechanism change genotype via mutation. rate mutation varies species species, rarely sufficiently high approximate random shuffling alleles. index association calculation based ratio variance raw number differences individuals sum variances locus . can also think observed variance expected variance.  , index zero subtracting one (Maynard-Smith, 1993): $$I_A = \\frac{V_O}{V_E}-1$$ Since distance less binary distance, sort marker can used analysis. calculation, phase considered, difference increases distance two individuals. Remember column represents different allele entry table represents fraction genotype made allele locus. Notice also sum rows equal one. Poppr uses calculate distances simply taking sum absolute values differences rows. calculation distance two individuals single locus allelic states ploidy k follows (except Presence/Absence data): $$ d = \\displaystyle \\frac{k}{2}\\sum_{=1}^{} \\mid A_{} - B_{}\\mid$$ find total number differences two individuals loci, just take d m loci, value call D: $$D = \\displaystyle \\sum_{=1}^{m} d_i $$ values calculated possible combinations individuals data set, \\({n \\choose 2}\\) end \\({n \\choose 2}\\cdot{}m\\) values d \\({n \\choose 2}\\) values D. Calculating observed variances fairly straightforward (modified Agapow Burt, 2001): $$ V_O = \\frac{\\displaystyle \\sum_{=1}^{n \\choose 2} D_{}^2 -  \\frac{(\\displaystyle\\sum_{=1}^{n \\choose 2} D_{})^2}{{n \\choose 2}}}{{n  \\choose 2}}$$ Calculating expected variance sum variances individual loci. calculation single locus, j previous equation, substituting values D d: $$ var_j = \\frac{\\displaystyle \\sum_{=1}^{n \\choose 2} d_{}^2 -  \\frac{(\\displaystyle\\sum_{=1}^{n \\choose 2} d_i)^2}{{n \\choose 2}}}{{n  \\choose 2}} $$ expected variance sum variances m loci: $$ V_E = \\displaystyle \\sum_{j=1}^{m} var_j $$ Agapow Burt showed \\(I_A\\) increases steadily number loci, came approximation widely used, \\(\\bar r_d\\). derivation, see manual multilocus. $$ \\bar r_d = \\frac{V_O - V_E} {2\\displaystyle  \\sum_{j=1}^{m}\\displaystyle \\sum_{k \\neq j}^{m}\\sqrt{var_j\\cdot{}var_k}}  $$","code":""},{"path":"/reference/ia.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Index of Association ‚Äî ia","text":"jack.ia() deprecated name misleading. Please use resample.ia()","code":""},{"path":"/reference/ia.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Index of Association ‚Äî ia","text":"Paul-Michael Agapow Austin Burt. Indices multilocus linkage disequilibrium. Molecular Ecology Notes, 1(1-2):101-102, 2001 .H.D. Brown, M.W. Feldman, E. Nevo. Multilocus structure natural populations Hordeum spontaneum. Genetics, 96(2):523-536, 1980. J M Smith, N H Smith, M O'Rourke, B G Spratt. clonal bacteria? Proceedings National Academy Sciences, 90(10):4384-4388, 1993.","code":""},{"path":[]},{"path":"/reference/ia.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Index of Association ‚Äî ia","text":"Zhian N. Kamvar","code":""},{"path":"/reference/ia.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Index of Association ‚Äî ia","text":"","code":"data(nancycats) ia(nancycats) #>         Ia      rbarD  #> 0.17207262 0.02178965   # Pairwise over all loci: data(partial_clone) res <- pair.ia(partial_clone)  plot(res, low = \"black\", high = \"green\", index = \"Ia\")   # Resampling data(Pinf) resample.ia(Pinf, reps = 99) #>           Ia      rbarD #> 1  0.6501982 0.07093833 #> 2  0.8256286 0.09057133 #> 3  0.4231684 0.04623043 #> 4  0.6277631 0.06854268 #> 5  0.7032604 0.07697910 #> 6  0.6764791 0.07411652 #> 7  0.7627602 0.08376810 #> 8  0.6389609 0.06977151 #> 9  0.7841983 0.08570989 #> 10 0.6195379 0.06812260 #> 11 0.7605239 0.08751298 #> 12 0.7942110 0.08701043 #> 13 0.6059280 0.06675097 #> 14 0.6299434 0.06923696 #> 15 0.5638179 0.06169467 #> 16 0.6379127 0.07007583 #> 17 0.6960176 0.07630673 #> 18 0.7248024 0.07939282 #> 19 0.7008263 0.07667522 #> 20 0.4658464 0.05324204 #> 21 0.5385327 0.05893106 #> 22 0.5825171 0.06370222 #> 23 0.6904987 0.07549761 #> 24 0.6820235 0.07817614 #> 25 0.7170443 0.07867977 #> 26 0.7454600 0.08233780 #> 27 0.5887406 0.06441081 #> 28 0.6312326 0.06897246 #> 29 0.6593338 0.07259843 #> 30 0.5476437 0.05981975 #> 31 0.6912756 0.07928548 #> 32 0.7823573 0.08621459 #> 33 0.6800208 0.07426381 #> 34 0.7542653 0.08258429 #> 35 0.7014704 0.07703452 #> 36 0.6013052 0.06573002 #> 37 0.6833382 0.07467048 #> 38 0.5814739 0.06347431 #> 39 0.6779095 0.07404344 #> 40 0.7512745 0.08220176 #> 41 0.6809989 0.07811553 #> 42 0.6902944 0.07606066 #> 43 0.6111562 0.06714608 #> 44 0.7768184 0.08522498 #> 45 0.8038261 0.08789452 #> 46 0.6519288 0.07106003 #> 47 0.6015505 0.06595567 #> 48 0.7307723 0.08011669 #> 49 0.7786746 0.08914556 #> 50 0.6405280 0.07014232 #> 51 0.5461233 0.06019438 #> 52 0.7789662 0.08533309 #> 53 0.6231572 0.06804370 #> 54 0.6506544 0.07150263 #> 55 0.6572602 0.07574286 #> 56 0.6775073 0.07427077 #> 57 0.7315283 0.08022850 #> 58 0.6429697 0.07043269 #> 59 0.6858775 0.07858277 #> 60 0.7788526 0.08975278 #> 61 0.5810050 0.06378772 #> 62 0.7646678 0.08367388 #> 63 0.5923618 0.06438076 #> 64 0.6377337 0.06984813 #> 65 0.7351625 0.08469701 #> 66 0.6729850 0.07367359 #> 67 0.6730470 0.07376535 #> 68 0.6628730 0.07253585 #> 69 0.6429248 0.07001100 #> 70 0.6977442 0.07603908 #> 71 0.5948796 0.06497293 #> 72 0.6957663 0.07623048 #> 73 0.7108436 0.07780428 #> 74 0.6202232 0.06828203 #> 75 0.6192190 0.06760712 #> 76 0.5960247 0.06515301 #> 77 0.7035341 0.08045609 #> 78 0.7169920 0.07916178 #> 79 0.6357226 0.06987920 #> 80 0.8864959 0.10157407 #> 81 0.7207755 0.07877351 #> 82 0.6256714 0.06835729 #> 83 0.6528963 0.07503376 #> 84 0.5997759 0.06541564 #> 85 0.6834416 0.07857675 #> 86 0.6098177 0.07023320 #> 87 0.6764721 0.07385135 #> 88 0.6675123 0.07364553 #> 89 0.8096862 0.08858310 #> 90 0.5652613 0.06194018 #> 91 0.6005300 0.06599025 #> 92 0.5854640 0.06417910 #> 93 0.6862173 0.07531431 #> 94 0.7341306 0.08065948 #> 95 0.7370794 0.08091394 #> 96 0.6610314 0.07226520 #> 97 0.5200685 0.05694612 #> 98 0.6360764 0.07258663 #> 99 0.7294001 0.07977655  # \\dontrun{  # Pairwise IA with p-values (this will take about a minute) res <- pair.ia(partial_clone, sample = 999)  head(res) #>                           Ia  p.Ia       rbarD  p.rD #> Locus_1:Locus_2 -0.007935313 0.498 -0.00827841 0.499 #> Locus_1:Locus_3  0.269326856 0.001  0.27484539 0.001 #> Locus_1:Locus_4  0.320892032 0.001  0.33749005 0.001 #> Locus_1:Locus_5 -0.003553671 0.503 -0.00375937 0.503 #> Locus_1:Locus_6  0.133939476 0.032  0.13782217 0.030 #> Locus_1:Locus_7  0.504438856 0.001  0.54150373 0.001  # Plot the results of resampling rbarD.  library(\"ggplot2\") Pinf.resamp <- resample.ia(Pinf, reps = 999) ggplot(Pinf.resamp[2], aes(x = rbarD)) +   geom_histogram() +   geom_vline(xintercept = ia(Pinf)[2]) +   geom_vline(xintercept = ia(clonecorrect(Pinf))[2], linetype = 2) +   xlab(expression(bar(r)[d])) #> `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.   # Get the indices back and plot the distributions. nansamp <- ia(nancycats, sample = 999, valuereturn = TRUE)   plot(nansamp, index = \"Ia\")  plot(nansamp, index = \"rbarD\")   # You can also adjust the parameters for how large to display the text # so that it's easier to export it for publication/presentations. library(\"ggplot2\") plot(nansamp, labsize = 5, linesize = 2) +   theme_bw() +                                      # adding a theme   theme(text = element_text(size = rel(5))) +       # changing text size   theme(plot.title = element_text(size = rel(4))) + # changing title size   ggtitle(\"Index of Association of nancycats\")      # adding a new title   # Get the index for each population. lapply(seppop(nancycats), ia) #> $P01 #>         Ia      rbarD  #> 0.16564272 0.02105965  #>  #> $P02 #>         Ia      rbarD  #> 0.18176676 0.02301615  #>  #> $P03 #>         Ia      rbarD  #> 0.35461940 0.04517282  #>  #> $P04 #>         Ia      rbarD  #> 0.44944509 0.05634184  #>  #> $P05 #>           Ia        rbarD  #> -0.047539953 -0.006004254  #>  #> $P06 #>         Ia      rbarD  #> 0.33370148 0.04261598  #>  #> $P07 #>         Ia      rbarD  #> 0.25691744 0.03259883  #>  #> $P08 #>         Ia      rbarD  #> 0.23877871 0.03012163  #>  #> $P09 #>        Ia     rbarD  #> 2.0845196 0.2636454  #>  #> $P10 #>         Ia      rbarD  #> 0.59550982 0.07627372  #>  #> $P11 #>        Ia     rbarD  #> 0.2846571 0.0362703  #>  #> $P12 #>         Ia      rbarD  #> 0.48988697 0.06428403  #>  #> $P13 #>        Ia     rbarD  #> 0.1855035 0.0236618  #>  #> $P14 #>        Ia     rbarD  #> 0.2210061 0.0282276  #>  #> $P15 #>         Ia      rbarD  #> 0.69325774 0.08726678  #>  #> $P16 #>         Ia      rbarD  #> 0.23450449 0.02950446  #>  #> $P17 #>          Ia       rbarD  #> -0.09055833 -0.01378538  #>  # With sampling lapply(seppop(nancycats), ia, sample = 999)                  #> $P01 #>         Ia       p.Ia      rbarD       p.rD  #> 0.16564272 0.24100000 0.02105965 0.24100000  #>  #> $P02 #>         Ia       p.Ia      rbarD       p.rD  #> 0.18176676 0.06900000 0.02301615 0.06400000  #>  #> $P03 #>         Ia       p.Ia      rbarD       p.rD  #> 0.35461940 0.04200000 0.04517282 0.04200000  #>  #> $P04 #>         Ia       p.Ia      rbarD       p.rD  #> 0.44944509 0.00100000 0.05634184 0.00100000  #>  #> $P05 #>           Ia         p.Ia        rbarD         p.rD  #> -0.047539953  0.567000000 -0.006004254  0.566000000  #>  #> $P06 #>         Ia       p.Ia      rbarD       p.rD  #> 0.33370148 0.05100000 0.04261598 0.05100000  #>  #> $P07 #>         Ia       p.Ia      rbarD       p.rD  #> 0.25691744 0.10100000 0.03259883 0.10100000  #>  #> $P08 #>         Ia       p.Ia      rbarD       p.rD  #> 0.23877871 0.14700000 0.03012163 0.14700000  #>  #> $P09 #>        Ia      p.Ia     rbarD      p.rD  #> 2.0845196 0.0010000 0.2636454 0.0010000  #>  #> $P10 #>         Ia       p.Ia      rbarD       p.rD  #> 0.59550982 0.00400000 0.07627372 0.00300000  #>  #> $P11 #>        Ia      p.Ia     rbarD      p.rD  #> 0.2846571 0.3230000 0.0362703 0.3250000  #>  #> $P12 #>         Ia       p.Ia      rbarD       p.rD  #> 0.48988697 0.01200000 0.06428403 0.01200000  #>  #> $P13 #>        Ia      p.Ia     rbarD      p.rD  #> 0.1855035 0.1660000 0.0236618 0.1640000  #>  #> $P14 #>        Ia      p.Ia     rbarD      p.rD  #> 0.2210061 0.0700000 0.0282276 0.0700000  #>  #> $P15 #>         Ia       p.Ia      rbarD       p.rD  #> 0.69325774 0.00500000 0.08726678 0.00500000  #>  #> $P16 #>         Ia       p.Ia      rbarD       p.rD  #> 0.23450449 0.11800000 0.02950446 0.11800000  #>  #> $P17 #>          Ia        p.Ia       rbarD        p.rD  #> -0.09055833  0.66300000 -0.01378538  0.66500000  #>   # Plot pairwise ia for all populations in a grid with cowplot # Set up the library and data library(\"cowplot\") data(monpop) splitStrata(monpop) <- ~Tree/Year/Symptom setPop(monpop)      <- ~Tree  # Need to set up a list in which to store the plots. plotlist        <- vector(mode = \"list\", length = nPop(monpop)) names(plotlist) <- popNames(monpop)  # Loop throgh the populations, calculate pairwise ia, plot, and then # capture the plot in the list for (i in popNames(monpop)){   x <- pair.ia(monpop[pop = i], limits = c(-0.15, 1)) # subset, calculate, and plot   plotlist[[i]] <- ggplot2::last_plot() # save the last plot }      # Use the plot_grid function to plot. plot_grid(plotlist = plotlist, labels = paste(\"Tree\", popNames(monpop)))   # }"},{"path":"/reference/imsn.html","id":null,"dir":"Reference","previous_headings":"","what":"Create minimum spanning networks interactively ‚Äî imsn","title":"Create minimum spanning networks interactively ‚Äî imsn","text":"function launch interactive interface allows create, plot, manipulate, save minimum spanning networks. runs using shiny R package.","code":""},{"path":"/reference/imsn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create minimum spanning networks interactively ‚Äî imsn","text":"","code":"imsn()"},{"path":"/reference/imsn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create minimum spanning networks interactively ‚Äî imsn","text":"NULL, invisibly","code":""},{"path":"/reference/imsn.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create minimum spanning networks interactively ‚Äî imsn","text":"Creating plotting MSNs requires three steps: Create distance matrix data Create minimum spanning network data matrix Visualize minimum spanning network function plot_poppr_msn currently flexible way visualizing minimum spanning network, 20 parameters, can become pretty intimidating trying find right display MSN. function, three steps combined one interactive  interface allow intuitively modify minimum spanning  network even save results pdf png file.","code":""},{"path":[]},{"path":"/reference/imsn.html","id":"buttons","dir":"Reference","previous_headings":"","what":"Buttons","title":"Create minimum spanning networks interactively ‚Äî imsn","text":"left hand panel, three buttons execute functions. allow run data set manipulate parameters. GO! - button start application specified parameters reData - Use button changed parameters section Data Parameters. involves recalculating distance matrix msn. reGraph - Use button changed parameters section Graphical Parameters. involves superficial changes display minimum spanning network.","code":""},{"path":"/reference/imsn.html","id":"tabs","dir":"Reference","previous_headings":"","what":"Tabs","title":"Create minimum spanning networks interactively ‚Äî imsn","text":"right hand panel contains different tabs related data set choice. Plot - minimum spanning network Data - display data set Command - commands used create plot. can copy paste R file reproducibility. Save Plot - provides tool save plot PDF PNG image. Session Information - displays result sessionInfo reproducibility.","code":""},{"path":[]},{"path":"/reference/imsn.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create minimum spanning networks interactively ‚Äî imsn","text":"Zhian N. Kamvar","code":""},{"path":"/reference/imsn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create minimum spanning networks interactively ‚Äî imsn","text":"","code":"# \\dontrun{  # Set up some data library(\"poppr\") library(\"magrittr\") data(monpop) splitStrata(monpop) <- ~Tree/Year/Symptom summary(monpop) #>  #> // Number of individuals: 694 #> // Group sizes: 23 41 132 73 5 13 1 64 85 130 30 97 #> // Number of alleles per locus: 3 6 3 11 9 5 8 7 5 9 8 11 10 #> // Number of alleles per group: 48 53 58 48 37 40 13 44 60 64 60 63 #> // Percentage of missing data: 0.51 % #> // Observed heterozygosity: 0 monpop_ssr <- c(CHMFc4 = 7, CHMFc5 = 2, CHMFc12 = 4,                  SEA = 4, SED = 4, SEE = 2, SEG = 6,                  SEI = 3, SEL = 4, SEN = 2, SEP = 4,                  SEQ = 2, SER = 4) t26 <- monpop %>% setPop(~Tree) %>% popsub(\"26\") %>% setPop(~Year/Symptom) t26 #>  #> This is a genclone object #> ------------------------- #> Genotype information: #>  #>    155 multilocus genotypes  #>    390 haploid individuals #>     13 codominant loci #>  #> Population information: #>  #>      3 strata - Tree, Year, Symptom #>      6 populations defined - 9_BB, 9_FR, 10_BB, 10_FR, 11_BB, 11_FR if (interactive()) {   imsn() # select Bruvo's distance and enter \"monpop_ssr\" into the Repeat Length field.      # It is also possible to run this from github if you are connected to the internet.   # This allows you to access any bug fixes that may have been updated before a formal   # release on CRAN    shiny::runGitHub(\"grunwaldlab/poppr\", subdir = \"inst/shiny/msn_explorer\")    # You can also use your own distance matrices, but there's a small catch.   # in order to do so, you must write a function that will subset the matrix   # to whatever populations are in your data. Here's an example with the above    mondist <- bruvo.dist(monpop, replen = monpop_ssr)   myDist <- function(x, d = mondist){    dm <- as.matrix(d)          # Convert the dist object to a square matrix    xi <- indNames(x)           # Grab the sample names that exist    return(as.dist(dm[xi, xi])) # return only the elements that have the names                                # in the data set   }   # After executing imsn, choose:   # Distance: custom   # myDist   imsn()  } # }"},{"path":"/reference/incomp.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for samples that are incomparable due to missing data ‚Äî incomp","title":"Check for samples that are incomparable due to missing data ‚Äî incomp","text":"two samples share loci typed common, incomparable produce missing data distance matrix, lead problems analyses. function finds samples returns matrix many samples incomparable .","code":""},{"path":"/reference/incomp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for samples that are incomparable due to missing data ‚Äî incomp","text":"","code":"incomp(gid)"},{"path":"/reference/incomp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for samples that are incomparable due to missing data ‚Äî incomp","text":"gid genind genclone object","code":""},{"path":"/reference/incomp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for samples that are incomparable due to missing data ‚Äî incomp","text":"square matrix samples incomparable","code":""},{"path":"/reference/incomp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check for samples that are incomparable due to missing data ‚Äî incomp","text":"","code":"data(nancycats) # These two populations have no samples that are incomparable incomp(nancycats[pop = c(1, 17)]) #> <0 x 0 matrix>  # If you reduce the number of loci, we find that there are  # incomparable samples. incomp(nancycats[pop = c(1, 17), loc = c(1, 4)]) #>      N215 N216 N282 N283 N288 N291 N292 N293 N294 N295 N296 N297 N281 N289 N290 #> N215    1    1    0    0    0    0    0    0    0    0    0    0    0    0    0 #> N216    1    1    0    0    0    0    0    0    0    0    0    0    0    0    0 #> N282    0    0    1    1    1    1    1    1    1    1    1    1    1    1    1 #> N283    0    0    1    1    1    1    1    1    1    1    1    1    1    1    1 #> N288    0    0    1    1    1    1    1    1    1    1    1    1    1    1    1 #> N291    0    0    1    1    1    1    1    1    1    1    1    1    1    1    1 #> N292    0    0    1    1    1    1    1    1    1    1    1    1    1    1    1 #> N293    0    0    1    1    1    1    1    1    1    1    1    1    1    1    1 #> N294    0    0    1    1    1    1    1    1    1    1    1    1    1    1    1 #> N295    0    0    1    1    1    1    1    1    1    1    1    1    1    1    1 #> N296    0    0    1    1    1    1    1    1    1    1    1    1    1    1    1 #> N297    0    0    1    1    1    1    1    1    1    1    1    1    1    1    1 #> N281    0    0    1    1    1    1    1    1    1    1    1    1    1    1    1 #> N289    0    0    1    1    1    1    1    1    1    1    1    1    1    1    1 #> N290    0    0    1    1    1    1    1    1    1    1    1    1    1    1    1"},{"path":"/reference/info_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a table summarizing missing data or ploidy information of a genind or\ngenclone object ‚Äî info_table","title":"Create a table summarizing missing data or ploidy information of a genind or\ngenclone object ‚Äî info_table","text":"Create table summarizing missing data ploidy information genind genclone object","code":""},{"path":"/reference/info_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a table summarizing missing data or ploidy information of a genind or\ngenclone object ‚Äî info_table","text":"","code":"info_table(   gen,   type = c(\"missing\", \"ploidy\"),   percent = TRUE,   plot = FALSE,   df = FALSE,   returnplot = FALSE,   low = \"blue\",   high = \"red\",   plotlab = TRUE,   scaled = TRUE )"},{"path":"/reference/info_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a table summarizing missing data or ploidy information of a genind or\ngenclone object ‚Äî info_table","text":"gen genind genclone object. type character. information returned. Choices \"missing\" (Default) \"ploidy\". See Description. percent logical. (type = 'missing') TRUE (default), table plot represent missing data percentage cell. FALSE, table plot represent missing data raw counts. (See details) plot logical. TRUE, simple heatmap  produced. FALSE (default), heatmap produced. df logical. TRUE, data returned long form data frame. FALSE (default), matrix samples rows loci columns returned. returnplot logical. TRUE, list returned two elements: table - normal output plot - ggplot  object. FALSE, table returned. low character. color represent missing data  lowest observed ploidy? (default: \"blue\") high character. color represent highest amount  missing data observed ploidy? (default: \"red\") plotlab logical. (type = 'missing') TRUE (default), values missing data greater 0% plotted. FALSE, plot appear un-appended. scaled logical. (type = 'missing') percent = TRUE. TRUE (default), color specified high represent highest observed value missing data. FALSE, color specified high represent 100%.","code":""},{"path":"/reference/info_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a table summarizing missing data or ploidy information of a genind or\ngenclone object ‚Äî info_table","text":"matrix, data frame (df = TRUE), list (returnplot    = TRUE) representing missing data per population (type = 'missing')   ploidy per individual (type = 'ploidy') genind genclone object.","code":""},{"path":"/reference/info_table.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a table summarizing missing data or ploidy information of a genind or\ngenclone object ‚Äî info_table","text":"Missing data accounted per-population level.   Ploidy accounted per-individual level.","code":""},{"path":"/reference/info_table.html","id":"for-type-missing-","dir":"Reference","previous_headings":"","what":"For type = 'missing'","title":"Create a table summarizing missing data or ploidy information of a genind or\ngenclone object ‚Äî info_table","text":"data potentially useful identifying areas systematic missing   data. caveats aware . Regarding counts missing data: count represents number   individuals missing data locus. last column, \"mean\" can   thought average number individuals missing data per   locus. Regarding percentage missing data: percentage   relative population locus, entire data set.   last column, \"mean\" represents average percent population   missing data per locus.","code":""},{"path":"/reference/info_table.html","id":"for-type-ploidy-","dir":"Reference","previous_headings":"","what":"For type = 'ploidy'","title":"Create a table summarizing missing data or ploidy information of a genind or\ngenclone object ‚Äî info_table","text":"option useful data imported mixed ploidies.   summarize relative levels ploidy per individual per locus.   simply based observed alleles provide   estimates.","code":""},{"path":"/reference/info_table.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create a table summarizing missing data or ploidy information of a genind or\ngenclone object ‚Äî info_table","text":"Zhian N. Kamvar","code":""},{"path":"/reference/info_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a table summarizing missing data or ploidy information of a genind or\ngenclone object ‚Äî info_table","text":"","code":"data(nancycats) nancy.miss <- info_table(nancycats, plot = TRUE, type = \"missing\")  data(Pinf) Pinf.ploid <- info_table(Pinf, plot = TRUE, type = \"ploidy\")"},{"path":"/reference/informloci.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove all non-phylogentically informative loci ‚Äî informloci","title":"Remove all non-phylogentically informative loci ‚Äî informloci","text":"function facilitate removing phylogenetically uninformative loci genclone genind object.  user ability define uninformative means setting  cutoff value either percentage differentiating genotypes minor  allele frequency.","code":""},{"path":"/reference/informloci.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove all non-phylogentically informative loci ‚Äî informloci","text":"","code":"informloci(pop, cutoff = 2/nInd(pop), MAF = 0.01, quiet = FALSE)"},{"path":"/reference/informloci.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove all non-phylogentically informative loci ‚Äî informloci","text":"pop genclone genind  object. cutoff numeric. number 0 1 defining minimum  number differentiating samples. MAF numeric. number 0 1 defining minimum minor allele frequency. passed thresh parameter isPoly. quiet logical. quiet = TRUE (default), messages  indicating loci removed printed screen. quiet =  FALSE, nothing printed screen.","code":""},{"path":"/reference/informloci.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove all non-phylogentically informative loci ‚Äî informloci","text":"genind object user-defined informative loci.","code":""},{"path":"/reference/informloci.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Remove all non-phylogentically informative loci ‚Äî informloci","text":"function remove uninformative loci using traditional MAF   cutoff (using isPoly adegenet) well   analyzing number observed genotypes locus. important   clonal organisms can fixed heterozygous sites detected   MAF methods.","code":""},{"path":"/reference/informloci.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Remove all non-phylogentically informative loci ‚Äî informloci","text":"side effects affect certain analyses. First,    number multilocus genotypes might reduced due reduced    number markers (using genind object). Second,    plan using data analysis index association, sure    use standardized version (rbarD) corrects number    observed loci.","code":""},{"path":"/reference/informloci.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Remove all non-phylogentically informative loci ‚Äî informloci","text":"Zhian N. Kamvar","code":""},{"path":"/reference/informloci.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove all non-phylogentically informative loci ‚Äî informloci","text":"","code":"# We will use a dummy data set to demonstrate how this detects uninformative # loci using both MAF and a cutoff.  genos <- c(\"A/A\", \"A/B\", \"A/C\", \"B/B\", \"B/C\", \"C/C\")  v <- sample(genos, 100, replace = TRUE) w <- c(rep(genos[2], 99), genos[3])           # found by cutoff x <- c(rep(genos[1], 98), genos[3], genos[2]) # found by MAF y <- c(rep(genos[1], 99), genos[2])           # found by both z <- sample(genos, 100, replace = TRUE) dat <- df2genind(data.frame(v = v, w = w, x = x, y = y, z = z), sep = \"/\")  informloci(dat) #> cutoff value: 2 % ( 2 samples ). #> MAF         : 0.01 #>  #>  Found 3 uninformative loci  #>  ============================  #>  2 loci found with a cutoff of 2 samples : #>  w, y  #>  2 loci found with MAF < 0.01 : #>  x, y #> /// GENIND OBJECT ///////// #>  #>  // 100 individuals; 2 loci; 6 alleles; size: 14.6 Kb #>  #>  // Basic content #>    @tab:  100 x 6 matrix of allele counts #>    @loc.n.all: number of alleles per locus (range: 3-3) #>    @loc.fac: locus factor for the 6 columns of @tab #>    @all.names: list of allele names for each locus #>    @ploidy: ploidy of each individual  (range: 2-2) #>    @type:  codom #>    @call: .local(x = x, i = i, j = j, loc = ..1, drop = drop) #>  #>  // Optional content #>    - empty -  # \\dontrun{ # Ignore MAF informloci(dat, MAF = 0) #> cutoff value: 2 % ( 2 samples ). #> MAF         : 0 #>  #>  Found 2 uninformative loci  #>  ============================  #>  2 loci found with a cutoff of 2 samples : #>  w, y  #>  0 loci found with MAF < 0   #> /// GENIND OBJECT ///////// #>  #>  // 100 individuals; 3 loci; 9 alleles; size: 16.5 Kb #>  #>  // Basic content #>    @tab:  100 x 9 matrix of allele counts #>    @loc.n.all: number of alleles per locus (range: 3-3) #>    @loc.fac: locus factor for the 9 columns of @tab #>    @all.names: list of allele names for each locus #>    @ploidy: ploidy of each individual  (range: 2-2) #>    @type:  codom #>    @call: .local(x = x, i = i, j = j, loc = ..1, drop = drop) #>  #>  // Optional content #>    - empty -  # Ignore cutoff informloci(dat, cutoff = 0) #> cutoff value: 0 % ( 0 samples ). #> MAF         : 0.01 #>  #>  Found 2 uninformative loci  #>  ============================  #>  0 loci found with a cutoff of 0 samples    #>  2 loci found with MAF < 0.01 : #>  x, y #> /// GENIND OBJECT ///////// #>  #>  // 100 individuals; 3 loci; 9 alleles; size: 16.5 Kb #>  #>  // Basic content #>    @tab:  100 x 9 matrix of allele counts #>    @loc.n.all: number of alleles per locus (range: 3-3) #>    @loc.fac: locus factor for the 9 columns of @tab #>    @all.names: list of allele names for each locus #>    @ploidy: ploidy of each individual  (range: 2-2) #>    @type:  codom #>    @call: .local(x = x, i = i, j = j, loc = ..1, drop = drop) #>  #>  // Optional content #>    - empty -  # Real data data(H3N2) informloci(H3N2) #> cutoff value: 0.105097214923805 % ( 2 samples ). #> MAF         : 0.01 #>  #>  Found 5 uninformative loci  #>  ============================  #>  1 locus found with a cutoff of 2 samples : #>  597  #>  5 loci found with MAF < 0.01 : #>  42, 313, 433, 597, 915 #> /// GENIND OBJECT ///////// #>  #>  // 1,903 individuals; 120 loci; 322 alleles; size: 3.3 Mb #>  #>  // Basic content #>    @tab:  1903 x 322 matrix of allele counts #>    @loc.n.all: number of alleles per locus (range: 2-4) #>    @loc.fac: locus factor for the 322 columns of @tab #>    @all.names: list of allele names for each locus #>    @ploidy: ploidy of each individual  (range: 1-1) #>    @type:  codom #>    @call: .local(x = x, i = i, j = j, loc = ..1, drop = drop) #>  #>  // Optional content #>    @other: a list containing: x  xy  epid  #>   # }"},{"path":"/reference/is.clone.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for validity of a genclone or snpclone object ‚Äî is.snpclone","title":"Check for validity of a genclone or snpclone object ‚Äî is.snpclone","text":"Check validity genclone snpclone object","code":""},{"path":"/reference/is.clone.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for validity of a genclone or snpclone object ‚Äî is.snpclone","text":"","code":"is.snpclone(x)  is.clone(x)  is.genclone(x)"},{"path":"/reference/is.clone.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for validity of a genclone or snpclone object ‚Äî is.snpclone","text":"x genclone snpclone object","code":""},{"path":"/reference/is.clone.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Check for validity of a genclone or snpclone object ‚Äî is.snpclone","text":"genclone object always valid  genind object snpclone object always valid genlight object.","code":""},{"path":"/reference/is.clone.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check for validity of a genclone or snpclone object ‚Äî is.snpclone","text":"Zhian N. Kamvar","code":""},{"path":"/reference/is.clone.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check for validity of a genclone or snpclone object ‚Äî is.snpclone","text":"","code":"(sc <- as.snpclone(glSim(100, 1e3, ploid=2, parallel = FALSE),                     parallel = FALSE, n.cores = 1L)) #>  ||| SNPCLONE OBJECT ||||||||| #>  #>  || 100 genotypes,  1,000 binary SNPs, size: 182.6 Kb #>  0 (0 %) missing data #>  #>  || Basic content #>    @gen: list of 100 SNPbin #>    @mlg: 100 original multilocus genotypes #>    @ploidy: ploidy of each individual  (range: 2-2) #>  #>  || Optional content #>    @other: a list containing: ancestral.pops  #>  #> NULL is.snpclone(sc) #> [1] TRUE is.clone(sc) #> [1] TRUE data(nancycats) nanclone <- as.genclone(nancycats) is.genclone(nanclone) #> [1] TRUE"},{"path":"/reference/levels-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Unique and Duplicated implementations for MLG objects ‚Äî levels,MLG-method","title":"Unique and Duplicated implementations for MLG objects ‚Äî levels,MLG-method","text":"internal use","code":""},{"path":"/reference/levels-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unique and Duplicated implementations for MLG objects ‚Äî levels,MLG-method","text":"","code":"# S4 method for MLG levels(x)  # S4 method for MLG levels(x) <- value"},{"path":"/reference/levels-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Unique and Duplicated implementations for MLG objects ‚Äî levels,MLG-method","text":"x MLG object","code":""},{"path":"/reference/levels-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Unique and Duplicated implementations for MLG objects ‚Äî levels,MLG-method","text":"character vector showing levels custom MLGs NULL    visible slot set \"custom\"","code":""},{"path":[]},{"path":"/reference/locus_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a table of summary statistics per locus. ‚Äî locus_table","title":"Create a table of summary statistics per locus. ‚Äî locus_table","text":"Create table summary statistics per locus.","code":""},{"path":"/reference/locus_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a table of summary statistics per locus. ‚Äî locus_table","text":"","code":"locus_table(   x,   index = \"simpson\",   lev = \"allele\",   population = \"ALL\",   information = TRUE )"},{"path":"/reference/locus_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a table of summary statistics per locus. ‚Äî locus_table","text":"x adegenet::genind genclone object. index diversity index use. Choices \"simpson\" (Default) give Simpson's index \"shannon\" give Shannon-Wiener index \"invsimpson\" give Inverse Simpson's index aka Stoddard Tayor index. lev level want analyze diversity? Choices \"allele\" (Default) \"genotype\". population Select populations analyzed. parameter sublist passed function popsub(). Defaults \"\". information TRUE (Default), print header information R console.","code":""},{"path":"/reference/locus_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a table of summary statistics per locus. ‚Äî locus_table","text":"table 4 columns indicating Number alleles/genotypes observed, Diversity index chosen, Nei's 1978 gene diversity (expected heterozygosity), Evenness.","code":""},{"path":"/reference/locus_table.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Create a table of summary statistics per locus. ‚Äî locus_table","text":"calculation Hexp \\((\\frac{n}{n-1}) 1 - \\sum_{= 1}^k{p^{2}_{}}\\) p allele frequencies given locus n number observed alleles (Nei, 1978) locus returning average. Caution exercised interpreting results Hexp polyploid organisms ambiguous ploidy. lack allelic dosage information cause rare alleles -represented artificially inflate index. especially true small sample sizes. lev = \"genotype\", statistics reflect genotypic diversity within locus. includes calculation Hexp, turns unbiased Simpson's index.","code":""},{"path":"/reference/locus_table.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Create a table of summary statistics per locus. ‚Äî locus_table","text":"Jari Oksanen, F. Guillaume Blanchet, Roeland Kindt, Pierre Legendre, Peter R. Minchin, R. B. O'Hara, Gavin L. Simpson, Peter Solymos, M. Henry H. Stevens, Helene Wagner. vegan: Community Ecology Package, 2012. R package version 2.0-5. Niklaus J. Gr\\\"unwald, Stephen B. Goodwin, Michael G. Milgroom, William E. Fry. Analysis genotypic diversity data populations microorganisms. Phytopathology, 93(6):738-46, 2003 J.. Ludwig J.F. Reynolds. Statistical Ecology. Primer Methods Computing. New York USA: John Wiley Sons, 1988. E.C. Pielou. Ecological Diversity. Wiley, 1975. J.. Stoddart J.F. Taylor. Genotypic diversity: estimation prediction samples. Genetics, 118(4):705-11, 1988. Masatoshi Nei. Estimation average heterozygosity genetic distance small number individuals. Genetics, 89(3):583-590, 1978. Claude Elwood Shannon. mathematical theory communication. Bell Systems Technical Journal, 27:379-423,623-656, 1948","code":""},{"path":[]},{"path":"/reference/locus_table.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create a table of summary statistics per locus. ‚Äî locus_table","text":"Zhian N. Kamvar","code":""},{"path":"/reference/locus_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a table of summary statistics per locus. ‚Äî locus_table","text":"","code":"data(nancycats) locus_table(nancycats[pop = 5]) #>  #> allele = Number of observed alleles #>  #> 1-D = Simpson index #>  #> Hexp = Nei's 1978 gene diversity #> ------------------------------------------ #>        summary #> locus   allele  1-D Hexp Evenness #>   fca8    8.00 0.78 0.81     0.78 #>   fca23   6.00 0.66 0.69     0.65 #>   fca43   5.00 0.79 0.82     0.97 #>   fca45   5.00 0.76 0.79     0.90 #>   fca77   7.00 0.74 0.77     0.74 #>   fca78   3.00 0.38 0.39     0.63 #>   fca90   5.00 0.64 0.66     0.76 #>   fca96   5.00 0.63 0.65     0.76 #>   fca37   4.00 0.19 0.19     0.42 #>   mean    5.33 0.62 0.64     0.73 # \\dontrun{ # Analyze locus statistics for the North American population of P. infestans. # Note that due to the unknown dosage of alleles, many of these statistics # will be artificially inflated for polyploids. data(Pinf) locus_table(Pinf, population = \"North America\") #>  #> allele = Number of observed alleles #>  #> 1-D = Simpson index #>  #> Hexp = Nei's 1978 gene diversity #> ------------------------------------------ #>       summary #> locus  allele    1-D   Hexp Evenness #>   Pi02  9.000  0.690  0.697    0.653 #>   D13  21.000  0.895  0.906    0.684 #>   Pi33  2.000  0.021  0.021    0.353 #>   Pi04  4.000  0.545  0.551    0.764 #>   Pi4B  5.000  0.596  0.603    0.736 #>   Pi16  6.000  0.425  0.430    0.498 #>   G11  15.000  0.824  0.833    0.625 #>   Pi56  3.000  0.335  0.338    0.647 #>   Pi63  3.000  0.310  0.313    0.568 #>   Pi70  2.000  0.203  0.205    0.595 #>   Pi89 11.000  0.627  0.634    0.549 #>   mean  7.364  0.497  0.503    0.607 # }"},{"path":"/reference/make_haplotypes-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Split samples from a genind object into pseudo-haplotypes ‚Äî make_haplotypes","title":"Split samples from a genind object into pseudo-haplotypes ‚Äî make_haplotypes","text":"Split samples genind object pseudo-haplotypes","code":""},{"path":"/reference/make_haplotypes-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split samples from a genind object into pseudo-haplotypes ‚Äî make_haplotypes","text":"","code":"make_haplotypes(gid)"},{"path":"/reference/make_haplotypes-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split samples from a genind object into pseudo-haplotypes ‚Äî make_haplotypes","text":"gid genind genlight object.","code":""},{"path":"/reference/make_haplotypes-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split samples from a genind object into pseudo-haplotypes ‚Äî make_haplotypes","text":"haploid genind object extra strata column called \"Individual\".","code":""},{"path":"/reference/make_haplotypes-method.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Split samples from a genind object into pseudo-haplotypes ‚Äî make_haplotypes","text":"Certain analyses, amova work best within-sample variance (error) can estimated. Practically, performed splitting genotypes across loci create multiple haplotypes. way, within-sample distance can calculated incorporated model. Please note haplotypes generated based order unphased alleles genind object represent true haplotypes. Haploid data returned un-touched.","code":""},{"path":"/reference/make_haplotypes-method.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Split samples from a genind object into pseudo-haplotypes ‚Äî make_haplotypes","text":"slot copied new genind object.","code":""},{"path":[]},{"path":"/reference/make_haplotypes-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Split samples from a genind object into pseudo-haplotypes ‚Äî make_haplotypes","text":"","code":"# Diploid data is doubled -------------------------------------------------  data(nancycats) nan9 <- nancycats[pop = 9] nan9hap <- make_haplotypes(nan9)  #> Warning: No strata found... creating one from the population. nan9              # 9 individuals from population 9 #> /// GENIND OBJECT ///////// #>  #>  // 9 individuals; 9 loci; 108 alleles; size: 28.6 Kb #>  #>  // Basic content #>    @tab:  9 x 108 matrix of allele counts #>    @loc.n.all: number of alleles per locus (range: 8-18) #>    @loc.fac: locus factor for the 108 columns of @tab #>    @all.names: list of allele names for each locus #>    @ploidy: ploidy of each individual  (range: 2-2) #>    @type:  codom #>    @call: .local(x = x, i = i, j = j, pop = 9, drop = drop) #>  #>  // Optional content #>    @pop: population of each individual (group size range: 9-9) #>    @other: a list containing: xy  #>  nan9hap           # 18 haplotypes #> /// GENIND OBJECT ///////// #>  #>  // 18 individuals; 9 loci; 43 alleles; size: 21.3 Kb #>  #>  // Basic content #>    @tab:  18 x 43 matrix of allele counts #>    @loc.n.all: number of alleles per locus (range: 3-8) #>    @loc.fac: locus factor for the 43 columns of @tab #>    @all.names: list of allele names for each locus #>    @ploidy: ploidy of each individual  (range: 1-1) #>    @type:  codom #>    @call: df2genind(X = newdf, ploidy = 1, strata = df) #>  #>  // Optional content #>    @pop: population of each individual (group size range: 2-2) #>    @strata: a data frame with 2 columns ( pop, Individual ) strata(nan9hap)   # strata gains a new column: Individual #>    pop Individual #> 01 P09       N104 #> 02 P09       N104 #> 03 P09       N105 #> 04 P09       N105 #> 05 P09       N106 #> 06 P09       N106 #> 07 P09       N107 #> 08 P09       N107 #> 09 P09       N108 #> 10 P09       N108 #> 11 P09       N109 #> 12 P09       N109 #> 13 P09       N111 #> 14 P09       N111 #> 15 P09       N112 #> 16 P09       N112 #> 17 P09       N113 #> 18 P09       N113 indNames(nan9hap) # individuals are renamed sequentially #>  [1] \"01\" \"02\" \"03\" \"04\" \"05\" \"06\" \"07\" \"08\" \"09\" \"10\" \"11\" \"12\" \"13\" \"14\" \"15\" #> [16] \"16\" \"17\" \"18\"   # Mix ploidy data can be split, but should be treated with caution -------- #  # For example, the Pinf data set contains 86 tetraploid individuals,  # but there appear to only be diploids and triploid genotypes. When  # we convert to haplotypes, those with all missing data are dropped. data(Pinf) Pinf #>  #> This is a genclone object #> ------------------------- #> Genotype information: #>  #>    72 multilocus genotypes  #>    86 tetraploid individuals #>    11 codominant loci #>  #> Population information: #>  #>     2 strata - Continent, Country #>     2 populations defined - South America, North America pmiss <- info_table(Pinf, type = \"ploidy\", plot = TRUE)   # No samples appear to be triploid across all loci. This will cause # several haplotypes to have a lot of missing data. p_haps <- make_haplotypes(Pinf) p_haps #> /// GENIND OBJECT ///////// #>  #>  // 203 individuals; 11 loci; 95 alleles; size: 137.9 Kb #>  #>  // Basic content #>    @tab:  203 x 95 matrix of allele counts #>    @loc.n.all: number of alleles per locus (range: 2-25) #>    @loc.fac: locus factor for the 95 columns of @tab #>    @all.names: list of allele names for each locus #>    @ploidy: ploidy of each individual  (range: 1-1) #>    @type:  codom #>    @call: df2genind(X = newdf, ploidy = 1, strata = df) #>  #>  // Optional content #>    @pop: population of each individual (group size range: 2-3) #>    @strata: a data frame with 3 columns ( Continent, Country, Individual ) head(genind2df(p_haps), n = 20) #>       pop Pi02  D13 Pi33 Pi04 Pi4B Pi16  G11 Pi56 Pi63 Pi70 Pi89 #> 2  PiCO01 <NA> <NA> <NA> <NA>  205 <NA> <NA> <NA> <NA> <NA> <NA> #> 3  PiCO01  162  136  203  166  213  178  156  174  157  192  179 #> 4  PiCO01  162  136  203  170  217  178  156  176  157  192  181 #> 6  PiCO02 <NA> <NA> <NA> <NA>  205 <NA> <NA> <NA> <NA> <NA> <NA> #> 7  PiCO02  162  132  203  166  213  178  156  174  157  192  179 #> 8  PiCO02  162  136  203  170  217  178  156  176  157  192  181 #> 10 PiCO03 <NA> <NA> <NA> <NA>  205 <NA> <NA> <NA> <NA> <NA> <NA> #> 11 PiCO03  162  136  203  166  213  178  156  174  157  192  179 #> 12 PiCO03  162  136  203  170  217  178  156  176  157  192  181 #> 14 PiCO04 <NA> <NA> <NA> <NA>  205 <NA> <NA> <NA> <NA> <NA> <NA> #> 15 PiCO04  162  136  203  166  213  178  156  174  157  192  179 #> 16 PiCO04  162  136  203  170  217  178  156  176  157  192  181 #> 19 PiCO05  160  108  203  166  213  174  156  176  157  192  181 #> 20 PiCO05  162  112  203  170  225  178  156  176  157  192  181 #> 23 PiEC01  162  134  203  166  213  178  156  174  157  192  179 #> 24 PiEC01  162  136  203  170  217  178  156  176  157  192  181 #> 26 PiEC02 <NA> <NA> <NA> <NA>  205 <NA> <NA> <NA> <NA> <NA> <NA> #> 27 PiEC02  162  136  203  166  213  178  156  174  157  192  179 #> 28 PiEC02  162  144  203  170  217  178  156  176  157  192  181 #> 31 PiEC03  162  136  203  166  205  178  156  174  157  192  179"},{"path":"/reference/missingno.html","id":null,"dir":"Reference","previous_headings":"","what":"Treat missing data ‚Äî missingno","title":"Treat missing data ‚Äî missingno","text":"missingno gives user four options deal missing data: remove loci, remove samples, replace zeroes, replace average allele counts.","code":""},{"path":"/reference/missingno.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Treat missing data ‚Äî missingno","text":"","code":"missingno(pop, type = \"loci\", cutoff = 0.05, quiet = FALSE, freq = FALSE)"},{"path":"/reference/missingno.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Treat missing data ‚Äî missingno","text":"pop genclone genind  object. type character string: can \"ignore\", \"zero\", \"mean\",  \"loci\", \"geno\" (see Details definitions). cutoff numeric. number 0 1 indicating allowable  rate missing data either genotypes loci. ignored  type values \"mean\" \"zero\". quiet TRUE, print screen action performed. freq defaults FALSE. option passed tab function. TRUE, matrix genind object replaced numeric matrix (opposed integer). RECOMMENDED. USE FUNCTION tab instead.","code":""},{"path":"/reference/missingno.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Treat missing data ‚Äî missingno","text":"genclone genind object.","code":""},{"path":"/reference/missingno.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Treat missing data ‚Äî missingno","text":"methods provide way deal systematic missing data   give wrapper adegenet's  tab function.   USED CAUTION. Using function polyploid data (missing data coded \"0\")  may give spurious results.","code":""},{"path":"/reference/missingno.html","id":"treatment-types","dir":"Reference","previous_headings":"","what":"Treatment types","title":"Treat missing data ‚Äî missingno","text":"\"ignore\" - remove replace missing data. \"loci\" - removes loci containing missing data entire  data set. \"genotype\" - removes genotypes/isolates/individuals  missing data. \"mean\" - replaces NA's mean alleles  entire data set. \"zero\" \"0\" - replaces NA's \"0\". Introduces  diversity.","code":""},{"path":"/reference/missingno.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Treat missing data ‚Äî missingno","text":"\"wild missingno appeared!\"","code":""},{"path":[]},{"path":"/reference/missingno.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Treat missing data ‚Äî missingno","text":"Zhian N. Kamvar","code":""},{"path":"/reference/missingno.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Treat missing data ‚Äî missingno","text":"","code":"data(nancycats)  nancy.locina <- missingno(nancycats, type = \"loci\") #>  #> Found 617 missing values. #>  #> 2 loci contained missing values greater than 5% #>  #> Removing 2 loci: fca8, fca45  ## Found 617 missing values. ## 2 loci contained missing values greater than 5%. ## Removing 2 loci : fca8 fca45   nancy.genona <- missingno(nancycats, type = \"geno\") #>  #> Found 617 missing values. #>  #> 38 genotypes contained missing values greater than 5% #>  #> Removing 38 genotypes: N215, N216, N188, N189, N190, N191, N192, N298, #> N299, N300, N301, N302, N303, N304, N310, N195, N197, N198, N199, N200, #> N201, N206, N182, N184, N186, N282, N283, N288, N291, N292, N293, N294, #> N295, N296, N297, N281, N289, N290  ## Found 617 missing values. ## 38 genotypes contained missing values greater than 5%. ## Removing 38 genotypes : N215 N216 N188 N189 N190 N191 N192 N302 N304 N310  ## N195 N197 N198 N199 N200 N201 N206 N182 N184 N186 N298 N299 N300 N301 N303  ## N282 N283 N288 N291 N292 N293 N294 N295 N296 N297 N281 N289 N290    # Replacing all NA with \"0\" (see tab in the adegenet package). nancy.0 <- missingno(nancycats, type = \"0\") #>  #>  Replaced 617 missing values.  ## Replaced 617 missing values   # Replacing all NA with the mean of each column (see tab in the # adegenet package). nancy.mean <- missingno(nancycats, type = \"mean\") #>  #>  Replaced 617 missing values.  ## Replaced 617 missing values"},{"path":"/reference/mlg.filter.html","id":null,"dir":"Reference","previous_headings":"","what":"MLG definitions based on genetic distance ‚Äî mlg.filter","title":"MLG definitions based on genetic distance ‚Äî mlg.filter","text":"Multilocus genotypes initially defined naive string matching, definition take account missing data genotyping error, casting unique genotypes. Defining multilocus genotypes genetic distance allows incorporate genotypes missing data o genotyping error parent clusters.","code":""},{"path":"/reference/mlg.filter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"MLG definitions based on genetic distance ‚Äî mlg.filter","text":"","code":"mlg.filter(   pop,   threshold = 0,   missing = \"asis\",   memory = FALSE,   algorithm = \"farthest_neighbor\",   distance = \"diss.dist\",   threads = 1L,   stats = \"MLGs\",   ... )  mlg.filter(   pop,   missing = \"asis\",   memory = FALSE,   algorithm = \"farthest_neighbor\",   distance = \"diss.dist\",   threads = 1L,   ... ) <- value"},{"path":"/reference/mlg.filter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"MLG definitions based on genetic distance ‚Äî mlg.filter","text":"pop genclone, snpclone, genind object. threshold number indicating minimum distance two MLGs must separated considered different. Defaults 0, reflect original (naive) MLG definition. missing method used missingno: \"mean\",  \"zero\", \"loci\", \"genotype\", \"asis\" (default). memory whether function remember last distance matrix  generated. TRUE attempt reuse last distance matrix  parameters . (default) FALSE ignore stored  matrices store generates. algorithm determines type clustering done. \"farthest_neighbor\" (default) merges clusters based    maximum distance points either cluster. strictest   three. \"nearest_neighbor\" merges clusters based minimum distance   points either cluster. loosest three. \"average_neighbor\" merges clusters based average distance   every pair points clusters. distance character function defining distance applied  pop. Defaults diss.dist genclone objects bitwise.dist snpclone objects. matrix table containing distances individuals (output  rogers.dist) also accepted parameter. threads (unused) Previously, maximum number parallel  threads used within function. Default 1 indicating function run serially. number result warning. stats character vector specifying statistics returned (details ). Choices \"MLG\", \"THRESHOLDS\", \"DISTANCES\", \"SIZES\", \"\". choosing \"\" one, named list returned. ... parameters passed distance method. value threshold genotypes collapsed.","code":""},{"path":"/reference/mlg.filter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"MLG definitions based on genetic distance ‚Äî mlg.filter","text":"Default, vector collapsed multilocus genotypes. Otherwise,   combination following:","code":""},{"path":"/reference/mlg.filter.html","id":"mlgs","dir":"Reference","previous_headings":"","what":"MLGs","title":"MLG definitions based on genetic distance ‚Äî mlg.filter","text":"numeric vector defining multilocus genotype cluster   individual dataset. genotype cluster separated every   genotype cluster least defined threshold value,    calculated selected algorithm.","code":""},{"path":"/reference/mlg.filter.html","id":"thresholds","dir":"Reference","previous_headings":"","what":"THRESHOLDS","title":"MLG definitions based on genetic distance ‚Äî mlg.filter","text":"numeric vector representing thresholds beyond clusters   multilocus genotypes collapsed.","code":""},{"path":"/reference/mlg.filter.html","id":"distances","dir":"Reference","previous_headings":"","what":"DISTANCES","title":"MLG definitions based on genetic distance ‚Äî mlg.filter","text":"square matrix representing distances cluster.","code":""},{"path":"/reference/mlg.filter.html","id":"sizes","dir":"Reference","previous_headings":"","what":"SIZES","title":"MLG definitions based on genetic distance ‚Äî mlg.filter","text":"sizes multilocus genotype clusters order.","code":""},{"path":"/reference/mlg.filter.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"MLG definitions based on genetic distance ‚Äî mlg.filter","text":"function take distance matrix function collapse multilocus genotypes given threshold. use function assignment method (mlg.filter(myData, distance = myDist) <- 0.5), distance function matrix remembered object. means define distance matrix function, must keep memory utilize mlg.filter.","code":""},{"path":"/reference/mlg.filter.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"MLG definitions based on genetic distance ‚Äî mlg.filter","text":"mlg.vector makes use mlg.vector grouping prior    applying given threshold. Genotype numbers returned   mlg.vector represent lowest numbered genotype (returned   mlg.vector) new multilocus genotype. Therefore   mlg.filter mlg.vector return vector   threshold set 0 less.","code":""},{"path":[]},{"path":"/reference/mlg.filter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"MLG definitions based on genetic distance ‚Äî mlg.filter","text":"","code":"data(partial_clone) pc <- as.genclone(partial_clone, threads = 1L) # convert to genclone object  # Basic Use ---------------------------------------------------------------   # Show MLGs at threshold 0.05 mlg.filter(pc, threshold = 0.05, distance = \"nei.dist\", threads = 1L) #>  [1]  8  7 23 24 22 21 10  3 22 11 24  7 25  4 12  2 14  1  7  7  7 26  7 13 23 #> [26]  3 17 22  6 20 22 12  5 25 13 21 15 13 13 13  2 19 18 13 23 16  1 11 25  4 pc # 26 mlgs #>  #> This is a genclone object #> ------------------------- #> Genotype information: #>  #>    26 original multilocus genotypes  #>    50 diploid individuals #>    10 codominant loci #>  #> Population information: #>  #>     0 strata.  #>     4 populations defined - 1, 2, 3, 4  # Set MLGs at threshold 0.05 mlg.filter(pc, distance = \"nei.dist\", threads = 1L) <- 0.05 pc # 25 mlgs #>  #> This is a genclone object #> ------------------------- #> Genotype information: #>  #>    25 contracted multilocus genotypes #>       (0.05) [t], (nei.dist) [d], (farthest) [a]  #>    50 diploid individuals #>    10 codominant loci #>  #> Population information: #>  #>     0 strata.  #>     4 populations defined - 1, 2, 3, 4  # \\dontrun{  # The distance definition is persistant mlg.filter(pc) <- 0.1 pc # 24 mlgs #>  #> This is a genclone object #> ------------------------- #> Genotype information: #>  #>    24 contracted multilocus genotypes #>       (0.1) [t], (nei.dist) [d], (farthest) [a]  #>    50 diploid individuals #>    10 codominant loci #>  #> Population information: #>  #>     0 strata.  #>     4 populations defined - 1, 2, 3, 4  # But you can still change the definition mlg.filter(pc, distance = \"diss.dist\", percent = TRUE) <- 0.1 pc #>  #> This is a genclone object #> ------------------------- #> Genotype information: #>  #>    25 contracted multilocus genotypes #>       (0.1) [t], (diss.dist) [d], (farthest) [a]  #>    50 diploid individuals #>    10 codominant loci #>  #> Population information: #>  #>     0 strata.  #>     4 populations defined - 1, 2, 3, 4  # Choosing a threshold ----------------------------------------------------   # Thresholds for collapsing multilocus genotypes should not be arbitrary. It # is important to consider what threshold is suitable. One method of choosing # a threshold is to find a gap in the distance distribution that represents # clonal groups. You can look at this by analyzing the distribution of all # possible thresholds with the function \"cutoff_predictor\".  # For this example, we'll use Bruvo's distance to predict the cutoff for # P. infestans.  data(Pinf) Pinf #>  #> This is a genclone object #> ------------------------- #> Genotype information: #>  #>    72 multilocus genotypes  #>    86 tetraploid individuals #>    11 codominant loci #>  #> Population information: #>  #>     2 strata - Continent, Country #>     2 populations defined - South America, North America # Repeat lengths are necessary for Bruvo's distance (pinfreps <- fix_replen(Pinf, c(2, 2, 6, 2, 2, 2, 2, 2, 3, 3, 2))) #>    Pi02     D13    Pi33    Pi04    Pi4B    Pi16     G11    Pi56    Pi63    Pi70  #> 2.00000 2.00000 6.00000 2.00000 1.99999 2.00000 2.00000 2.00000 3.00000 3.00000  #>    Pi89  #> 1.99999   # Now we can collect information of the thresholds. We can set threshold = 1 # because we know that this will capture the maximum possible distance: (thresholds <- mlg.filter(Pinf, distance = bruvo.dist, stats = \"THRESHOLDS\",                           replen = pinfreps, threshold = 1)) #>  [1] 0.01262626 0.02189867 0.02272727 0.02272727 0.03535354 0.04166667 #>  [7] 0.04261364 0.04545454 0.04699337 0.04758520 0.05681818 0.05681818 #> [13] 0.05835701 0.06451231 0.06534091 0.06818182 0.07871686 0.07954545 #> [19] 0.08772748 0.08877841 0.09375000 0.09469697 0.09722222 0.10144413 #> [25] 0.12500000 0.13099747 0.13593750 0.13740234 0.14488636 0.15000000 #> [31] 0.15656566 0.16688366 0.18115234 0.19317072 0.21022726 0.21590909 #> [37] 0.21874983 0.22561553 0.23115234 0.23295450 0.23437499 0.23532197 #> [43] 0.24147723 0.25850032 0.27201702 0.27500000 0.28338066 0.29208984 #> [49] 0.30000000 0.30042336 0.30326990 0.30549961 0.30632250 0.31325684 #> [55] 0.33639034 0.33709162 0.34089797 0.35170815 0.35619658 0.36079233 #> [61] 0.36487924 0.39646464 0.40280346 0.40332030 0.42325106 0.43731965 #> [67] 0.45436164 0.47047212 0.50827603 0.51496688 0.57474140 # We can use these thresholds to find an appropriate cutoff (pcut <- cutoff_predictor(thresholds)) #> [1] 0.1132221 mlg.filter(Pinf, distance = bruvo.dist, replen = pinfreps) <- pcut Pinf #>  #> This is a genclone object #> ------------------------- #> Genotype information: #>  #>    48 contracted multilocus genotypes #>       (0.113) [t], (bruvo.dist) [d], (farthest) [a]  #>    86 tetraploid individuals #>    11 codominant loci #>  #> Population information: #>  #>     2 strata - Continent, Country #>     2 populations defined - South America, North America  # This can also be visualized with the \"filter_stats\" function.  # Special case: threshold = 0 ---------------------------------------------   # It's important to remember that a threshold of 0 is equal to the original # MLG definition. This example will show a data set that contains genotypes # with missing data that share all alleles with other genotypes except for  # the missing one.  data(monpop) monpop # 264 mlg #>  #> This is a genclone object #> ------------------------- #> Genotype information: #>  #>    264 multilocus genotypes  #>    694 haploid individuals #>     13 codominant loci #>  #> Population information: #>  #>      1 stratum - Pop #>     12 populations defined -  #> 7_09_BB, 26_09_BB, 26_09_FR, ..., 45_10_FR, 26_11_BB, 26_11_FR mlg.filter(monpop) <- 0 nmll(monpop) # 264 mlg #> [1] 264  # In order to merge these genotypes with missing data, we should set the  # threshold to be slightly higher than 0. We will use the smallest fraction  # the computer can store.  mlg.filter(monpop) <- .Machine$double.eps ^ 0.5 nmll(monpop) # 236 mlg #> [1] 236  # Custom distance ---------------------------------------------------------  # Custom genetic distances can be used either in functions from other # packages or user-defined functions  data(Pinf) Pinf #>  #> This is a genclone object #> ------------------------- #> Genotype information: #>  #>    48 contracted multilocus genotypes #>       (0.113) [t], (bruvo.dist) [d], (farthest) [a]  #>    86 tetraploid individuals #>    11 codominant loci #>  #> Population information: #>  #>     2 strata - Continent, Country #>     2 populations defined - South America, North America mlg.filter(Pinf, distance = function(x) dist(tab(x))) <- 3 Pinf #>  #> This is a genclone object #> ------------------------- #> Genotype information: #>  #>    48 contracted multilocus genotypes #>       (3) [t], (function(x) dist(tab(x))) [d], (farthest) [a]  #>    86 tetraploid individuals #>    11 codominant loci #>  #> Population information: #>  #>     2 strata - Continent, Country #>     2 populations defined - South America, North America mlg.filter(Pinf) <- 4 Pinf #>  #> This is a genclone object #> ------------------------- #> Genotype information: #>  #>    51 contracted multilocus genotypes #>       (4) [t], (function(x) dist(tab(x))) [d], (farthest) [a]  #>    86 tetraploid individuals #>    11 codominant loci #>  #> Population information: #>  #>     2 strata - Continent, Country #>     2 populations defined - South America, North America  # genlight / snpclone objects ---------------------------------------------   set.seed(999) gc <- as.snpclone(glSim(100, 0, n.snp.struc = 1e3, ploidy = 2)) gc # 100 mlgs #>  ||| SNPCLONE OBJECT ||||||||| #>  #>  || 100 genotypes,  1,000 binary SNPs, size: 183.5 Kb #>  0 (0 %) missing data #>  #>  || Basic content #>    @gen: list of 100 SNPbin #>    @mlg: 100 original multilocus genotypes #>    @ploidy: ploidy of each individual  (range: 2-2) #>  #>  || Optional content #>    @pop: population of each individual (group size range: 50-50) #>    @other: a list containing: ancestral.pops  #>  #> NULL mlg.filter(gc) <- 0.25 gc # 82 mlgs #>  ||| SNPCLONE OBJECT ||||||||| #>  #>  || 100 genotypes,  1,000 binary SNPs, size: 183.5 Kb #>  0 (0 %) missing data #>  #>  || Basic content #>    @gen: list of 100 SNPbin #>    @mlg: 82 contracted multilocus genotypes #>          (0.25) [t], (bitwise.dist) [d], (farthest) [a] #>    @ploidy: ploidy of each individual  (range: 2-2) #>  #>  || Optional content #>    @pop: population of each individual (group size range: 50-50) #>    @other: a list containing: ancestral.pops  #>  #> NULL  # }"},{"path":"/reference/mlg.html","id":null,"dir":"Reference","previous_headings":"","what":"Create counts, vectors, and matrices of multilocus genotypes. ‚Äî mlg","title":"Create counts, vectors, and matrices of multilocus genotypes. ‚Äî mlg","text":"Create counts, vectors, matrices multilocus genotypes.","code":""},{"path":"/reference/mlg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create counts, vectors, and matrices of multilocus genotypes. ‚Äî mlg","text":"","code":"mlg(gid, quiet = FALSE)  mlg.table(   gid,   strata = NULL,   sublist = \"ALL\",   exclude = NULL,   blacklist = NULL,   mlgsub = NULL,   bar = TRUE,   plot = TRUE,   total = FALSE,   color = FALSE,   background = FALSE,   quiet = FALSE )  mlg.vector(gid, reset = FALSE)  mlg.crosspop(   gid,   strata = NULL,   sublist = \"ALL\",   exclude = NULL,   blacklist = NULL,   mlgsub = NULL,   indexreturn = FALSE,   df = FALSE,   quiet = FALSE )  mlg.id(gid)"},{"path":"/reference/mlg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create counts, vectors, and matrices of multilocus genotypes. ‚Äî mlg","text":"gid adegenet::genind, genclone, adegenet::genlight, snpclone object. quiet Logical. FALSE, progress functions printed screen. strata formula specifying strata computation performed. sublist vector population names indices user wishes keep. Default \"\". exclude vector population names indexes user wishes discard. Default NULL. blacklist DEPRECATED, use exclude. mlgsub vector multilocus genotype indices subset mlg.table mlg.crosspop. NOTE: resulting table mlg.table contain countries MLGs bar deprecated. plot. Retained compatibility. plot logical TRUE, bar graph population displayed showing relative abundance MLG within population. total logical TRUE, row containing sum represented MLGs appended matrix produced mlg.table. color option display single barchart mlg.table, colored population (note, becomes facetted `background = TRUE`). background option display total number MLGs across populations per facet background plot. reset logical. genclone objects, MLGs defined input data, change less information added (.e. loci dropped). Setting `reset = TRUE` recalculate MLGs. Default `FALSE`, returning MLGs defined @mlg slot. indexreturn logical TRUE, vector returned index columns mlg.table. df logical TRUE, return data frame containing counts MLGs countries . Useful making graphs ggplot.","code":""},{"path":[]},{"path":"/reference/mlg.html","id":"mlg","dir":"Reference","previous_headings":"","what":"mlg","title":"Create counts, vectors, and matrices of multilocus genotypes. ‚Äî mlg","text":"integer describing number multilocus genotypes observed.","code":""},{"path":"/reference/mlg.html","id":"mlg-table","dir":"Reference","previous_headings":"","what":"mlg.table","title":"Create counts, vectors, and matrices of multilocus genotypes. ‚Äî mlg","text":"matrix columns indicating unique multilocus genotypes rows indicating populations. table can used funciton diversity_stats calculate Shannon-Weaver index (H), Stoddart Taylor's index (aka inverse Simpson's index; G), Simpson's index (lambda), evenness (E5).","code":""},{"path":"/reference/mlg.html","id":"mlg-vector","dir":"Reference","previous_headings":"","what":"mlg.vector","title":"Create counts, vectors, and matrices of multilocus genotypes. ‚Äî mlg","text":"numeric vector naming multilocus genotype individual dataset.","code":""},{"path":"/reference/mlg.html","id":"mlg-crosspop","dir":"Reference","previous_headings":"","what":"mlg.crosspop","title":"Create counts, vectors, and matrices of multilocus genotypes. ‚Äî mlg","text":"default list element contains named integer vector representing number individuals represented population MLG indexreturn = TRUE vector integers defining multilocus genotypes individuals crossing populations df = TRUE long form data frame columns: MLG, Population, Count. Useful graphing ggplot2","code":""},{"path":"/reference/mlg.html","id":"mlg-id","dir":"Reference","previous_headings":"","what":"mlg.id","title":"Create counts, vectors, and matrices of multilocus genotypes. ‚Äî mlg","text":"list multilocus genotypes associated individual names per MLG.","code":""},{"path":"/reference/mlg.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create counts, vectors, and matrices of multilocus genotypes. ‚Äî mlg","text":"Multilocus genotypes unique combination alleles across loci. details calculated see vignette(\"mlg\", package = \"poppr\"). short, genind genclone objects, calculated using rank function strings alleles, sensitive missing data. genlight snpclone objects, calculated distance methods via bitwise.dist mlg.filter, means insensitive missing data. Three different types MLGs can defined poppr: original default definition multilocus genotypes detailed contracted multilocus genotypes collapsed multilocus lineages (mll) genetic distance via mlg.filter custom user-defined multilocus genotypes. useful information mycelial compatibility groups functions documented work MLG types defined poppr","code":""},{"path":"/reference/mlg.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Create counts, vectors, and matrices of multilocus genotypes. ‚Äî mlg","text":"resulting matrix `mlg.table` can used analysis  vegan package. mlg.vector recalculate mlg vector   [adegenet::genind] objects return contents mlg   slot [genclone][genclone-class] objects. means MLGs   different subsetted [adegenet::genind] objects.","code":""},{"path":[]},{"path":"/reference/mlg.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create counts, vectors, and matrices of multilocus genotypes. ‚Äî mlg","text":"Zhian N. Kamvar","code":""},{"path":"/reference/mlg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create counts, vectors, and matrices of multilocus genotypes. ‚Äî mlg","text":"","code":"# Load the data set data(Aeut)  # Investigate the number of multilocus genotypes. amlg <- mlg(Aeut) #> ############################# #> # Number of Individuals:  187  #> # Number of MLG:  119  #> ############################# amlg # 119 #> [1] 119  # show the multilocus genotype vector  avec <- mlg.vector(Aeut) avec  #>   [1]  63  53  17  16  26  42   8  17  16  93  94 112  44 118  51 113  45 110 #>  [19] 114   7 111  20  20  20  20  30  20  20  20  20  20  28  66  66  68  66 #>  [37]  67  23  66  65  66  57  22 119  36  35  36  35  62  35  34  52  33  63 #>  [55]   1  39  59  61  23  21  47  48  25  50  32  49  60   9  10  60  27  13 #>  [73]  11  14  12  14  14  29  15  13  32  41  43  24  46  52  38  37  31  24 #>  [91]  40  31 109  19  18  64 108  86  82  83   2   6   2  91 117 116  80  80 #> [109]  58   5   3   4  56  84  54  73  80  89 106  80  80  80  88  70  76  70 #> [127]  70  90 104  81  70  92  70  75  75  99  75  96  74  74  74  75  98  96 #> [145]  69  69  75  69  69 100  55  72 105  72 115  71  85  87  59  77 107  76 #> [163]  90  80  99  88  80  77  78  77  87  80  91 101  79 102  78 103 103  95 #> [181]  97  81  80  97  97  97 101  # Get a table atab <- mlg.table(Aeut, color = TRUE)  atab #>            MLG.1 MLG.2 MLG.3 MLG.4 MLG.5 MLG.6 MLG.7 MLG.8 MLG.9 MLG.10 MLG.11 #> Athena         1     0     0     0     0     0     1     1     1      1      1 #> Mt. Vernon     0     2     1     1     1     1     0     0     0      0      0 #>            MLG.12 MLG.13 MLG.14 MLG.15 MLG.16 MLG.17 MLG.18 MLG.19 MLG.20 #> Athena          1      2      3      1      2      2      1      1      9 #> Mt. Vernon      0      0      0      0      0      0      0      0      0 #>            MLG.21 MLG.22 MLG.23 MLG.24 MLG.25 MLG.26 MLG.27 MLG.28 MLG.29 #> Athena          1      1      2      2      1      1      1      1      1 #> Mt. Vernon      0      0      0      0      0      0      0      0      0 #>            MLG.30 MLG.31 MLG.32 MLG.33 MLG.34 MLG.35 MLG.36 MLG.37 MLG.38 #> Athena          1      2      2      1      1      3      2      1      1 #> Mt. Vernon      0      0      0      0      0      0      0      0      0 #>            MLG.39 MLG.40 MLG.41 MLG.42 MLG.43 MLG.44 MLG.45 MLG.46 MLG.47 #> Athena          1      1      1      1      1      1      1      1      1 #> Mt. Vernon      0      0      0      0      0      0      0      0      0 #>            MLG.48 MLG.49 MLG.50 MLG.51 MLG.52 MLG.53 MLG.54 MLG.55 MLG.56 #> Athena          1      1      1      1      2      1      0      0      0 #> Mt. Vernon      0      0      0      0      0      0      1      1      1 #>            MLG.57 MLG.58 MLG.59 MLG.60 MLG.61 MLG.62 MLG.63 MLG.64 MLG.65 #> Athena          1      0      1      2      1      1      2      1      1 #> Mt. Vernon      0      1      1      0      0      0      0      0      0 #>            MLG.66 MLG.67 MLG.68 MLG.69 MLG.70 MLG.71 MLG.72 MLG.73 MLG.74 #> Athena          5      1      1      0      0      0      0      0      0 #> Mt. Vernon      0      0      0      4      5      1      2      1      3 #>            MLG.75 MLG.76 MLG.77 MLG.78 MLG.79 MLG.80 MLG.81 MLG.82 MLG.83 #> Athena          0      0      0      0      0      0      0      0      0 #> Mt. Vernon      5      2      3      2      1     10      2      1      1 #>            MLG.84 MLG.85 MLG.86 MLG.87 MLG.88 MLG.89 MLG.90 MLG.91 MLG.92 #> Athena          0      0      0      0      0      0      0      0      0 #> Mt. Vernon      1      1      1      2      2      1      2      2      1 #>            MLG.93 MLG.94 MLG.95 MLG.96 MLG.97 MLG.98 MLG.99 MLG.100 MLG.101 #> Athena          1      1      0      0      0      0      0       0       0 #> Mt. Vernon      0      0      1      2      4      1      2       1       2 #>            MLG.102 MLG.103 MLG.104 MLG.105 MLG.106 MLG.107 MLG.108 MLG.109 #> Athena           0       0       0       0       0       0       1       1 #> Mt. Vernon       1       2       1       1       1       1       0       0 #>            MLG.110 MLG.111 MLG.112 MLG.113 MLG.114 MLG.115 MLG.116 MLG.117 #> Athena           1       1       1       1       1       0       0       0 #> Mt. Vernon       0       0       0       0       0       1       1       1 #>            MLG.118 MLG.119 #> Athena           1       1 #> Mt. Vernon       0       0  # See where multilocus genotypes cross populations acrs <- mlg.crosspop(Aeut) # MLG.59: (2 inds) Athena Mt. Vernon #> MLG.59: (2 inds) Athena Mt. Vernon  # See which individuals belong to each MLG aid <- mlg.id(Aeut) aid[\"59\"] # individuals 159 and 57 #> $`59` #> [1] \"057\" \"159\" #>   # \\dontrun{  # For the mlg.table, you can also choose to display the number of MLGs across # populations in the background  mlg.table(Aeut, background = TRUE)  #>            MLG.1 MLG.2 MLG.3 MLG.4 MLG.5 MLG.6 MLG.7 MLG.8 MLG.9 MLG.10 MLG.11 #> Athena         1     0     0     0     0     0     1     1     1      1      1 #> Mt. Vernon     0     2     1     1     1     1     0     0     0      0      0 #>            MLG.12 MLG.13 MLG.14 MLG.15 MLG.16 MLG.17 MLG.18 MLG.19 MLG.20 #> Athena          1      2      3      1      2      2      1      1      9 #> Mt. Vernon      0      0      0      0      0      0      0      0      0 #>            MLG.21 MLG.22 MLG.23 MLG.24 MLG.25 MLG.26 MLG.27 MLG.28 MLG.29 #> Athena          1      1      2      2      1      1      1      1      1 #> Mt. Vernon      0      0      0      0      0      0      0      0      0 #>            MLG.30 MLG.31 MLG.32 MLG.33 MLG.34 MLG.35 MLG.36 MLG.37 MLG.38 #> Athena          1      2      2      1      1      3      2      1      1 #> Mt. Vernon      0      0      0      0      0      0      0      0      0 #>            MLG.39 MLG.40 MLG.41 MLG.42 MLG.43 MLG.44 MLG.45 MLG.46 MLG.47 #> Athena          1      1      1      1      1      1      1      1      1 #> Mt. Vernon      0      0      0      0      0      0      0      0      0 #>            MLG.48 MLG.49 MLG.50 MLG.51 MLG.52 MLG.53 MLG.54 MLG.55 MLG.56 #> Athena          1      1      1      1      2      1      0      0      0 #> Mt. Vernon      0      0      0      0      0      0      1      1      1 #>            MLG.57 MLG.58 MLG.59 MLG.60 MLG.61 MLG.62 MLG.63 MLG.64 MLG.65 #> Athena          1      0      1      2      1      1      2      1      1 #> Mt. Vernon      0      1      1      0      0      0      0      0      0 #>            MLG.66 MLG.67 MLG.68 MLG.69 MLG.70 MLG.71 MLG.72 MLG.73 MLG.74 #> Athena          5      1      1      0      0      0      0      0      0 #> Mt. Vernon      0      0      0      4      5      1      2      1      3 #>            MLG.75 MLG.76 MLG.77 MLG.78 MLG.79 MLG.80 MLG.81 MLG.82 MLG.83 #> Athena          0      0      0      0      0      0      0      0      0 #> Mt. Vernon      5      2      3      2      1     10      2      1      1 #>            MLG.84 MLG.85 MLG.86 MLG.87 MLG.88 MLG.89 MLG.90 MLG.91 MLG.92 #> Athena          0      0      0      0      0      0      0      0      0 #> Mt. Vernon      1      1      1      2      2      1      2      2      1 #>            MLG.93 MLG.94 MLG.95 MLG.96 MLG.97 MLG.98 MLG.99 MLG.100 MLG.101 #> Athena          1      1      0      0      0      0      0       0       0 #> Mt. Vernon      0      0      1      2      4      1      2       1       2 #>            MLG.102 MLG.103 MLG.104 MLG.105 MLG.106 MLG.107 MLG.108 MLG.109 #> Athena           0       0       0       0       0       0       1       1 #> Mt. Vernon       1       2       1       1       1       1       0       0 #>            MLG.110 MLG.111 MLG.112 MLG.113 MLG.114 MLG.115 MLG.116 MLG.117 #> Athena           1       1       1       1       1       0       0       0 #> Mt. Vernon       0       0       0       0       0       1       1       1 #>            MLG.118 MLG.119 #> Athena           1       1 #> Mt. Vernon       0       0 mlg.table(Aeut, background = TRUE, color = TRUE)  #>            MLG.1 MLG.2 MLG.3 MLG.4 MLG.5 MLG.6 MLG.7 MLG.8 MLG.9 MLG.10 MLG.11 #> Athena         1     0     0     0     0     0     1     1     1      1      1 #> Mt. Vernon     0     2     1     1     1     1     0     0     0      0      0 #>            MLG.12 MLG.13 MLG.14 MLG.15 MLG.16 MLG.17 MLG.18 MLG.19 MLG.20 #> Athena          1      2      3      1      2      2      1      1      9 #> Mt. Vernon      0      0      0      0      0      0      0      0      0 #>            MLG.21 MLG.22 MLG.23 MLG.24 MLG.25 MLG.26 MLG.27 MLG.28 MLG.29 #> Athena          1      1      2      2      1      1      1      1      1 #> Mt. Vernon      0      0      0      0      0      0      0      0      0 #>            MLG.30 MLG.31 MLG.32 MLG.33 MLG.34 MLG.35 MLG.36 MLG.37 MLG.38 #> Athena          1      2      2      1      1      3      2      1      1 #> Mt. Vernon      0      0      0      0      0      0      0      0      0 #>            MLG.39 MLG.40 MLG.41 MLG.42 MLG.43 MLG.44 MLG.45 MLG.46 MLG.47 #> Athena          1      1      1      1      1      1      1      1      1 #> Mt. Vernon      0      0      0      0      0      0      0      0      0 #>            MLG.48 MLG.49 MLG.50 MLG.51 MLG.52 MLG.53 MLG.54 MLG.55 MLG.56 #> Athena          1      1      1      1      2      1      0      0      0 #> Mt. Vernon      0      0      0      0      0      0      1      1      1 #>            MLG.57 MLG.58 MLG.59 MLG.60 MLG.61 MLG.62 MLG.63 MLG.64 MLG.65 #> Athena          1      0      1      2      1      1      2      1      1 #> Mt. Vernon      0      1      1      0      0      0      0      0      0 #>            MLG.66 MLG.67 MLG.68 MLG.69 MLG.70 MLG.71 MLG.72 MLG.73 MLG.74 #> Athena          5      1      1      0      0      0      0      0      0 #> Mt. Vernon      0      0      0      4      5      1      2      1      3 #>            MLG.75 MLG.76 MLG.77 MLG.78 MLG.79 MLG.80 MLG.81 MLG.82 MLG.83 #> Athena          0      0      0      0      0      0      0      0      0 #> Mt. Vernon      5      2      3      2      1     10      2      1      1 #>            MLG.84 MLG.85 MLG.86 MLG.87 MLG.88 MLG.89 MLG.90 MLG.91 MLG.92 #> Athena          0      0      0      0      0      0      0      0      0 #> Mt. Vernon      1      1      1      2      2      1      2      2      1 #>            MLG.93 MLG.94 MLG.95 MLG.96 MLG.97 MLG.98 MLG.99 MLG.100 MLG.101 #> Athena          1      1      0      0      0      0      0       0       0 #> Mt. Vernon      0      0      1      2      4      1      2       1       2 #>            MLG.102 MLG.103 MLG.104 MLG.105 MLG.106 MLG.107 MLG.108 MLG.109 #> Athena           0       0       0       0       0       0       1       1 #> Mt. Vernon       1       2       1       1       1       1       0       0 #>            MLG.110 MLG.111 MLG.112 MLG.113 MLG.114 MLG.115 MLG.116 MLG.117 #> Athena           1       1       1       1       1       0       0       0 #> Mt. Vernon       0       0       0       0       0       1       1       1 #>            MLG.118 MLG.119 #> Athena           1       1 #> Mt. Vernon       0       0  # A simple example. 10 individuals, 5 genotypes. mat1 <- matrix(ncol=5, 25:1) mat1 <- rbind(mat1, mat1) mat <- matrix(nrow=10, ncol=5, paste(mat1,mat1,sep=\"/\")) mat.gid <- df2genind(mat, sep=\"/\") mlg(mat.gid) #> ############################# #> # Number of Individuals:  10  #> # Number of MLG:  5  #> ############################# #> [1] 5 mlg.vector(mat.gid) #>  [1] 5 4 3 2 1 5 4 3 2 1 mlg.table(mat.gid)  #>       MLG.1 MLG.2 MLG.3 MLG.4 MLG.5 #> Total     2     2     2     2     2  # Now for a more complicated example. # Data set of 1903 samples of the H3N2 flu virus genotyped at 125 SNP loci. data(H3N2) mlg(H3N2, quiet = FALSE) #> ############################# #> # Number of Individuals:  1903  #> # Number of MLG:  752  #> ############################# #> [1] 752  H.vec <- mlg.vector(H3N2)  # Changing the population vector to indicate the years of each epidemic. pop(H3N2) <- other(H3N2)$x$country H.tab <- mlg.table(H3N2, plot = FALSE, total = TRUE)  # Show which genotypes exist accross populations in the entire dataset. res <- mlg.crosspop(H3N2, quiet = FALSE) #> MLG.3: (12 inds) USA Denmark #> MLG.9: (16 inds) Japan USA Finland Denmark #> MLG.31: (9 inds) Japan Canada #> MLG.75: (23 inds) Japan USA Finland Norway Denmark Austria Russia Ireland #> MLG.80: (2 inds) USA Denmark #> MLG.86: (7 inds) Denmark Austria #> MLG.95: (2 inds) USA Bangladesh #> MLG.97: (8 inds) USA Austria Bangladesh Romania #> MLG.104: (3 inds) USA France #> MLG.110: (16 inds) Japan USA China #> MLG.119: (5 inds) USA Canada #> MLG.149: (2 inds) China Denmark #> MLG.158: (11 inds) Japan USA China South Korea Austria Bangladesh #> MLG.163: (2 inds) China Taiwan #> MLG.205: (2 inds) USA Canada #> MLG.206: (8 inds) USA Taiwan Austria #> MLG.207: (2 inds) USA Norway #> MLG.210: (3 inds) Austria Slovenia #> MLG.213: (19 inds) Japan USA United Kingdom Canada #> MLG.221: (3 inds) Japan USA #> MLG.224: (32 inds) Japan China Mongolia #> MLG.227: (4 inds) Japan USA Canada #> MLG.234: (62 inds) Japan USA China France Canada Russia #> MLG.241: (7 inds) Japan USA China #> MLG.244: (3 inds) Japan USA #> MLG.246: (41 inds) Japan USA China Norway Austria Russia Egypt Iceland Nepal  #> Switzerland #> MLG.252: (3 inds) USA France #> MLG.253: (34 inds) Japan USA Finland China South Korea Norway Taiwan Austria  #> Nepal #> MLG.258: (3 inds) USA China #> MLG.274: (10 inds) Japan USA Austria Russia Ukraine #> MLG.277: (4 inds) USA Austria Russia #> MLG.283: (3 inds) Austria Italy Spain #> MLG.285: (2 inds) China South Korea #> MLG.290: (3 inds) USA Sweden Croatia #> MLG.291: (4 inds) USA Sweden #> MLG.314: (8 inds) Japan USA #> MLG.315: (7 inds) Japan Norway United Kingdom #> MLG.317: (5 inds) Japan Norway Germany #> MLG.321: (25 inds) Japan China #> MLG.325: (3 inds) Japan Austria #> MLG.326: (11 inds) Japan Austria #> MLG.334: (4 inds) USA France #> MLG.344: (8 inds) Japan Austria #> MLG.350: (24 inds) USA Norway #> MLG.368: (5 inds) Japan USA China #> MLG.370: (4 inds) Japan South Korea #> MLG.381: (3 inds) Japan Russia Ukraine #> MLG.401: (41 inds) Japan USA Taiwan #> MLG.405: (10 inds) USA South Korea Norway #> MLG.417: (10 inds) Japan USA Norway France Algeria #> MLG.439: (2 inds) Japan USA #> MLG.453: (19 inds) USA Austria #> MLG.461: (3 inds) USA Egypt Ireland #> MLG.471: (3 inds) USA Taiwan #> MLG.508: (8 inds) Japan USA South Korea #> MLG.529: (34 inds) Japan USA China Canada Russia #> MLG.530: (4 inds) Japan China Austria #> MLG.540: (4 inds) Japan China South Korea #> MLG.548: (3 inds) Japan South Korea #> MLG.552: (2 inds) Japan Nepal #> MLG.556: (8 inds) Japan USA #> MLG.570: (7 inds) USA Norway #> MLG.578: (7 inds) USA Austria #> MLG.580: (8 inds) USA Finland #> MLG.582: (19 inds) USA Italy #> MLG.589: (2 inds) USA Germany #> MLG.597: (2 inds) Japan Bulgaria #> MLG.605: (9 inds) Japan USA Austria #> MLG.611: (3 inds) Latvia Romania #> MLG.615: (21 inds) Japan USA #> MLG.619: (3 inds) Austria Iceland #> MLG.620: (10 inds) Norway Austria Germany Greece #> MLG.621: (2 inds) Austria Italy  # Let's say we want to visualize the multilocus genotype distribution for the # USA and Russia mlg.table(H3N2, sublist = c(\"USA\", \"Russia\"), bar=TRUE) #> Warning: In poppr version 2.0, bar is deprecated. Please use plot.  #>        MLG.2 MLG.3 MLG.4 MLG.5 MLG.9 MLG.11 MLG.12 MLG.13 MLG.17 MLG.19 MLG.20 #> USA        2     4     1     1    13      2      1      1      4      1      1 #> Russia     0     0     0     0     0      0      0      0      0      0      0 #>        MLG.21 MLG.22 MLG.23 MLG.41 MLG.42 MLG.43 MLG.44 MLG.49 MLG.51 MLG.56 #> USA         1      1      2      1      1      1      1      1      1      1 #> Russia      0      0      0      0      0      0      0      0      0      0 #>        MLG.57 MLG.59 MLG.60 MLG.73 MLG.75 MLG.80 MLG.93 MLG.95 MLG.97 MLG.102 #> USA         1      2      1      1      8      1      1      1      1       1 #> Russia      0      0      0      0      1      0      0      0      0       0 #>        MLG.104 MLG.106 MLG.107 MLG.110 MLG.116 MLG.118 MLG.119 MLG.121 MLG.122 #> USA          1       1       2       3       0       2       4       2       1 #> Russia       0       0       0       0       1       0       0       0       0 #>        MLG.125 MLG.127 MLG.128 MLG.130 MLG.131 MLG.132 MLG.133 MLG.136 MLG.152 #> USA          2       1       1      35       2       1       1       1       0 #> Russia       0       0       0       0       0       0       0       0       1 #>        MLG.153 MLG.157 MLG.158 MLG.159 MLG.160 MLG.164 MLG.168 MLG.176 MLG.179 #> USA          2       1       1       1       1       2       1       2       1 #> Russia       0       0       0       0       0       0       0       0       0 #>        MLG.183 MLG.184 MLG.185 MLG.186 MLG.187 MLG.189 MLG.190 MLG.191 MLG.192 #> USA          3       4       1       2       1       1       1       1       1 #> Russia       0       0       0       0       0       0       0       0       0 #>        MLG.193 MLG.194 MLG.201 MLG.202 MLG.203 MLG.205 MLG.206 MLG.207 MLG.208 #> USA          1       3       1       3       1       1       6       1       1 #> Russia       0       0       0       0       0       0       0       0       0 #>        MLG.212 MLG.213 MLG.214 MLG.216 MLG.218 MLG.220 MLG.221 MLG.222 MLG.227 #> USA          1      15       1       1       1      29       2       1       1 #> Russia       0       0       0       0       0       0       0       0       0 #>        MLG.228 MLG.234 MLG.236 MLG.237 MLG.241 MLG.243 MLG.244 MLG.246 MLG.251 #> USA          1       9       2       2       3       1       1       8       1 #> Russia       0       1       0       0       0       0       0       1       0 #>        MLG.252 MLG.253 MLG.255 MLG.257 MLG.258 MLG.259 MLG.260 MLG.263 MLG.264 #> USA          2      14       1       2       2       1      14       1       5 #> Russia       0       0       0       0       0       0       0       0       0 #>        MLG.267 MLG.268 MLG.269 MLG.272 MLG.274 MLG.277 MLG.279 MLG.289 MLG.290 #> USA          2       1       1       1       1       2       1       4       1 #> Russia       0       0       0       0       2       1       0       0       0 #>        MLG.291 MLG.293 MLG.297 MLG.298 MLG.299 MLG.305 MLG.306 MLG.307 MLG.309 #> USA          3       1       1       1       1       1       1       0       1 #> Russia       0       0       0       0       0       0       0       1       0 #>        MLG.314 MLG.333 MLG.334 MLG.349 MLG.350 MLG.351 MLG.368 MLG.378 MLG.381 #> USA          1       1       3       1      23       1       1       0       0 #> Russia       0       0       0       0       0       0       0       1       1 #>        MLG.386 MLG.388 MLG.390 MLG.391 MLG.392 MLG.393 MLG.395 MLG.398 MLG.399 #> USA          1       1       2       1       1       1       1       1       2 #> Russia       0       0       0       0       0       0       0       0       0 #>        MLG.401 MLG.404 MLG.405 MLG.407 MLG.414 MLG.415 MLG.416 MLG.417 MLG.418 #> USA         23       3       6       1       2       1       1       4       1 #> Russia       0       0       0       0       0       0       0       0       0 #>        MLG.419 MLG.421 MLG.422 MLG.425 MLG.426 MLG.427 MLG.430 MLG.439 MLG.443 #> USA          0       1       1       2       1       1       1       1       1 #> Russia       1       0       0       0       0       0       0       0       0 #>        MLG.444 MLG.446 MLG.447 MLG.448 MLG.449 MLG.450 MLG.451 MLG.453 MLG.454 #> USA          1       1       2       3      17       1       1      18       5 #> Russia       0       0       0       0       0       0       0       0       0 #>        MLG.455 MLG.456 MLG.457 MLG.458 MLG.459 MLG.460 MLG.461 MLG.462 MLG.463 #> USA         13       1       4       3       1       1       1       1       2 #> Russia       0       0       0       0       0       0       0       0       0 #>        MLG.464 MLG.465 MLG.466 MLG.467 MLG.468 MLG.470 MLG.471 MLG.472 MLG.473 #> USA          3       1       1       1       2       1       2       1       4 #> Russia       0       0       0       0       0       0       0       0       0 #>        MLG.474 MLG.475 MLG.478 MLG.484 MLG.487 MLG.499 MLG.506 MLG.507 MLG.508 #> USA          1       3       0       0       1       1       1       2       2 #> Russia       0       0       1       3       0       0       0       0       0 #>        MLG.509 MLG.510 MLG.511 MLG.512 MLG.516 MLG.517 MLG.518 MLG.519 MLG.522 #> USA          1       1       1       1       1       2       1       1       2 #> Russia       0       0       0       0       0       0       0       0       0 #>        MLG.523 MLG.529 MLG.538 MLG.546 MLG.549 MLG.550 MLG.555 MLG.556 MLG.561 #> USA          1       3       1       2       1       1       1       1       1 #> Russia       0       1       0       0       0       0       0       0       0 #>        MLG.564 MLG.566 MLG.567 MLG.568 MLG.569 MLG.570 MLG.571 MLG.572 MLG.574 #> USA          1       1       1       1       4       6       1       1       1 #> Russia       0       0       0       0       0       0       0       0       0 #>        MLG.576 MLG.577 MLG.578 MLG.579 MLG.580 MLG.581 MLG.582 MLG.585 MLG.586 #> USA          4       1       1       1       5       1      18       1       4 #> Russia       0       0       0       0       0       0       0       0       0 #>        MLG.588 MLG.589 MLG.591 MLG.592 MLG.593 MLG.599 MLG.601 MLG.602 MLG.605 #> USA          2       1       1       1       1       2       3       1       1 #> Russia       0       0       0       0       0       0       0       0       0 #>        MLG.610 MLG.612 MLG.613 MLG.614 MLG.615 MLG.616 MLG.617 MLG.618 MLG.623 #> USA          2       1       1       6      20       1       1       1       1 #> Russia       0       0       0       0       0       0       0       0       0 #>        MLG.624 MLG.627 MLG.628 MLG.629 MLG.631 MLG.632 MLG.633 MLG.634 MLG.639 #> USA          1       1       1       1       1       1       1       1       2 #> Russia       0       0       0       0       0       0       0       0       0 #>        MLG.640 MLG.641 MLG.653 MLG.659 MLG.669 MLG.686 #> USA          1       1       1       1       1       1 #> Russia       0       0       0       0       0       0  # An exercise in subsetting the output of mlg.table and mlg.vector. # First, get the indices of each MLG duplicated across populations. inds <- mlg.crosspop(H3N2, quiet = FALSE, indexreturn = TRUE)  # Since the columns of the table from mlg.table are equal to the number of # MLGs, we can subset with just the columns. H.sub <- H.tab[, inds]  # We can also do the same by using the mlgsub flag. H.sub <- mlg.table(H3N2, mlgsub = inds)   # We can subset the original data set using the output of mlg.vector to # analyze only the MLGs that are duplicated across populations.  new.H <- H3N2[H.vec %in% inds, ]  # }"},{"path":"/reference/mll-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Access and manipulate multilocus lineages. ‚Äî mll","title":"Access and manipulate multilocus lineages. ‚Äî mll","text":"following methods allow user access manipulate multilocus  lineages genclone snpclone objects.","code":""},{"path":"/reference/mll-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Access and manipulate multilocus lineages. ‚Äî mll","text":"","code":"mll(x, type = NULL)  nmll(x, type = NULL)  mll(x) <- value"},{"path":"/reference/mll-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Access and manipulate multilocus lineages. ‚Äî mll","text":"x genclone snpclone object. type character specifying \"original\", \"contracted\", \"custom\" defining type mlgs return. Defaults set object. value character specifying mlg type visible object. See details.","code":""},{"path":"/reference/mll-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Access and manipulate multilocus lineages. ‚Äî mll","text":"object type x.","code":""},{"path":"/reference/mll-method.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Access and manipulate multilocus lineages. ‚Äî mll","text":"genclone snpclone objects   slot internal class object called MLG. class   allows storage flexible mll definitions: \"original\"   - naive mlgs defined string comparison. default. \"contracted\" - mlgs defined genetic distance threshold. \"custom\"   - user-defined MLGs","code":""},{"path":[]},{"path":"/reference/mll-method.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Access and manipulate multilocus lineages. ‚Äî mll","text":"Zhian N. Kamvar","code":""},{"path":"/reference/mll-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Access and manipulate multilocus lineages. ‚Äî mll","text":"","code":"data(partial_clone) pc <- as.genclone(partial_clone) mll(pc) #>  [1]  8  9 23 24 22 21 10  3 22 11 24  9 25  4 12  2 14  1  9  9  9 26  7 13 23 #> [26]  3 17 22  6 20 22 12  5 25 13 21 15 13 13 13  2 19 18 13 23 16  1 11 25  4 mll(pc) <- \"custom\" mll(pc) #>  [1] 8  9  23 24 22 21 10 3  22 11 24 9  25 4  12 2  14 1  9  9  9  26 7  13 23 #> [26] 3  17 22 6  20 22 12 5  25 13 21 15 13 13 13 2  19 18 13 23 16 1  11 25 4  #> 26 Levels: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 ... 26 mll.levels(pc) <- LETTERS mll(pc) #>  [1] H I W X V U J C V K X I Y D L B N A I I I Z G M W C Q V F T V L E Y M U O M #> [39] M M B S R M W P A K Y D #> Levels: A B C D E F G H I J K L M N O P Q R S T U V W X Y Z"},{"path":"/reference/mll.custom.html","id":null,"dir":"Reference","previous_headings":"","what":"Define custom multilocus lineages ‚Äî mll.custom","title":"Define custom multilocus lineages ‚Äî mll.custom","text":"function allow define custom multilocus lineages data set.","code":""},{"path":"/reference/mll.custom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define custom multilocus lineages ‚Äî mll.custom","text":"","code":"mll.custom(x, set = TRUE, value)  mll.custom(x, set = TRUE) <- value  mll.levels(x, set = TRUE, value)  mll.levels(x, set = TRUE) <- value"},{"path":"/reference/mll.custom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define custom multilocus lineages ‚Äî mll.custom","text":"x genclone snpclone object. set logical. TRUE (default), visible mlls set 'custom'. value vector defines multilocus lineages data. can vector ANYTHING can turned factor.","code":""},{"path":"/reference/mll.custom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Define custom multilocus lineages ‚Äî mll.custom","text":"object type x","code":""},{"path":[]},{"path":"/reference/mll.custom.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Define custom multilocus lineages ‚Äî mll.custom","text":"Zhian N. Kamvar","code":""},{"path":"/reference/mll.custom.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Define custom multilocus lineages ‚Äî mll.custom","text":"","code":"data(partial_clone) pc <- as.genclone(partial_clone) mll.custom(pc) <- LETTERS[mll(pc)] mll(pc) #>  [1] H I W X V U J C V K X I Y D L B N A I I I Z G M W C Q V F T V L E Y M U O M #> [39] M M B S R M W P A K Y D #> Levels: A B C D E F G H I J K L M N O P Q R S T U V W X Y Z  # Let's say we had a mistake and the A mlg was actually B.  mll.levels(pc)[mll.levels(pc) == \"A\"] <- \"B\" mll(pc) #>  [1] H I W X V U J C V K X I Y D L B N B I I I Z G M W C Q V F T V L E Y M U O M #> [39] M M B S R M W P B K Y D #> Levels: B C D E F G H I J K L M N O P Q R S T U V W X Y Z  # Set the MLL back to the original definition. mll(pc) <- \"original\" mll(pc) #>  [1]  8  9 23 24 22 21 10  3 22 11 24  9 25  4 12  2 14  1  9  9  9 26  7 13 23 #> [26]  3 17 22  6 20 22 12  5 25 13 21 15 13 13 13  2 19 18 13 23 16  1 11 25  4"},{"path":"/reference/mll.reset-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Reset multilocus lineages ‚Äî mll.reset","title":"Reset multilocus lineages ‚Äî mll.reset","text":"function allow reset multilocus lineages data set.","code":""},{"path":"/reference/mll.reset-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reset multilocus lineages ‚Äî mll.reset","text":"","code":"mll.reset(x, value)"},{"path":"/reference/mll.reset-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reset multilocus lineages ‚Äî mll.reset","text":"x genclone snpclone object. value character vector specifies levels wish  reset.","code":""},{"path":"/reference/mll.reset-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reset multilocus lineages ‚Äî mll.reset","text":"object type x","code":""},{"path":"/reference/mll.reset-method.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Reset multilocus lineages ‚Äî mll.reset","text":"method assignment method. \"original\" contained   \"value\", assumed \"original\" definition used reset   MLGs.","code":""},{"path":[]},{"path":"/reference/mll.reset-method.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Reset multilocus lineages ‚Äî mll.reset","text":"Zhian N. Kamvar","code":""},{"path":"/reference/mll.reset-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reset multilocus lineages ‚Äî mll.reset","text":"","code":"# This data set was a subset of a larger data set, so the multilocus # genotypes are not all sequential data(Pinf) mll(Pinf) <- \"original\" mll(Pinf) #>  [1]  17  24  17  17  54  22  14  19   1  84  83  69  79  74  75  75  13  38   4 #> [20]   5  53  37  30  51  56  39  45  59  62  80  42  61  41  33 110  58  50  46 #> [39]  98  57  95  77  52  93  99  94  21  96  97  97  97  97  34  34  34   6 104 #> [58] 109 115 105  40  55 116 117   8  47   7  15  25  11  10  47  23  12  36  36 #> [77]  35  36  72  71  63  68  63  63  12 106  # If we use mll.reset, then it will become sequential Pinf.new <- mll.reset(Pinf, TRUE) # reset all mll(Pinf.new) #>  [1] 13 18 13 13 38 16 11 14  1 57 56 48 54 51 52 52 10 26  2  3 37 25 20 35 40 #> [26] 27 31 43 45 55 30 44 29 21 69 42 34 32 63 41 60 53 36 58 64 59 15 61 62 62 #> [51] 62 62 22 22 22  4 65 68 70 66 28 39 71 72  6 33  5 12 19  8  7 33 17  9 24 #> [76] 24 23 24 50 49 46 47 46 46  9 67  # \\dontrun{  # It is possible to reset only specific mll definitions. For example, let's # say that we wanted to filter our multilocus genotypes by nei's distance mlg.filter(Pinf, dist = nei.dist, missing = \"mean\") <- 0.02  # And we wanted to set those as custom genotypes, mll.custom(Pinf) <- mll(Pinf, \"contracted\") mll.levels(Pinf) <- .genlab(\"MLG\", nmll(Pinf, \"custom\"))  # We could reset just the original and the filtered if we wanted to and keep # the custom as it were.  Pinf.new <- mll.reset(Pinf, c(\"original\", \"contracted\"))  mll(Pinf.new, \"original\") #>  [1] 13 18 13 13 38 16 11 14  1 57 56 48 54 51 52 52 10 26  2  3 37 25 20 35 40 #> [26] 27 31 43 45 55 30 44 29 21 69 42 34 32 63 41 60 53 36 58 64 59 15 61 62 62 #> [51] 62 62 22 22 22  4 65 68 70 66 28 39 71 72  6 33  5 12 19  8  7 33 17  9 24 #> [76] 24 23 24 50 49 46 47 46 46  9 67 mll(Pinf.new, \"contracted\") #>  [1] 13 18 13 13 38 16 11 14  1 57 56 48 54 51 52 52 10 26  2  3 37 25 20 35 40 #> [26] 27 31 43 45 55 30 44 29 21 69 42 34 32 63 41 60 53 36 58 64 59 15 61 62 62 #> [51] 62 62 22 22 22  4 65 68 70 66 28 39 71 72  6 33  5 12 19  8  7 33 17  9 24 #> [76] 24 23 24 50 49 46 47 46 46  9 67 mll(Pinf.new, \"custom\") #>  [1] MLG11 MLG10 MLG11 MLG11 MLG33 MLG13 MLG10 MLG11 MLG01 MLG52 MLG51 MLG43 #> [13] MLG49 MLG46 MLG47 MLG47 MLG09 MLG21 MLG02 MLG03 MLG32 MLG20 MLG15 MLG30 #> [25] MLG35 MLG22 MLG26 MLG38 MLG40 MLG50 MLG25 MLG39 MLG24 MLG16 MLG63 MLG37 #> [37] MLG29 MLG27 MLG57 MLG36 MLG55 MLG48 MLG31 MLG53 MLG58 MLG54 MLG12 MLG56 #> [49] MLG56 MLG56 MLG56 MLG56 MLG17 MLG17 MLG17 MLG04 MLG59 MLG62 MLG64 MLG60 #> [61] MLG23 MLG34 MLG65 MLG66 MLG19 MLG28 MLG05 MLG10 MLG14 MLG07 MLG06 MLG28 #> [73] MLG13 MLG08 MLG19 MLG19 MLG18 MLG19 MLG45 MLG44 MLG41 MLG42 MLG41 MLG41 #> [85] MLG08 MLG61 #> 66 Levels: MLG01 MLG02 MLG03 MLG04 MLG05 MLG06 MLG07 MLG08 MLG09 ... MLG66  # If \"original\" is not one of the values, then that is used as a baseline. Pinf.orig <- mll.reset(Pinf, \"contracted\") mll(Pinf.orig, \"contracted\") #>  [1]  17  24  17  17  54  22  14  19   1  84  83  69  79  74  75  75  13  38   4 #> [20]   5  53  37  30  51  56  39  45  59  62  80  42  61  41  33 110  58  50  46 #> [39]  98  57  95  77  52  93  99  94  21  96  97  97  97  97  34  34  34   6 104 #> [58] 109 115 105  40  55 116 117   8  47   7  15  25  11  10  47  23  12  36  36 #> [77]  35  36  72  71  63  68  63  63  12 106 mll(Pinf.new, \"contracted\") #>  [1] 13 18 13 13 38 16 11 14  1 57 56 48 54 51 52 52 10 26  2  3 37 25 20 35 40 #> [26] 27 31 43 45 55 30 44 29 21 69 42 34 32 63 41 60 53 36 58 64 59 15 61 62 62 #> [51] 62 62 22 22 22  4 65 68 70 66 28 39 71 72  6 33  5 12 19  8  7 33 17  9 24 #> [76] 24 23 24 50 49 46 47 46 46  9 67 # }"},{"path":"/reference/monpop.html","id":null,"dir":"Reference","previous_headings":"","what":"Peach brown rot pathogen *Monilinia fructicola* ‚Äî monpop","title":"Peach brown rot pathogen *Monilinia fructicola* ‚Äî monpop","text":"microsatellite data population haploid    plant pathogen *Monilinia fructicola* causes disease within peach   tree canopies (Everhart & Scherm, 2014). Entire populations within trees   sampled across 3 years (2009, 2010, 2011) total four   trees, one tree sampled three years, total 6   within-tree populations. Within year, samples spring taken   affected blossoms (termed \"BB\" blossom blight) late summer   affected fruits (termed \"FR\" fruit rot). total 694    isolates 65 173 isolates within canopy population    characterized using set 13 microsatellite markers.","code":""},{"path":"/reference/monpop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Peach brown rot pathogen *Monilinia fructicola* ‚Äî monpop","text":"","code":"data(monpop)"},{"path":"/reference/monpop.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Peach brown rot pathogen *Monilinia fructicola* ‚Äî monpop","text":"[genclone-class] object 3 hierarchical levels    coded one population factor. named \"Tree\", \"Year\",    \"Symptom\"","code":""},{"path":"/reference/monpop.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Peach brown rot pathogen *Monilinia fructicola* ‚Äî monpop","text":"SE Everhart, H Scherm, (2015) Fine-scale genetic structure    *Monilinia fructicola* brown rot epidemics within individual   peach tree canopies. Phytopathology 105:542-549 doi:   doi:10.1094/PHYTO-03-14-0088-R","code":""},{"path":"/reference/monpop.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Peach brown rot pathogen *Monilinia fructicola* ‚Äî monpop","text":"","code":"data(monpop) splitStrata(monpop) <- ~Tree/Year/Symptom setPop(monpop) <- ~Symptom/Year monpop #>  #> This is a genclone object #> ------------------------- #> Genotype information: #>  #>    264 multilocus genotypes  #>    694 haploid individuals #>     13 codominant loci #>  #> Population information: #>  #>      3 strata - Tree, Year, Symptom #>      6 populations defined - BB_9, FR_9, BB_10, FR_10, BB_11, FR_11"},{"path":"/reference/old2new_genclone.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert an old genclone object to a new genclone object ‚Äî old2new_genclone","title":"Convert an old genclone object to a new genclone object ‚Äî old2new_genclone","text":"Convert old genclone object new genclone object","code":""},{"path":"/reference/old2new_genclone.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert an old genclone object to a new genclone object ‚Äî old2new_genclone","text":"","code":"old2new_genclone(object, donor = new(class(object)))"},{"path":"/reference/old2new_genclone.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert an old genclone object to a new genclone object ‚Äî old2new_genclone","text":"object genclone object poppr v. 1.1 donor new genclone object poppr v. 2.0","code":""},{"path":"/reference/old2new_genclone.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Convert an old genclone object to a new genclone object ‚Äî old2new_genclone","text":"Zhian N. Kamvar","code":""},{"path":"/reference/partial_clone.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulated data illustrating a Minimum Spanning Network based on Bruvo's\nDistance ‚Äî partial_clone","title":"Simulated data illustrating a Minimum Spanning Network based on Bruvo's\nDistance ‚Äî partial_clone","text":"data simulated using SimuPOP version 1.0.8    99.9% clonal reproduction 10,000 generations. Populations   assigned post-hoc simply present purposes demonstrating   minimum spanning network Bruvo's distance.","code":""},{"path":"/reference/partial_clone.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulated data illustrating a Minimum Spanning Network based on Bruvo's\nDistance ‚Äî partial_clone","text":"","code":"data(partial_clone)"},{"path":"/reference/partial_clone.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Simulated data illustrating a Minimum Spanning Network based on Bruvo's\nDistance ‚Äî partial_clone","text":"[genind()] object 50 individuals, 10 loci, four    populations.","code":""},{"path":"/reference/partial_clone.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Simulated data illustrating a Minimum Spanning Network based on Bruvo's\nDistance ‚Äî partial_clone","text":"Bo Peng Christopher Amos (2008) Forward-time simulations    nonrandom mating populations using simuPOP. *bioinformatics*, 24 (11):   1408-1409.","code":""},{"path":"/reference/pgen.html","id":null,"dir":"Reference","previous_headings":"","what":"Genotype Probability ‚Äî pgen","title":"Genotype Probability ‚Äî pgen","text":"Calculate probability genotypes based product allele frequencies loci.","code":""},{"path":"/reference/pgen.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Genotype Probability ‚Äî pgen","text":"","code":"pgen(gid, pop = NULL, by_pop = TRUE, log = TRUE, freq = NULL, ...)"},{"path":"/reference/pgen.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Genotype Probability ‚Äî pgen","text":"gid genind genclone object. pop either formula set population factor  strata slot vector specifying population factor  sample. Defaults NULL. by_pop TRUE (default), calculation done population. log logical log =TRUE (default), values returned log(Pgen). log = FALSE, values returned Pgen. freq vector matrix allele frequencies. defaults  NULL, indicating frequencies determined via  round-robin approach rraf. matrix  vector provided, zero-value allele frequencies automatically corrected. details, please see documentation correcting rare alleles. ... options correcting rare alleles. default correct allele frequencies 1/n","code":""},{"path":"/reference/pgen.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Genotype Probability ‚Äî pgen","text":"vector containing Pgen values per locus genotype    object.","code":""},{"path":"/reference/pgen.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Genotype Probability ‚Äî pgen","text":"Pgen probability given genotype occuring population   assuming HWE. Thus, value diploids $$P_{gen} = \\left(\\prod_{=1}^m p_i\\right)2^h$$ \\(p_i\\) allele frequencies h count   number heterozygous sites sample (Arnaud-Haond et al. 2007; Parks   Werth, 1993). allele frequencies, default, calculated using   round-robin approach allele frequencies particular locus    calculated clone-censored genotypes without locus. avoid issues numerical precision small numbers, function    calculates pgen per locus adding log-transformed values allele    frequencies. can easily transformed return true value (see   examples).","code":""},{"path":"/reference/pgen.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Genotype Probability ‚Äî pgen","text":"haploids, Pgen particular locus allele frequency.    function handle polyploids. Additionally, argument    pop NULL, by_pop automatically TRUE.","code":""},{"path":"/reference/pgen.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Genotype Probability ‚Äî pgen","text":"Arnaud-Haond, S., Duarte, C. M., Alberto, F., & Serr√£o, E. . 2007. Standardizing methods address clonality population studies. Molecular Ecology, 16(24), 5115-5139. Parks, J. C., & Werth, C. R. 1993. study spatial features clones population bracken fern, Pteridium aquilinum (Dennstaedtiaceae). American Journal Botany, 537-544.","code":""},{"path":[]},{"path":"/reference/pgen.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Genotype Probability ‚Äî pgen","text":"Zhian N. Kamvar, Jonah Brooks, Stacy . Krueger-Hadfield, Erik Sotka","code":""},{"path":"/reference/pgen.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Genotype Probability ‚Äî pgen","text":"","code":"data(Pram) head(pgen(Pram, log = FALSE)) #>             PrMS6A1 Pr9C3A1 PrMS39A1 PrMS45A1    PrMS43A1 #> 1411152-10B     0.5     0.5     0.15      0.5 0.111111111 #> 82              0.5     0.5     0.35      0.5 0.111111111 #> 83              0.5     0.5     0.15      0.5 0.002298851 #> 84              0.5     0.5     0.35      0.5 0.004597701 #> 85              0.5     0.5     0.35      0.5 0.222222222 #> 81-NM-1         0.5     0.5     0.35      0.5 0.111111111  # \\dontrun{ # You can also supply the observed allele frequencies pramfreq <- Pram %>% genind2genpop() %>% tab(freq = TRUE) #>  #>  Converting data from a genind to a genpop object...  #>  #> ...done. #>  head(pgen(Pram, log = FALSE, freq = pramfreq)) #>             PrMS6A1 Pr9C3A1  PrMS39A1 PrMS45A1    PrMS43A1 #> 1411152-10B     0.5     0.5 0.1301308      0.5 0.048799049 #> 82              0.5     0.5 0.3664209      0.5 0.129488704 #> 83              0.5     0.5 0.1301308      0.5 0.011771700 #> 84              0.5     0.5 0.3664209      0.5 0.001355529 #> 85              0.5     0.5 0.3664209      0.5 0.134197384 #> 81-NM-1         0.5     0.5 0.3664209      0.5 0.129488704  # You can get the Pgen values over all loci by summing over the logged results: pgen(Pram, log = TRUE) %>%  # calculate pgen matrix   rowSums(na.rm = TRUE) %>% # take the sum of each row   exp()                     # take the exponent of the results #>             1411152-10B                      82                      83  #>            2.083333e-03            4.861111e-03            4.310345e-05  #>                      84                      85                 81-NM-1  #>            2.011494e-04            9.722222e-03            4.861111e-03  #>               06-1413-1               07-83-7-A         ODA-06-1029-82B  #>            4.185268e-03            4.715795e-04            4.185268e-03  #>         ODA-06-1029-82C        ODA-06-1029-109A        ODA-06-1029-109B  #>            4.185268e-03            4.185268e-03            4.185268e-03  #>                118-28-A             08-206-44-B             08-206-44-D  #>            4.185268e-04            1.395089e-03            1.395089e-03  #>             08-206-44-E                 351-5-A                 351-5-C  #>            1.395089e-03            1.771191e-05            1.771191e-05  #>                 351-5-D                 351-5-E                 04-76-C  #>            1.771191e-05            1.771191e-05            5.580357e-04  #>               04-335-2A               04-189-B4            03-74-N10A-B  #>            4.185268e-03            8.370536e-04            8.370536e-04  #>              05-2033-72              05-2033-73              05-2086-12  #>            4.715795e-04            4.715795e-04            1.395089e-03  #>              05-2086-20              05-2086-31              05-2086-34  #>            4.715795e-04            1.571932e-04            1.395089e-03  #>               05-2088-3                   06-30                 06-81-2  #>            4.185268e-03            4.185268e-03            1.395089e-03  #>             06-1036-71B             06-1036-71C            06-1029-122D  #>            4.185268e-03            4.185268e-03            4.185268e-03  #>            06-1029-122C            06-1029-122A             06-1029-98C  #>            4.185268e-04            4.185268e-04            1.771191e-05  #>              06-1027-90               1369017-9               1352535-6  #>            4.185268e-03            4.861111e-03            4.861111e-03  #>              1343990-17               1344272-8             1411152-10A  #>            1.005747e-04            4.861111e-03            2.083333e-03  #>              1341321-16               1418983-2               1402871-B  #>            4.161712e-06            1.041667e-03            2.011494e-04  #>               1373915-5              1343990-10              1360295-17  #>            2.011494e-04            4.861111e-03            2.011494e-04  #>              1341321-32               1339849-3               1339849-5  #>            2.011494e-04            4.861111e-03            4.861111e-03  #>               1339849-6               1339849-7               1339849-8  #>            4.861111e-03            4.861111e-03            4.861111e-03  #>              1339849-10              1339849-12              1339849-13  #>            4.861111e-03            4.861111e-03            4.861111e-03  #>              1339849-15              1339849-16              1339849-17  #>            4.861111e-03            4.861111e-03            4.861111e-03  #>                 1429425               07-83-7-B              07-83-37-D  #>            4.861111e-03            1.395089e-03            4.185268e-03  #>              07-83-38-B              07-83-38-D               1370431-1  #>            4.185268e-03            4.185268e-04            9.722222e-03  #>               1370431-2               1370431-3               1370431-4  #>            9.722222e-03            2.011494e-04            2.011494e-04  #>               1370431-5               1428631-1                04-278-3  #>            9.722222e-03            1.005747e-04            4.185268e-03  #>               04-335-2B               04-335-2C               1314176-9  #>            4.185268e-03            3.143863e-05            4.861111e-03  #>              1314176-13                 1387968                 1418886  #>            4.861111e-03            1.005747e-04            2.011494e-04  #>                  04-83D              Phytr-06-4             Phytr-0-217  #>            5.580357e-04            2.430556e-03            4.861111e-03  #>                  NOR1.2                  MCK1.1                  MCK1.2  #>            4.861111e-03            4.861111e-03            4.861111e-03  #>    4123.100000000000364              07-1161-1C              07-1161-1E  #>            1.571932e-04            8.370536e-03            4.185268e-03  #>              07-1161-4A              07-1161-4B             07-1161-3-1  #>            4.185268e-03            1.395089e-03            4.185268e-03  #>             07-1161-3-2             07-1161-3-3              07-1161-5A  #>            4.185268e-03            4.185268e-03            1.395089e-03  #>              07-1161-5D              1314070-20               07-1240-1  #>            1.395089e-03            4.861111e-03            4.185268e-03  #>                 08-15-1                 08-16-1              1368791-19  #>            4.185268e-03            4.185268e-03            2.083333e-03  #>              1368791-21               1429891-1               1429891-2  #>            1.041667e-03            2.083333e-03            8.620690e-05  #>               1429891-3               1429891-4               1429891-6  #>            4.861111e-03            2.083333e-03            2.083333e-03  #>               1429891-7              1429891-10              1429891-11  #>            2.083333e-03            2.083333e-03            2.083333e-03  #>              1437044-28              1454471-29              1454471-31  #>            8.620690e-05            1.783591e-06            1.783591e-06  #>               1309326-1                 1480397               1368791-2  #>            4.861111e-03            2.083333e-03            1.005747e-04  #>               1281744-1               1281744-3               1281744-5  #>            2.083333e-03            2.083333e-03            1.041667e-03  #>               1281744-6               1281744-7               1281744-9  #>            2.083333e-03            8.620690e-05            4.166667e-03  #>              1281744-10              1281744-15              1281744-16  #>            2.083333e-03            2.083333e-03            4.166667e-03  #>              1281744-21              1454527-12               1480844-4  #>            2.083333e-03            4.861111e-03            4.861111e-03  #>               1480844-5               1480844-8              1480844-10  #>            4.861111e-03            4.861111e-03            4.861111e-03  #>               1281744-4               1480841-6               1281789-1  #>            2.083333e-03            2.083333e-03            2.083333e-03  #>               1281789-2              1431833-31              1431833-32  #>            2.083333e-03            4.861111e-03            4.861111e-03  #>              1431833-39              1309305-21                118-28-B  #>            4.861111e-03            2.011494e-04            4.185268e-03  #>                118-28-E                134-19-E                134-20-E  #>            4.185268e-04            8.370536e-03            4.185268e-03  #>          Pr 519- LTR1.2          Pr 520- MCK1.1            09-133-4 ODA  #>            9.722222e-03            4.861111e-03            1.395089e-03  #>        SOD OR 10-59-3-A        SOD OR 10-59-3-D        SOD OR 10-59-3-E  #>            4.185268e-03            4.185268e-03            4.185268e-03  #>        SOD OR 10-59-3-F        SOD OR 10-59-3-H                  Pr 731  #>            4.185268e-03            4.185268e-03            5.208333e-04  #>                  Pr 732                  Pr 733                  Pr 734  #>            5.208333e-04            1.215278e-03            1.215278e-03  #>                  Pr 735              1441558-37              1441558-39  #>            1.215278e-03            4.861111e-03            9.722222e-03  #>              1469925-55               1538371-8              1560692-17  #>            1.783591e-06            9.722222e-03            1.340996e-04  #>              1623730-36               1623827-6              1631078-10  #>            9.722222e-03            9.722222e-03            4.861111e-03  #>              1631078-12 #4177 Blomquist back up               1631081-1  #>            9.722222e-03            4.861111e-03            4.861111e-03  #>               1631081-2               1631081-3              1631081-15  #>            4.861111e-03            4.861111e-03            4.861111e-03  #>              1631081-17              1631081-22               1644850-1  #>            9.722222e-03            4.861111e-03            9.722222e-03  #>               1644850-2               1644850-4               1644850-5  #>            9.722222e-03            9.722222e-03            9.722222e-03  #>               1644850-6               1644850-7               1644850-8  #>            9.722222e-03            4.861111e-03            9.722222e-03  #>              1644856-18              1644856-35               1341878-7  #>            9.722222e-03            9.722222e-03            8.620690e-05  #>              1341878-49                 1365048                 1496607  #>            2.083333e-03            2.011494e-04            2.011494e-04  #>              1560191-36               1583329-B               1583329-C  #>            4.161712e-06            2.011494e-04            4.861111e-03  #>                 1596853                 1596854               1621925-9  #>            9.722222e-03            8.620690e-05            9.722222e-03  #>              1621925-11               1621926-8               1626660-3  #>            9.722222e-03            9.722222e-03            9.722222e-03  #>                 1625769              1626651-10               1626656-1  #>            2.011494e-04            9.722222e-03            9.722222e-03  #>               1644994-2              PC#11-1366                ODA 81-8  #>            9.722222e-03            4.861111e-03            1.771191e-05  #>                ODA 81-9               ODA 81-37               ODA 114-6  #>            1.771191e-05            1.771191e-05            1.771191e-05  #>                  120187                  120189                  120231  #>            3.143863e-05            4.861111e-03            2.011494e-04  #>              1404252-18              1497058-26               1644623-8  #>            2.011494e-04            8.620690e-05            2.011494e-04  #>              1644623-26          230P06005897-8          230P06005897-9  #>            4.161712e-06            2.011494e-04            2.011494e-04  #>         230P06005898-20         230P06005898-21                10998-V2  #>            2.011494e-04            2.011494e-04            1.571932e-05  #>                  1004.1                  1008.1                  1019.1  #>            1.962943e-02            1.962943e-02            1.962943e-02  #>                  1021.1                  1030.1                  1031.1  #>            3.128552e-05            1.962943e-02            1.962943e-02  #>                  1032.1                  1033.1                    1041  #>            1.962943e-02            1.877131e-04            1.962943e-02  #>                    1044                    1055                  2029.1  #>            1.962943e-02            1.962943e-02            1.962943e-02  #>                  2043.1                  2091.1                    2092  #>            1.962943e-02            1.962943e-02            1.673328e-04  #>                    2096                  2099.1                  2108.1  #>            1.962943e-02            1.962943e-02            1.962943e-02  #>                  2108.2                  2110.4                  4088.1  #>            1.877131e-04            1.962943e-02            3.271572e-03  #>                  4089.1                    4120                  4122.4  #>            1.962943e-02            1.962943e-02            1.962943e-02  #>                    4131                  4143.1                  4144.1  #>            1.962943e-02            3.271572e-03            1.962943e-02  #>                  4146.1                    4154                  4158.2  #>            1.962943e-02            3.128552e-05            1.962943e-02  #>                  4167.1                  4168.2                  4169.1  #>            1.877131e-04            1.877131e-04            1.962943e-02  #>                  4172.2                  4173.2                  5013.1  #>            1.962943e-02            3.271572e-03            1.962943e-02  #>                    5019                  1020.1                  2018.1  #>            1.962943e-02            1.138507e-02            1.962943e-02  #>                  2148.1                  2153.3                  2157.3  #>            1.962943e-02            1.962943e-02            1.877131e-04  #>                    2176                    2178                    2179  #>            1.962943e-02            1.962943e-02            1.877131e-04  #>                    2180                    2181                    2183  #>            1.962943e-02            1.962943e-02            1.962943e-02  #>                    2184                    2190                    2192  #>            1.962943e-02            1.962943e-02            1.877131e-04  #>                    2193                    2194                    2195  #>            1.962943e-02            1.795071e-06            1.962943e-02  #>                    2206                    2220                    4215  #>            1.962943e-02            1.962943e-02            1.962943e-02  #>                    4242                  4251.1                  4252.1  #>            1.962943e-02            1.962943e-02            1.962943e-02  #>                    4280                    4297                  4301.1  #>            1.877131e-04            1.877131e-04            1.877131e-04  #>                  4318.1                  4320.1                    5410  #>            1.962943e-02            1.962943e-02            1.962943e-02  #>                  5448.1                  5449.1                    5450  #>            1.962943e-02            1.673328e-04            1.962943e-02  #>                    5451                    5464                    5467  #>            1.877131e-04            1.962943e-02            1.795071e-06  #>             WA12-101402              WA9-111302                    2027  #>            1.269976e-02            2.024096e-05            1.600177e-06  #>                    1105                    2222                  2234.1  #>            1.962943e-02            1.962943e-02            3.271572e-03  #>                  2234.2                  2235.1                  2235.2  #>            3.128552e-05            3.271572e-03            1.877131e-04  #>                    2236                 2236.10                  2236.6  #>            1.877131e-04            1.962943e-02            1.962943e-02  #>                  2236.7                  2243.1                  2243.3  #>            1.962943e-02            1.877131e-04            1.962943e-02  #>                  2243.5                  2243.6                  2243.8  #>            1.962943e-02            1.962943e-02            1.962943e-02  #>                    2271                    2274                    2295  #>            1.962943e-02            1.962943e-02            1.962943e-02  #>                  2336.1                  2336.2                  2336.3  #>            1.962943e-02            1.962943e-02            1.962943e-02  #>                  2336.4                  2336.5                    2340  #>            1.962943e-02            1.962943e-02            1.795071e-06  #>                    2344                    2402                  2404.1  #>            1.962943e-02            3.271572e-03            1.962943e-02  #>                    2424                    2542                    2552  #>            1.962943e-02            1.620370e-03            1.962943e-02  #>                  2554.4                  2554.5                    2572  #>            1.962943e-02            1.877131e-04            1.308629e-04  #>                    2598                  2611.1                  2611.2  #>            1.877131e-04            1.962943e-02            1.962943e-02  #>                  2611.3                    2615                  2617.1  #>            1.962943e-02            1.962943e-02            1.962943e-02  #>                  2617.2                  2617.3                  2622.1  #>            1.962943e-02            1.962943e-02            1.962943e-02  #>                  2622.2                  2622.3                    2624  #>            1.962943e-02            1.962943e-02            1.962943e-02  #>                    2628                    2631                    2634  #>            1.962943e-02            1.795071e-06            1.308629e-04  #>                  2641.1                  2641.2                    2642  #>            1.962943e-02            1.962943e-02            1.962943e-02  #>                    2643                    2644                  2644.1  #>            1.877131e-04            1.962943e-02            1.962943e-02  #>                  2644.2                  2644.3                    2647  #>            1.962943e-02            1.962943e-02            1.962943e-02  #>                  2647.1                  2647.2                    2648  #>            1.962943e-02            1.962943e-02            1.962943e-02  #>                    2649                  2649.1                    4239  #>            3.271572e-03            1.962943e-02            1.962943e-02  #>                    4240                    4347                    4349  #>            1.962943e-02            1.795071e-06            1.673328e-04  #>                    4351                    4352                    4353  #>            3.271572e-03            3.271572e-03            3.271572e-03  #>                    4354                    4355                    4358  #>            1.962943e-02            1.962943e-02            1.962943e-02  #>                    4359                    4361                    4362  #>            1.877131e-04            1.877131e-04            1.962943e-02  #>                    4364                    4367                    4375  #>            1.877131e-04            3.128552e-05            3.271572e-03  #>                    4377                    4378                    4379  #>            1.962943e-02            1.962943e-02            1.962943e-02  #>                    4380                    4382                    4383  #>            1.962943e-02            1.962943e-02            1.962943e-02  #>                    4396                  4400.1             WA12-030403  #>            1.877131e-04            3.128552e-05            1.269976e-02  #>           WA12-1-101403           WA12-1-111003             WA12-112403  #>            1.269976e-02            1.269976e-02            1.269976e-02  #>           WA12-2-031803           WA12-2-111003           WA12-3-091603  #>            1.269976e-02            1.269976e-02            1.269976e-02  #>           WA12-3-111003           WA12-4-081803           WA15-1-031803  #>            1.269976e-02            1.269976e-02            1.161367e-06  #>           WA15-3-080403            WA1-7-031803            WA4-4-031803  #>            5.474034e-03            2.116626e-03            1.269976e-02  #>            WA9.1-030403       WA9-081803 = 1712                    2234  #>            2.024096e-05            1.214458e-04            7.180284e-08  #>                 2222.12                    2294                    2452  #>            1.962943e-02            1.962943e-02            1.962943e-02  #>                    2486                    2561                    2562  #>            1.962943e-02            7.851772e-04            7.851772e-04  #>                    2595                    2849                    2850  #>            1.962943e-02            1.962943e-02            1.877131e-04  #>                    2851                  2965.2                    2976  #>            1.962943e-02            1.877131e-04            1.962943e-02  #>                    2985                    2987                    2988  #>            1.962943e-02            1.962943e-02            1.877131e-04  #>                    4542                    9004                    9013  #>            1.962943e-02            1.962943e-02            1.877131e-04  #>                    9022                    9023                    9032  #>            1.962943e-02            1.962943e-02            1.962943e-02  #>                    9034                    9038        WA1.2BA15-030104  #>            1.877131e-04            1.962943e-02            1.214458e-04  #>              WA1-011304              WA1-032204             WA12-011304  #>            1.269976e-02            1.214458e-04            1.269976e-02  #>             WA12-012604             WA12-040504             WA12-051704  #>            1.269976e-02            1.269976e-02            2.116626e-03  #>           WA12-2-032204             WA16-011304             WA27-040504  #>            1.214458e-04            1.269976e-02            1.269976e-02  #>             WA27-071904              WA9-020904                    4384  #>            1.269976e-02            1.269976e-02            1.795071e-06  #>             WA27-040205                    9488                   11075  #>            1.269976e-02            6.392045e-03            1.420455e-03  #>                 10490.1                 10490.2                 10490.3  #>            1.041667e-02            1.041667e-02            1.041667e-02  #>                 10490.4                 10491.1                 10491.2  #>            1.041667e-02            2.083333e-02            2.083333e-02  #>                 10491.3                 10492.1                 10492.2  #>            2.083333e-02            2.083333e-02            2.083333e-02  #>                 10492.3                 10492.4                 10492.5  #>            2.083333e-02            2.083333e-02            2.083333e-02  #>                 10492.6                   10493                 10496.1  #>            2.083333e-02            2.083333e-02            2.083333e-02  #>                 10496.2                 10496.3                 10497.1  #>            2.083333e-02            2.083333e-02            2.083333e-02  #>                 10497.2                 10497.3                 11745.1  #>            6.313131e-04            2.083333e-02            2.083333e-02  #>                 11745.2                 11745.3                 11761.1  #>            2.083333e-02            2.083333e-02            2.083333e-02  #>                 11761.2                 11761.3                 11761.4  #>            2.083333e-02            2.083333e-02            2.083333e-02  #>                 11761.5                 11762.1                 11762.2  #>            6.313131e-04            2.083333e-02            2.083333e-02  #>                 11762.3                 11803.1                 11803.2  #>            2.083333e-02            2.083333e-02            2.083333e-02  #>                 11803.3                 11805.1                 11805.2  #>            2.083333e-02            2.083333e-02            2.083333e-02  #>                 11805.3                   11806                 11807.1  #>            2.083333e-02            2.083333e-02            2.083333e-02  #>                 11807.2                 11807.3                 11808.1  #>            2.083333e-02            2.083333e-02            2.083333e-02  #>                 11808.2                 11808.3                 11810.1  #>            2.083333e-02            2.083333e-02            2.083333e-02  #>                 11810.2                 11810.3                 11812.1  #>            2.083333e-02            2.083333e-02            2.083333e-02  #>                 11812.2                 11812.3                 11819.1  #>            2.083333e-02            2.083333e-02            2.083333e-02  #>                 11819.2                 11819.3                 11819.4  #>            2.083333e-02            2.083333e-02            2.083333e-02  #>                 11819.5                 11819.6                 11855.1  #>            2.083333e-02            2.083333e-02            2.083333e-02  #>                 11855.2                 11913.1                 11913.2  #>            2.083333e-02            2.083333e-02            2.083333e-02  #>                 11913.3                 11914.1                 11914.2  #>            2.083333e-02            2.083333e-02            2.083333e-02  #>                 11914.3                   11349                   11372  #>            2.083333e-02            7.520053e-04            1.671123e-04  #>              11798x7535              11799x7517                10794-V5  #>            1.041667e-02            2.083333e-02            3.240741e-04  #>                11466-V2                11466-V5                11540-V3  #>            8.847122e-05            8.847122e-05            3.240741e-03  #>                   11160                   11955                   13150  #>            2.083333e-02            2.083333e-02            1.041667e-02  #>                 13153.1                 13153.2                   13155  #>            4.861111e-03            4.861111e-03            2.083333e-02  #>                   13184                   13185                   13205  #>            2.083333e-02            1.190476e-03            2.083333e-02  #>                   13206                   13207                   13228  #>            2.083333e-02            1.041667e-02            1.041667e-02  #>                   13154                   11956                   13226  #>            2.083333e-02            2.083333e-02            1.041667e-02  #>                   13227                  2043_1                  2138_1  #>            1.041667e-02            1.962943e-02            1.962943e-02  #>                  2157_3                   11001                   13592  #>            1.877131e-04            9.722222e-04            4.861111e-03  #>            WA12S-091713              13746-9105              13766-9120  #>            1.673328e-04            4.166667e-03            1.877131e-04  #>              13767-9121              13773-9138              13774-9174  #>            1.877131e-04            1.962943e-02            1.041141e-06  #>              13778-9175              13780-9139              13781-9123  #>            3.128552e-05            1.962943e-02            1.673328e-04  #>              13782-9140              13785-9142              13786-9143  #>            1.962943e-02            4.629630e-04            4.629630e-04  #>              13787-9144              13788-9145              13789-9146  #>            4.629630e-04            2.558480e-04            4.861111e-03  #>              13790-9147                   13835              13844-9176  #>            2.558480e-04            3.086420e-04            1.543210e-04  #>              13845-9124              13846-9108              13847-9109  #>            4.861111e-03            3.240741e-03            2.558480e-04  #>              13849-9110              13850-9111              13859-9112  #>            2.083333e-02            3.125000e-02            2.083333e-02  #>              13860-9148              13861-9113              13862-9114  #>            2.083333e-02            1.190476e-03            1.190476e-03  #>              13863-9115              13867-9117              13870-9149  #>            2.083333e-02            5.208333e-03            1.877131e-04  #>              13875-9132              13878-9151              13879-9152  #>            1.877131e-04            4.861111e-03            4.050926e-03  #>              13881-9153              13883-9133              13885-9177  #>            4.873294e-06            7.716049e-05            3.240741e-04  #>              13886-9154              13887-9202                   13888  #>            1.620370e-03            3.240741e-04            5.692535e-03  #>              13889-9161              13891-9162              13893-9178  #>            3.271572e-03            9.722222e-04            2.430556e-03  #>              13895-9155              13900-9156              13902-9157  #>            4.861111e-03            4.861111e-03            7.520053e-04  #>              13903-9179              13904-9180              13905-9181  #>            1.138507e-02            1.410160e-03            7.520053e-04  #>              13906-9163              13908-9164              13909-9158  #>            7.520053e-04            7.520053e-04            1.877131e-04  #>                   13916              13917-9182              13918-9203  #>            2.430556e-03            4.861111e-03            4.861111e-03  #>              13919-9183              13920-9159              13927-9185  #>            4.861111e-03            4.861111e-03            1.041667e-02  #>              13928-9186              13929-9187            13930-A-9188  #>            2.083333e-02            2.083333e-02            2.083333e-02  #>                 13930-B              13932-9189              13933-9190  #>            2.083333e-02            4.861111e-03            1.620370e-03  #>                   13934              13942-9194                   13945  #>            7.812500e-03            1.388889e-04            3.086420e-04  #>              13951-9195              13952-9196              13954-9197  #>            1.785714e-03            2.083333e-02            1.190476e-03  #>              13955-9198              13957-9199              13958-9200  #>            1.190476e-03            2.083333e-02            1.785714e-03  #>              13959-9206              13960-9207              14001-9208  #>            3.125000e-02            3.125000e-02            3.240741e-03  #>                   14002              14003-9209                   14004  #>            4.861111e-03            2.916667e-03            9.722222e-04  #>                   14005              14006-9210              14007-9211  #>            1.620370e-03            1.620370e-03            1.620370e-03  #>              14008-9212                   14023                   14024  #>            1.620370e-03            1.041667e-02            1.785714e-03  #>                   14028                   14033                   14035  #>            2.083333e-02            9.259259e-05            3.086420e-04  #>                   14036                   14056              13872-9150  #>            9.259259e-05            2.916667e-03            1.962943e-02  #>                   13893              13931-9204                   13600  #>            4.861111e-03            2.430556e-03            3.271572e-03  #>                   13632                   13635                   13655  #>            1.671123e-04            4.166667e-03            2.558480e-04  #>                   13661                   13662                   13663  #>            4.861111e-03            3.240741e-03            1.535088e-04  #>                   13690                   13692                   13694  #>            4.873294e-06            4.629630e-05            9.722222e-04  #>                   13695                   13698                   13699  #>            5.116959e-05            6.481481e-04            4.861111e-03  #>                   13711                   13716                   13735  #>            9.259259e-05            1.535088e-04            4.861111e-03  #>                   13737                   13738                   13739  #>            1.620370e-03            3.240741e-03            3.240741e-03  #>                   13744                   13747                   13748  #>            3.240741e-03            4.166667e-03            4.166667e-03  #>                   13749                   13751                   13753  #>            2.083333e-03            4.166667e-03            4.166667e-03  #>              H-2-040113                   13801                   13802  #>            1.671123e-04            5.116959e-05            1.620370e-03  #>                   13805                   13824                   13825  #>            5.116959e-05            4.166667e-03            1.877131e-04  #>                   13826                   13827                   13828  #>            1.795071e-06            1.877131e-04            4.166667e-03  #>                   13830                   13831                   13832  #>            1.962943e-02            8.847122e-05            4.166667e-03  #>                   13837                   13838                   13839  #>            4.166667e-03            4.166667e-03            4.166667e-03  #>                   13840                   13841                   13842  #>            5.208333e-04            4.166667e-03            7.520053e-04  #>                  2157-3              11001-8874                  2027-1  #>            1.877131e-04            9.722222e-04            1.962943e-02  #>                  2138-1                   13873                   14040  #>            1.962943e-02            1.877131e-04            4.873294e-06  #>                   14041                   14042                   14043  #>            9.259259e-05            1.624431e-06            9.259259e-05  #>                   14044                   14046                   14047  #>            1.543210e-04            4.861111e-03            7.520053e-04  #>                   14049                   14077                   14078  #>            1.620370e-03            8.847122e-05            8.847122e-05  #>                   14079                   14080                   14081  #>            8.847122e-05            8.847122e-05            8.847122e-05  #>                   14082                   14083                   14085  #>            8.847122e-05            8.847122e-05            2.916667e-03  #>                   14092                   14093                   14107  #>            4.861111e-03            4.861111e-03            4.861111e-03  #>                   14108                   14112                   14113  #>            4.861111e-03            4.861111e-03            4.861111e-03  #>                   14114                   14115                   14116  #>            2.558480e-04            3.240741e-03            2.314815e-04  #>                   14119                   14120                   14121  #>            4.861111e-03            4.861111e-03            4.861111e-03  #>                   14122                   14123                   14131  #>            4.861111e-03            4.861111e-03            4.861111e-03  #>                   14132                 14045-a                 14045-b  #>            4.861111e-03            4.861111e-03            4.861111e-03  #>                   13971                   13977                   14129  #>            7.520053e-04            1.620370e-03            1.420455e-03  #>                   14135                   14136                 14137.1  #>            1.420455e-03            8.847122e-05            8.847122e-05  #>                   14138                   14139                   14141  #>            2.893519e-03            8.847122e-05            4.861111e-03  #>                   14142                   14145                   14149  #>            1.944444e-03            5.208333e-04            4.861111e-03  #>                   14151                   14152                   14153  #>            7.520053e-04            7.520053e-04            7.520053e-04  #>                   14156                   14159                   14160  #>            1.620370e-03            2.916667e-03            7.520053e-04  #>                   14161                   14162                   14164  #>            1.877131e-04            7.520053e-04            6.392045e-03  #>                   14165                   14167                   14168  #>            2.916667e-03            1.620370e-03            4.861111e-03  #>                   14169                   14171                   14172  #>            2.558480e-04            4.861111e-03            1.279240e-04  #>                   14174                   14175             WA84-121613  #>            1.795071e-06            9.259259e-05            4.861111e-03   # You can also take the product of the non-logged results: apply(pgen(Pram, log = FALSE), 1, prod, na.rm = TRUE) #>             1411152-10B                      82                      83  #>            2.083333e-03            4.861111e-03            4.310345e-05  #>                      84                      85                 81-NM-1  #>            2.011494e-04            9.722222e-03            4.861111e-03  #>               06-1413-1               07-83-7-A         ODA-06-1029-82B  #>            4.185268e-03            4.715795e-04            4.185268e-03  #>         ODA-06-1029-82C        ODA-06-1029-109A        ODA-06-1029-109B  #>            4.185268e-03            4.185268e-03            4.185268e-03  #>                118-28-A             08-206-44-B             08-206-44-D  #>            4.185268e-04            1.395089e-03            1.395089e-03  #>             08-206-44-E                 351-5-A                 351-5-C  #>            1.395089e-03            1.771191e-05            1.771191e-05  #>                 351-5-D                 351-5-E                 04-76-C  #>            1.771191e-05            1.771191e-05            5.580357e-04  #>               04-335-2A               04-189-B4            03-74-N10A-B  #>            4.185268e-03            8.370536e-04            8.370536e-04  #>              05-2033-72              05-2033-73              05-2086-12  #>            4.715795e-04            4.715795e-04            1.395089e-03  #>              05-2086-20              05-2086-31              05-2086-34  #>            4.715795e-04            1.571932e-04            1.395089e-03  #>               05-2088-3                   06-30                 06-81-2  #>            4.185268e-03            4.185268e-03            1.395089e-03  #>             06-1036-71B             06-1036-71C            06-1029-122D  #>            4.185268e-03            4.185268e-03            4.185268e-03  #>            06-1029-122C            06-1029-122A             06-1029-98C  #>            4.185268e-04            4.185268e-04            1.771191e-05  #>              06-1027-90               1369017-9               1352535-6  #>            4.185268e-03            4.861111e-03            4.861111e-03  #>              1343990-17               1344272-8             1411152-10A  #>            1.005747e-04            4.861111e-03            2.083333e-03  #>              1341321-16               1418983-2               1402871-B  #>            4.161712e-06            1.041667e-03            2.011494e-04  #>               1373915-5              1343990-10              1360295-17  #>            2.011494e-04            4.861111e-03            2.011494e-04  #>              1341321-32               1339849-3               1339849-5  #>            2.011494e-04            4.861111e-03            4.861111e-03  #>               1339849-6               1339849-7               1339849-8  #>            4.861111e-03            4.861111e-03            4.861111e-03  #>              1339849-10              1339849-12              1339849-13  #>            4.861111e-03            4.861111e-03            4.861111e-03  #>              1339849-15              1339849-16              1339849-17  #>            4.861111e-03            4.861111e-03            4.861111e-03  #>                 1429425               07-83-7-B              07-83-37-D  #>            4.861111e-03            1.395089e-03            4.185268e-03  #>              07-83-38-B              07-83-38-D               1370431-1  #>            4.185268e-03            4.185268e-04            9.722222e-03  #>               1370431-2               1370431-3               1370431-4  #>            9.722222e-03            2.011494e-04            2.011494e-04  #>               1370431-5               1428631-1                04-278-3  #>            9.722222e-03            1.005747e-04            4.185268e-03  #>               04-335-2B               04-335-2C               1314176-9  #>            4.185268e-03            3.143863e-05            4.861111e-03  #>              1314176-13                 1387968                 1418886  #>            4.861111e-03            1.005747e-04            2.011494e-04  #>                  04-83D              Phytr-06-4             Phytr-0-217  #>            5.580357e-04            2.430556e-03            4.861111e-03  #>                  NOR1.2                  MCK1.1                  MCK1.2  #>            4.861111e-03            4.861111e-03            4.861111e-03  #>    4123.100000000000364              07-1161-1C              07-1161-1E  #>            1.571932e-04            8.370536e-03            4.185268e-03  #>              07-1161-4A              07-1161-4B             07-1161-3-1  #>            4.185268e-03            1.395089e-03            4.185268e-03  #>             07-1161-3-2             07-1161-3-3              07-1161-5A  #>            4.185268e-03            4.185268e-03            1.395089e-03  #>              07-1161-5D              1314070-20               07-1240-1  #>            1.395089e-03            4.861111e-03            4.185268e-03  #>                 08-15-1                 08-16-1              1368791-19  #>            4.185268e-03            4.185268e-03            2.083333e-03  #>              1368791-21               1429891-1               1429891-2  #>            1.041667e-03            2.083333e-03            8.620690e-05  #>               1429891-3               1429891-4               1429891-6  #>            4.861111e-03            2.083333e-03            2.083333e-03  #>               1429891-7              1429891-10              1429891-11  #>            2.083333e-03            2.083333e-03            2.083333e-03  #>              1437044-28              1454471-29              1454471-31  #>            8.620690e-05            1.783591e-06            1.783591e-06  #>               1309326-1                 1480397               1368791-2  #>            4.861111e-03            2.083333e-03            1.005747e-04  #>               1281744-1               1281744-3               1281744-5  #>            2.083333e-03            2.083333e-03            1.041667e-03  #>               1281744-6               1281744-7               1281744-9  #>            2.083333e-03            8.620690e-05            4.166667e-03  #>              1281744-10              1281744-15              1281744-16  #>            2.083333e-03            2.083333e-03            4.166667e-03  #>              1281744-21              1454527-12               1480844-4  #>            2.083333e-03            4.861111e-03            4.861111e-03  #>               1480844-5               1480844-8              1480844-10  #>            4.861111e-03            4.861111e-03            4.861111e-03  #>               1281744-4               1480841-6               1281789-1  #>            2.083333e-03            2.083333e-03            2.083333e-03  #>               1281789-2              1431833-31              1431833-32  #>            2.083333e-03            4.861111e-03            4.861111e-03  #>              1431833-39              1309305-21                118-28-B  #>            4.861111e-03            2.011494e-04            4.185268e-03  #>                118-28-E                134-19-E                134-20-E  #>            4.185268e-04            8.370536e-03            4.185268e-03  #>          Pr 519- LTR1.2          Pr 520- MCK1.1            09-133-4 ODA  #>            9.722222e-03            4.861111e-03            1.395089e-03  #>        SOD OR 10-59-3-A        SOD OR 10-59-3-D        SOD OR 10-59-3-E  #>            4.185268e-03            4.185268e-03            4.185268e-03  #>        SOD OR 10-59-3-F        SOD OR 10-59-3-H                  Pr 731  #>            4.185268e-03            4.185268e-03            5.208333e-04  #>                  Pr 732                  Pr 733                  Pr 734  #>            5.208333e-04            1.215278e-03            1.215278e-03  #>                  Pr 735              1441558-37              1441558-39  #>            1.215278e-03            4.861111e-03            9.722222e-03  #>              1469925-55               1538371-8              1560692-17  #>            1.783591e-06            9.722222e-03            1.340996e-04  #>              1623730-36               1623827-6              1631078-10  #>            9.722222e-03            9.722222e-03            4.861111e-03  #>              1631078-12 #4177 Blomquist back up               1631081-1  #>            9.722222e-03            4.861111e-03            4.861111e-03  #>               1631081-2               1631081-3              1631081-15  #>            4.861111e-03            4.861111e-03            4.861111e-03  #>              1631081-17              1631081-22               1644850-1  #>            9.722222e-03            4.861111e-03            9.722222e-03  #>               1644850-2               1644850-4               1644850-5  #>            9.722222e-03            9.722222e-03            9.722222e-03  #>               1644850-6               1644850-7               1644850-8  #>            9.722222e-03            4.861111e-03            9.722222e-03  #>              1644856-18              1644856-35               1341878-7  #>            9.722222e-03            9.722222e-03            8.620690e-05  #>              1341878-49                 1365048                 1496607  #>            2.083333e-03            2.011494e-04            2.011494e-04  #>              1560191-36               1583329-B               1583329-C  #>            4.161712e-06            2.011494e-04            4.861111e-03  #>                 1596853                 1596854               1621925-9  #>            9.722222e-03            8.620690e-05            9.722222e-03  #>              1621925-11               1621926-8               1626660-3  #>            9.722222e-03            9.722222e-03            9.722222e-03  #>                 1625769              1626651-10               1626656-1  #>            2.011494e-04            9.722222e-03            9.722222e-03  #>               1644994-2              PC#11-1366                ODA 81-8  #>            9.722222e-03            4.861111e-03            1.771191e-05  #>                ODA 81-9               ODA 81-37               ODA 114-6  #>            1.771191e-05            1.771191e-05            1.771191e-05  #>                  120187                  120189                  120231  #>            3.143863e-05            4.861111e-03            2.011494e-04  #>              1404252-18              1497058-26               1644623-8  #>            2.011494e-04            8.620690e-05            2.011494e-04  #>              1644623-26          230P06005897-8          230P06005897-9  #>            4.161712e-06            2.011494e-04            2.011494e-04  #>         230P06005898-20         230P06005898-21                10998-V2  #>            2.011494e-04            2.011494e-04            1.571932e-05  #>                  1004.1                  1008.1                  1019.1  #>            1.962943e-02            1.962943e-02            1.962943e-02  #>                  1021.1                  1030.1                  1031.1  #>            3.128552e-05            1.962943e-02            1.962943e-02  #>                  1032.1                  1033.1                    1041  #>            1.962943e-02            1.877131e-04            1.962943e-02  #>                    1044                    1055                  2029.1  #>            1.962943e-02            1.962943e-02            1.962943e-02  #>                  2043.1                  2091.1                    2092  #>            1.962943e-02            1.962943e-02            1.673328e-04  #>                    2096                  2099.1                  2108.1  #>            1.962943e-02            1.962943e-02            1.962943e-02  #>                  2108.2                  2110.4                  4088.1  #>            1.877131e-04            1.962943e-02            3.271572e-03  #>                  4089.1                    4120                  4122.4  #>            1.962943e-02            1.962943e-02            1.962943e-02  #>                    4131                  4143.1                  4144.1  #>            1.962943e-02            3.271572e-03            1.962943e-02  #>                  4146.1                    4154                  4158.2  #>            1.962943e-02            3.128552e-05            1.962943e-02  #>                  4167.1                  4168.2                  4169.1  #>            1.877131e-04            1.877131e-04            1.962943e-02  #>                  4172.2                  4173.2                  5013.1  #>            1.962943e-02            3.271572e-03            1.962943e-02  #>                    5019                  1020.1                  2018.1  #>            1.962943e-02            1.138507e-02            1.962943e-02  #>                  2148.1                  2153.3                  2157.3  #>            1.962943e-02            1.962943e-02            1.877131e-04  #>                    2176                    2178                    2179  #>            1.962943e-02            1.962943e-02            1.877131e-04  #>                    2180                    2181                    2183  #>            1.962943e-02            1.962943e-02            1.962943e-02  #>                    2184                    2190                    2192  #>            1.962943e-02            1.962943e-02            1.877131e-04  #>                    2193                    2194                    2195  #>            1.962943e-02            1.795071e-06            1.962943e-02  #>                    2206                    2220                    4215  #>            1.962943e-02            1.962943e-02            1.962943e-02  #>                    4242                  4251.1                  4252.1  #>            1.962943e-02            1.962943e-02            1.962943e-02  #>                    4280                    4297                  4301.1  #>            1.877131e-04            1.877131e-04            1.877131e-04  #>                  4318.1                  4320.1                    5410  #>            1.962943e-02            1.962943e-02            1.962943e-02  #>                  5448.1                  5449.1                    5450  #>            1.962943e-02            1.673328e-04            1.962943e-02  #>                    5451                    5464                    5467  #>            1.877131e-04            1.962943e-02            1.795071e-06  #>             WA12-101402              WA9-111302                    2027  #>            1.269976e-02            2.024096e-05            1.600177e-06  #>                    1105                    2222                  2234.1  #>            1.962943e-02            1.962943e-02            3.271572e-03  #>                  2234.2                  2235.1                  2235.2  #>            3.128552e-05            3.271572e-03            1.877131e-04  #>                    2236                 2236.10                  2236.6  #>            1.877131e-04            1.962943e-02            1.962943e-02  #>                  2236.7                  2243.1                  2243.3  #>            1.962943e-02            1.877131e-04            1.962943e-02  #>                  2243.5                  2243.6                  2243.8  #>            1.962943e-02            1.962943e-02            1.962943e-02  #>                    2271                    2274                    2295  #>            1.962943e-02            1.962943e-02            1.962943e-02  #>                  2336.1                  2336.2                  2336.3  #>            1.962943e-02            1.962943e-02            1.962943e-02  #>                  2336.4                  2336.5                    2340  #>            1.962943e-02            1.962943e-02            1.795071e-06  #>                    2344                    2402                  2404.1  #>            1.962943e-02            3.271572e-03            1.962943e-02  #>                    2424                    2542                    2552  #>            1.962943e-02            1.620370e-03            1.962943e-02  #>                  2554.4                  2554.5                    2572  #>            1.962943e-02            1.877131e-04            1.308629e-04  #>                    2598                  2611.1                  2611.2  #>            1.877131e-04            1.962943e-02            1.962943e-02  #>                  2611.3                    2615                  2617.1  #>            1.962943e-02            1.962943e-02            1.962943e-02  #>                  2617.2                  2617.3                  2622.1  #>            1.962943e-02            1.962943e-02            1.962943e-02  #>                  2622.2                  2622.3                    2624  #>            1.962943e-02            1.962943e-02            1.962943e-02  #>                    2628                    2631                    2634  #>            1.962943e-02            1.795071e-06            1.308629e-04  #>                  2641.1                  2641.2                    2642  #>            1.962943e-02            1.962943e-02            1.962943e-02  #>                    2643                    2644                  2644.1  #>            1.877131e-04            1.962943e-02            1.962943e-02  #>                  2644.2                  2644.3                    2647  #>            1.962943e-02            1.962943e-02            1.962943e-02  #>                  2647.1                  2647.2                    2648  #>            1.962943e-02            1.962943e-02            1.962943e-02  #>                    2649                  2649.1                    4239  #>            3.271572e-03            1.962943e-02            1.962943e-02  #>                    4240                    4347                    4349  #>            1.962943e-02            1.795071e-06            1.673328e-04  #>                    4351                    4352                    4353  #>            3.271572e-03            3.271572e-03            3.271572e-03  #>                    4354                    4355                    4358  #>            1.962943e-02            1.962943e-02            1.962943e-02  #>                    4359                    4361                    4362  #>            1.877131e-04            1.877131e-04            1.962943e-02  #>                    4364                    4367                    4375  #>            1.877131e-04            3.128552e-05            3.271572e-03  #>                    4377                    4378                    4379  #>            1.962943e-02            1.962943e-02            1.962943e-02  #>                    4380                    4382                    4383  #>            1.962943e-02            1.962943e-02            1.962943e-02  #>                    4396                  4400.1             WA12-030403  #>            1.877131e-04            3.128552e-05            1.269976e-02  #>           WA12-1-101403           WA12-1-111003             WA12-112403  #>            1.269976e-02            1.269976e-02            1.269976e-02  #>           WA12-2-031803           WA12-2-111003           WA12-3-091603  #>            1.269976e-02            1.269976e-02            1.269976e-02  #>           WA12-3-111003           WA12-4-081803           WA15-1-031803  #>            1.269976e-02            1.269976e-02            1.161367e-06  #>           WA15-3-080403            WA1-7-031803            WA4-4-031803  #>            5.474034e-03            2.116626e-03            1.269976e-02  #>            WA9.1-030403       WA9-081803 = 1712                    2234  #>            2.024096e-05            1.214458e-04            7.180284e-08  #>                 2222.12                    2294                    2452  #>            1.962943e-02            1.962943e-02            1.962943e-02  #>                    2486                    2561                    2562  #>            1.962943e-02            7.851772e-04            7.851772e-04  #>                    2595                    2849                    2850  #>            1.962943e-02            1.962943e-02            1.877131e-04  #>                    2851                  2965.2                    2976  #>            1.962943e-02            1.877131e-04            1.962943e-02  #>                    2985                    2987                    2988  #>            1.962943e-02            1.962943e-02            1.877131e-04  #>                    4542                    9004                    9013  #>            1.962943e-02            1.962943e-02            1.877131e-04  #>                    9022                    9023                    9032  #>            1.962943e-02            1.962943e-02            1.962943e-02  #>                    9034                    9038        WA1.2BA15-030104  #>            1.877131e-04            1.962943e-02            1.214458e-04  #>              WA1-011304              WA1-032204             WA12-011304  #>            1.269976e-02            1.214458e-04            1.269976e-02  #>             WA12-012604             WA12-040504             WA12-051704  #>            1.269976e-02            1.269976e-02            2.116626e-03  #>           WA12-2-032204             WA16-011304             WA27-040504  #>            1.214458e-04            1.269976e-02            1.269976e-02  #>             WA27-071904              WA9-020904                    4384  #>            1.269976e-02            1.269976e-02            1.795071e-06  #>             WA27-040205                    9488                   11075  #>            1.269976e-02            6.392045e-03            1.420455e-03  #>                 10490.1                 10490.2                 10490.3  #>            1.041667e-02            1.041667e-02            1.041667e-02  #>                 10490.4                 10491.1                 10491.2  #>            1.041667e-02            2.083333e-02            2.083333e-02  #>                 10491.3                 10492.1                 10492.2  #>            2.083333e-02            2.083333e-02            2.083333e-02  #>                 10492.3                 10492.4                 10492.5  #>            2.083333e-02            2.083333e-02            2.083333e-02  #>                 10492.6                   10493                 10496.1  #>            2.083333e-02            2.083333e-02            2.083333e-02  #>                 10496.2                 10496.3                 10497.1  #>            2.083333e-02            2.083333e-02            2.083333e-02  #>                 10497.2                 10497.3                 11745.1  #>            6.313131e-04            2.083333e-02            2.083333e-02  #>                 11745.2                 11745.3                 11761.1  #>            2.083333e-02            2.083333e-02            2.083333e-02  #>                 11761.2                 11761.3                 11761.4  #>            2.083333e-02            2.083333e-02            2.083333e-02  #>                 11761.5                 11762.1                 11762.2  #>            6.313131e-04            2.083333e-02            2.083333e-02  #>                 11762.3                 11803.1                 11803.2  #>            2.083333e-02            2.083333e-02            2.083333e-02  #>                 11803.3                 11805.1                 11805.2  #>            2.083333e-02            2.083333e-02            2.083333e-02  #>                 11805.3                   11806                 11807.1  #>            2.083333e-02            2.083333e-02            2.083333e-02  #>                 11807.2                 11807.3                 11808.1  #>            2.083333e-02            2.083333e-02            2.083333e-02  #>                 11808.2                 11808.3                 11810.1  #>            2.083333e-02            2.083333e-02            2.083333e-02  #>                 11810.2                 11810.3                 11812.1  #>            2.083333e-02            2.083333e-02            2.083333e-02  #>                 11812.2                 11812.3                 11819.1  #>            2.083333e-02            2.083333e-02            2.083333e-02  #>                 11819.2                 11819.3                 11819.4  #>            2.083333e-02            2.083333e-02            2.083333e-02  #>                 11819.5                 11819.6                 11855.1  #>            2.083333e-02            2.083333e-02            2.083333e-02  #>                 11855.2                 11913.1                 11913.2  #>            2.083333e-02            2.083333e-02            2.083333e-02  #>                 11913.3                 11914.1                 11914.2  #>            2.083333e-02            2.083333e-02            2.083333e-02  #>                 11914.3                   11349                   11372  #>            2.083333e-02            7.520053e-04            1.671123e-04  #>              11798x7535              11799x7517                10794-V5  #>            1.041667e-02            2.083333e-02            3.240741e-04  #>                11466-V2                11466-V5                11540-V3  #>            8.847122e-05            8.847122e-05            3.240741e-03  #>                   11160                   11955                   13150  #>            2.083333e-02            2.083333e-02            1.041667e-02  #>                 13153.1                 13153.2                   13155  #>            4.861111e-03            4.861111e-03            2.083333e-02  #>                   13184                   13185                   13205  #>            2.083333e-02            1.190476e-03            2.083333e-02  #>                   13206                   13207                   13228  #>            2.083333e-02            1.041667e-02            1.041667e-02  #>                   13154                   11956                   13226  #>            2.083333e-02            2.083333e-02            1.041667e-02  #>                   13227                  2043_1                  2138_1  #>            1.041667e-02            1.962943e-02            1.962943e-02  #>                  2157_3                   11001                   13592  #>            1.877131e-04            9.722222e-04            4.861111e-03  #>            WA12S-091713              13746-9105              13766-9120  #>            1.673328e-04            4.166667e-03            1.877131e-04  #>              13767-9121              13773-9138              13774-9174  #>            1.877131e-04            1.962943e-02            1.041141e-06  #>              13778-9175              13780-9139              13781-9123  #>            3.128552e-05            1.962943e-02            1.673328e-04  #>              13782-9140              13785-9142              13786-9143  #>            1.962943e-02            4.629630e-04            4.629630e-04  #>              13787-9144              13788-9145              13789-9146  #>            4.629630e-04            2.558480e-04            4.861111e-03  #>              13790-9147                   13835              13844-9176  #>            2.558480e-04            3.086420e-04            1.543210e-04  #>              13845-9124              13846-9108              13847-9109  #>            4.861111e-03            3.240741e-03            2.558480e-04  #>              13849-9110              13850-9111              13859-9112  #>            2.083333e-02            3.125000e-02            2.083333e-02  #>              13860-9148              13861-9113              13862-9114  #>            2.083333e-02            1.190476e-03            1.190476e-03  #>              13863-9115              13867-9117              13870-9149  #>            2.083333e-02            5.208333e-03            1.877131e-04  #>              13875-9132              13878-9151              13879-9152  #>            1.877131e-04            4.861111e-03            4.050926e-03  #>              13881-9153              13883-9133              13885-9177  #>            4.873294e-06            7.716049e-05            3.240741e-04  #>              13886-9154              13887-9202                   13888  #>            1.620370e-03            3.240741e-04            5.692535e-03  #>              13889-9161              13891-9162              13893-9178  #>            3.271572e-03            9.722222e-04            2.430556e-03  #>              13895-9155              13900-9156              13902-9157  #>            4.861111e-03            4.861111e-03            7.520053e-04  #>              13903-9179              13904-9180              13905-9181  #>            1.138507e-02            1.410160e-03            7.520053e-04  #>              13906-9163              13908-9164              13909-9158  #>            7.520053e-04            7.520053e-04            1.877131e-04  #>                   13916              13917-9182              13918-9203  #>            2.430556e-03            4.861111e-03            4.861111e-03  #>              13919-9183              13920-9159              13927-9185  #>            4.861111e-03            4.861111e-03            1.041667e-02  #>              13928-9186              13929-9187            13930-A-9188  #>            2.083333e-02            2.083333e-02            2.083333e-02  #>                 13930-B              13932-9189              13933-9190  #>            2.083333e-02            4.861111e-03            1.620370e-03  #>                   13934              13942-9194                   13945  #>            7.812500e-03            1.388889e-04            3.086420e-04  #>              13951-9195              13952-9196              13954-9197  #>            1.785714e-03            2.083333e-02            1.190476e-03  #>              13955-9198              13957-9199              13958-9200  #>            1.190476e-03            2.083333e-02            1.785714e-03  #>              13959-9206              13960-9207              14001-9208  #>            3.125000e-02            3.125000e-02            3.240741e-03  #>                   14002              14003-9209                   14004  #>            4.861111e-03            2.916667e-03            9.722222e-04  #>                   14005              14006-9210              14007-9211  #>            1.620370e-03            1.620370e-03            1.620370e-03  #>              14008-9212                   14023                   14024  #>            1.620370e-03            1.041667e-02            1.785714e-03  #>                   14028                   14033                   14035  #>            2.083333e-02            9.259259e-05            3.086420e-04  #>                   14036                   14056              13872-9150  #>            9.259259e-05            2.916667e-03            1.962943e-02  #>                   13893              13931-9204                   13600  #>            4.861111e-03            2.430556e-03            3.271572e-03  #>                   13632                   13635                   13655  #>            1.671123e-04            4.166667e-03            2.558480e-04  #>                   13661                   13662                   13663  #>            4.861111e-03            3.240741e-03            1.535088e-04  #>                   13690                   13692                   13694  #>            4.873294e-06            4.629630e-05            9.722222e-04  #>                   13695                   13698                   13699  #>            5.116959e-05            6.481481e-04            4.861111e-03  #>                   13711                   13716                   13735  #>            9.259259e-05            1.535088e-04            4.861111e-03  #>                   13737                   13738                   13739  #>            1.620370e-03            3.240741e-03            3.240741e-03  #>                   13744                   13747                   13748  #>            3.240741e-03            4.166667e-03            4.166667e-03  #>                   13749                   13751                   13753  #>            2.083333e-03            4.166667e-03            4.166667e-03  #>              H-2-040113                   13801                   13802  #>            1.671123e-04            5.116959e-05            1.620370e-03  #>                   13805                   13824                   13825  #>            5.116959e-05            4.166667e-03            1.877131e-04  #>                   13826                   13827                   13828  #>            1.795071e-06            1.877131e-04            4.166667e-03  #>                   13830                   13831                   13832  #>            1.962943e-02            8.847122e-05            4.166667e-03  #>                   13837                   13838                   13839  #>            4.166667e-03            4.166667e-03            4.166667e-03  #>                   13840                   13841                   13842  #>            5.208333e-04            4.166667e-03            7.520053e-04  #>                  2157-3              11001-8874                  2027-1  #>            1.877131e-04            9.722222e-04            1.962943e-02  #>                  2138-1                   13873                   14040  #>            1.962943e-02            1.877131e-04            4.873294e-06  #>                   14041                   14042                   14043  #>            9.259259e-05            1.624431e-06            9.259259e-05  #>                   14044                   14046                   14047  #>            1.543210e-04            4.861111e-03            7.520053e-04  #>                   14049                   14077                   14078  #>            1.620370e-03            8.847122e-05            8.847122e-05  #>                   14079                   14080                   14081  #>            8.847122e-05            8.847122e-05            8.847122e-05  #>                   14082                   14083                   14085  #>            8.847122e-05            8.847122e-05            2.916667e-03  #>                   14092                   14093                   14107  #>            4.861111e-03            4.861111e-03            4.861111e-03  #>                   14108                   14112                   14113  #>            4.861111e-03            4.861111e-03            4.861111e-03  #>                   14114                   14115                   14116  #>            2.558480e-04            3.240741e-03            2.314815e-04  #>                   14119                   14120                   14121  #>            4.861111e-03            4.861111e-03            4.861111e-03  #>                   14122                   14123                   14131  #>            4.861111e-03            4.861111e-03            4.861111e-03  #>                   14132                 14045-a                 14045-b  #>            4.861111e-03            4.861111e-03            4.861111e-03  #>                   13971                   13977                   14129  #>            7.520053e-04            1.620370e-03            1.420455e-03  #>                   14135                   14136                 14137.1  #>            1.420455e-03            8.847122e-05            8.847122e-05  #>                   14138                   14139                   14141  #>            2.893519e-03            8.847122e-05            4.861111e-03  #>                   14142                   14145                   14149  #>            1.944444e-03            5.208333e-04            4.861111e-03  #>                   14151                   14152                   14153  #>            7.520053e-04            7.520053e-04            7.520053e-04  #>                   14156                   14159                   14160  #>            1.620370e-03            2.916667e-03            7.520053e-04  #>                   14161                   14162                   14164  #>            1.877131e-04            7.520053e-04            6.392045e-03  #>                   14165                   14167                   14168  #>            2.916667e-03            1.620370e-03            4.861111e-03  #>                   14169                   14171                   14172  #>            2.558480e-04            4.861111e-03            1.279240e-04  #>                   14174                   14175             WA84-121613  #>            1.795071e-06            9.259259e-05            4.861111e-03   ## Rare Allele Correction --------------------------------------------------- ## # If you don't supply a table of frequencies, they are calculated with rraf  # with correction = TRUE. This is normally benign when analyzing large  # populations, but it can have a great effect on small populations. To help  # control this, you can supply arguments described in  # help(\"rare_allele_correction\").    # Default is to correct by 1/n per population. Since the calculation is  # performed on a smaller sample size due to round robin clone correction, it # would be more appropriate to correct by 1/rrmlg at each locus. This is  # acheived by setting d = \"rrmlg\". Since this is a diploid, we would want to # account for the number of chromosomes, and so we set mul = 1/2 head(pgen(Pram, log = FALSE, d = \"rrmlg\", mul = 1/2)) # compare with the output above #>             PrMS6A1 Pr9C3A1 PrMS39A1 PrMS45A1   PrMS43A1 #> 1411152-10B     0.5     0.5     0.15      0.5 0.11111111 #> 82              0.5     0.5     0.35      0.5 0.11111111 #> 83              0.5     0.5     0.15      0.5 0.05555556 #> 84              0.5     0.5     0.35      0.5 0.11111111 #> 85              0.5     0.5     0.35      0.5 0.22222222 #> 81-NM-1         0.5     0.5     0.35      0.5 0.11111111  # If you wanted to treat all alleles as equally rare, then you would set a # specific value (let's say the rare alleles are 1/100): head(pgen(Pram, log = FALSE, e = 1/100)) #>             PrMS6A1 Pr9C3A1 PrMS39A1 PrMS45A1    PrMS43A1 #> 1411152-10B     0.5     0.5     0.15      0.5 0.111111111 #> 82              0.5     0.5     0.35      0.5 0.111111111 #> 83              0.5     0.5     0.15      0.5 0.003333333 #> 84              0.5     0.5     0.35      0.5 0.006666667 #> 85              0.5     0.5     0.35      0.5 0.222222222 #> 81-NM-1         0.5     0.5     0.35      0.5 0.111111111 # }"},{"path":"/reference/plot_filter_stats.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the results of filter_stats ‚Äî plot_filter_stats","title":"Plot the results of filter_stats ‚Äî plot_filter_stats","text":"Plot results filter_stats","code":""},{"path":"/reference/plot_filter_stats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the results of filter_stats ‚Äî plot_filter_stats","text":"","code":"plot_filter_stats(   x,   fstats,   distmat,   cols = NULL,   nclone = NULL,   breaks = NULL )"},{"path":"/reference/plot_filter_stats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the results of filter_stats ‚Äî plot_filter_stats","text":"x genlight genind object fstats list passed filter_stats distmat distance matrix passed filter_stats cols colors use algorithm (defaults RColorBrewer set 1) nclone see filter_stats","code":""},{"path":"/reference/plot_filter_stats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the results of filter_stats ‚Äî plot_filter_stats","text":"plot depicting many MLLs collapsed genetic distance    increases algorithm.","code":""},{"path":"/reference/plot_filter_stats.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Plot the results of filter_stats ‚Äî plot_filter_stats","text":"function originally appeared    doi:10.5281/zenodo.17424","code":""},{"path":"/reference/plot_filter_stats.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Plot the results of filter_stats ‚Äî plot_filter_stats","text":"ZN Kamvar, JC Brooks, NJ Gr√ºnwald. 2015. Supplementary Material Frontiers Plant Genetics Genomics 'Novel R tools analysis genome-wide population genetic data emphasis clonality'. DOI: doi:10.5281/zenodo.17424 Kamvar ZN, Brooks JC Gr√ºnwald NJ (2015) Novel R tools analysis  genome-wide population genetic data emphasis clonality. Front. Genet. 6:208. doi: doi:10.3389/fgene.2015.00208","code":""},{"path":[]},{"path":"/reference/plot_filter_stats.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plot the results of filter_stats ‚Äî plot_filter_stats","text":"Zhian N. Kamvar","code":""},{"path":"/reference/plot_poppr_msn.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot minimum spanning networks produced in poppr. ‚Äî plot_poppr_msn","title":"Plot minimum spanning networks produced in poppr. ‚Äî plot_poppr_msn","text":"function allows take output poppr.msn bruvo.msn  customize plot labeling groups individuals, size nodes,  adjusting palette scale bar.","code":""},{"path":"/reference/plot_poppr_msn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot minimum spanning networks produced in poppr. ‚Äî plot_poppr_msn","text":"","code":"plot_poppr_msn(   x,   poppr_msn,   gscale = TRUE,   gadj = 3,   mlg.compute = \"original\",   glim = c(0, 0.8),   gweight = 1,   wscale = TRUE,   nodescale = 10,   nodebase = NULL,   nodelab = 2,   inds = \"ALL\",   mlg = FALSE,   quantiles = TRUE,   cutoff = NULL,   palette = NULL,   layfun = layout.auto,   beforecut = FALSE,   pop.leg = TRUE,   size.leg = TRUE,   scale.leg = TRUE,   ... )"},{"path":"/reference/plot_poppr_msn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot minimum spanning networks produced in poppr. ‚Äî plot_poppr_msn","text":"x genind, genclone, genlight, snpclone object poppr_msn derived. poppr_msn list produced either poppr.msn  bruvo.msn. list contain graph, vector  population names vector hexadecimal color definitions  population. gscale \"grey scale\". TRUE, scale color edges proportional observed distance, lines becoming darker related nodes. See greycurve details. gadj \"grey adjust\". positive integer greater zero serve exponent edge weight scale grey value represent weight. mlg.compute multilocus genotypes set \"custom\" (see  mll.custom details) genclone object,  specify mlg level calculate nodes . See details. glim \"grey limit\". Two numbers zero one. determine  upper lower limits gray function. Default 0 (black) 0.8 (20% black). gweight \"grey weight\". integer. 1, grey scale weighted emphasize differences closely related nodes. 2, grey scale weighted emphasize differences distantly related nodes. wscale \"width scale\". TRUE, edge widths  scaled proportional inverse observed distance ,  lines becoming thicker related nodes. nodescale numeric indicating scale node sizes (scales area). nodebase deprecated numeric indicating base logarithm used scale node sizes. Defaults 1.15. See details. nodelab integer specifying smallest size node  label. See details. inds character numeric vector indicating samples multilocus genotypes label graph. See details. mlg logical TRUE, nodes labeled multilocus genotype. FALSE (default), nodes labeled sample names. quantiles logical. set TRUE (default), scale bar composed quantiles observed edge weights.  set FALSE, scale bar composed smooth gradient  minimum edge weight maximum edge weight. cutoff number indicating longest distance display  graph. performed removing edges weights greater  number. palette function character corresponding specific palette  want use delimit populations. default whatever  palette used produce original graph. layfun function specifying layout nodes graph.  defaults layout.auto. beforecut TRUE, layout graph computed  edges removed cutoff. FALSE (Default), layout computed edges removed. pop.leg TRUE, legend indicating populations appear top right corner graph, overlap. Setting pop.leg = FALSE disables legend. See details. size.leg TRUE, legend displyaing number samples per node appear either population legend top right corner graph. Setting size.leg = FALSE disables legend. scale.leg TRUE, scale bar indicating distance appear graph. Setting scale.leg = FALSE suppresses bar. See details. ... parameters passed  plot.igraph.","code":""},{"path":"/reference/plot_poppr_msn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot minimum spanning networks produced in poppr. ‚Äî plot_poppr_msn","text":"modified msn list, invisibly.","code":""},{"path":"/reference/plot_poppr_msn.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot minimum spanning networks produced in poppr. ‚Äî plot_poppr_msn","text":"previous incarnation msn plotting poppr simply plotted   minimum spanning network legend populations,    provide scale bar provide user simple way    manipulating layout labels. function allows user    manipulate many facets graph creation, making creation minimum    spanning networks ever slightly user friendly. function must source data output msn work.    source data must contain population structure graph.    Every parameter default setting.","code":""},{"path":"/reference/plot_poppr_msn.html","id":"parameter-details","dir":"Reference","previous_headings":"","what":"Parameter details","title":"Plot minimum spanning networks produced in poppr. ‚Äî plot_poppr_msn","text":"inds default, graph label node (circle)   samples (individuals) contained within node.   node represents single multilocus genotype (MLG) individuals (n   >= 1), argument designed allow selectively label   nodes based query sample name MLG number. option mlg   = TRUE, multilocus genotype assignment used label node.   want label nodes individual multilocus genotype,   simply set name exist data. nodescale nodes (circles) graph represent different   multilocus genotypes. area nodes represent number   individuals. Setting nodescale scale area nodes. nodelab node labeled individual,   label size nodes greater equal value.   want label size nodes, simply set high   number. cutoff useful want investigate groups   multilocus genotypes separated specific distance two   distinct populations want physically separate   network. beforecut indicator useful want maintain   position nodes removing edges   cutoff argument. works best set seed run   function.","code":""},{"path":"/reference/plot_poppr_msn.html","id":"mlg-compute","dir":"Reference","previous_headings":"","what":"mlg.compute","title":"Plot minimum spanning networks produced in poppr. ‚Äî plot_poppr_msn","text":"node graph represents different multilocus genotype.    edges graph represent genetic distances connect   multilocus genotypes. genclone objects, possible set   multilocus genotypes custom definition. creates problem   clone correction, however, possible define custom lineages   monophyletic. clone correction performed   definitions, information lost graph. circumvent ,   clone correction done via computed multilocus genotypes, either   \"original\" \"contracted\". specified mlg.compute   argument, .","code":""},{"path":"/reference/plot_poppr_msn.html","id":"legends","dir":"Reference","previous_headings":"","what":"legends","title":"Plot minimum spanning networks produced in poppr. ‚Äî plot_poppr_msn","text":"avoid drawing legend graph, legends    separated different plotting areas. means legends    included, plot multiple MSNs single plot. scale bar (  added manually) can obtained greycurve   legend can plotted legend.","code":""},{"path":[]},{"path":"/reference/plot_poppr_msn.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plot minimum spanning networks produced in poppr. ‚Äî plot_poppr_msn","text":"Zhian N. Kamvar","code":""},{"path":"/reference/plot_poppr_msn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot minimum spanning networks produced in poppr. ‚Äî plot_poppr_msn","text":"","code":"# Using a data set of the Aphanomyces eutieches root rot pathogen. data(Aeut) adist <- diss.dist(Aeut, percent = TRUE) amsn <- poppr.msn(Aeut, adist, showplot = FALSE)  # Default library(\"igraph\") # To get all the layouts. #>  #> Attaching package: ‚Äòigraph‚Äô #> The following objects are masked from ‚Äòpackage:ape‚Äô: #>  #>     degree, edges, mst, ring #> The following objects are masked from ‚Äòpackage:stats‚Äô: #>  #>     decompose, spectrum #> The following object is masked from ‚Äòpackage:base‚Äô: #>  #>     union set.seed(500) plot_poppr_msn(Aeut, amsn, gadj = 15)   # \\dontrun{  # Different layouts (from igraph) can be used by supplying the function name. set.seed(500) plot_poppr_msn(Aeut, amsn, gadj = 15, layfun = layout_with_kk)   # Removing link between populations (cutoff = 0.2) and labelling no individuals set.seed(500) plot_poppr_msn(Aeut, amsn, inds = \"none\", gadj = 15, beforecut = TRUE, cutoff = 0.2)   # Labelling individual #57 because it is an MLG that crosses populations # Showing clusters of MLGS with at most 5% variation # Notice that the Mt. Vernon population appears to be more clonal set.seed(50)  plot_poppr_msn(Aeut, amsn, gadj = 15, cutoff = 0.05, inds = \"057\")    data(partial_clone) pcmsn <- bruvo.msn(partial_clone, replen = rep(1, 10))   # You can plot using a color palette or a vector of named colors # Here's a way to define the colors beforehand pc_colors <- nPop(partial_clone) %>%    RColorBrewer::brewer.pal(\"Set2\") %>%    setNames(popNames(partial_clone))  pc_colors #>         1         2         3         4  #> \"#66C2A5\" \"#FC8D62\" \"#8DA0CB\" \"#E78AC3\"   # Labelling the samples contained in multilocus genotype 9 set.seed(999) plot_poppr_msn(partial_clone, pcmsn, palette = pc_colors, inds = 9)  # Doing the same thing, but using one of the sample names as input. set.seed(999) plot_poppr_msn(partial_clone, pcmsn, palette = pc_colors, inds = \"sim 20\")   # Note that this is case sensitive. Nothing is labeled.  set.seed(999) plot_poppr_msn(partial_clone, pcmsn, palette = pc_colors, inds = \"Sim 20\")   # Something pretty data(microbov) mdist <- diss.dist(microbov, percent = TRUE) micmsn <- poppr.msn(microbov, mdist, showplot = FALSE)  plot_poppr_msn(microbov, micmsn, palette = \"terrain.colors\", inds = \"n\",    quantiles = FALSE)  plot_poppr_msn(microbov, micmsn, palette = \"terrain.colors\", inds = \"n\",    cutoff = 0.3, quantiles = FALSE)     ### Utilizing vectors for palettes  data(Pram) Pram_sub <- popsub(Pram, exclude = c(\"Nursery_CA\", \"Nursery_OR\"))  # Creating the network for the forest min_span_net_sub <- bruvo.msn(Pram_sub, replen = other(Pram)$REPLEN,                                add = TRUE, loss = TRUE, showplot = FALSE,                                include.ties = TRUE)                                # Creating the network with nurseries min_span_net     <- bruvo.msn(Pram, replen = other(Pram)$REPLEN,                                add = TRUE, loss = TRUE, showplot = FALSE,                                include.ties = TRUE)  # Only forest genotypes set.seed(70) plot_poppr_msn(Pram,                min_span_net_sub,                inds = \"ALL\",                mlg = TRUE,                gadj = 9,                nodescale = 5,                palette = other(Pram)$comparePal,                cutoff = NULL,                quantiles = FALSE,                beforecut = TRUE)   # With Nurseries set.seed(70) plot_poppr_msn(Pram,                min_span_net,                inds = \"ALL\",                mlg = TRUE,                gadj = 9,                nodescale = 5,                palette = other(Pram)$comparePal,                cutoff = NULL,                quantiles = FALSE,                beforecut = TRUE)  # }"},{"path":"/reference/poppr-package.html","id":null,"dir":"Reference","previous_headings":"","what":"The poppr R package ‚Äî poppr-package","title":"The poppr R package ‚Äî poppr-package","text":"Poppr provides tools population genetic analysis include genotypic diversity measures, genetic distances bootstrap support, native organization handling population hierarchies, clone correction. cite poppr, please use citation(\"poppr\"). referring poppr manuscript, please use lower case unless occurs beginning sentence.","code":""},{"path":"/reference/poppr-package.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The poppr R package ‚Äî poppr-package","text":"package relies adegenet package. built around genind genlight object. Genind objects store genetic information table allele frequencies genlight objects store SNP data efficiently packing binary allele calls single bits. Poppr extended object new objects called genclone snpclone, respectively. objects designed analysis clonal organisms add @mlg slot keeping track multilocus genotypes multilocus lineages.","code":""},{"path":"/reference/poppr-package.html","id":"documentation","dir":"Reference","previous_headings":"","what":"Documentation","title":"The poppr R package ‚Äî poppr-package","text":"Documentation available function typing ?function_name R console. Detailed topic explanations live package vignettes: Essential functions importing manipulating data detailed within Data import manipulation vignette, details algorithms used poppr within Algorithms equations vignette, details working multilocus genotypes Multilocus Genotype Analysis. Examples analyses available primer written Niklaus J. Gr√ºnwald, Zhian N. Kamvar, Sydney E.  Everhart https://grunwaldlab.github.io/Population_Genetics_in_R/.","code":""},{"path":"/reference/poppr-package.html","id":"getting-help","dir":"Reference","previous_headings":"","what":"Getting help","title":"The poppr R package ‚Äî poppr-package","text":"specific question issue poppr, feel free contribute google group https://groups.google.com/d/forum/poppr. find bug github user, can submit bug reports https://github.com/grunwaldlab/poppr/issues. Otherwise, leave message groups. Personal emails highly discouraged allow others learn.","code":""},{"path":"/reference/poppr-package.html","id":"functions-in-poppr","dir":"Reference","previous_headings":"","what":"Functions in poppr","title":"The poppr R package ‚Äî poppr-package","text":"descriptions links functions found poppr. aware functions adegenet also available. functions documented : function_name() (data type) - Description ‚Äòdata type‚Äô refers type data can used:","code":""},{"path":"/reference/poppr-package.html","id":"data-import-export","dir":"Reference","previous_headings":"","what":"Data import/export","title":"The poppr R package ‚Äî poppr-package","text":"getfile() (x) - Provides quick GUI grab files import read.genalex() (x) - Reads GenAlEx formatted csv files genind object genind2genalex() (m) - Converts genind objects GenAlEx formatted csv files genclone2genind() (m) - Removes @mlg slot genclone objects .genambig() (m) - Converts genind data polysat's genambig data structure. bootgen2genind() (x) - see aboot() details)","code":""},{"path":"/reference/poppr-package.html","id":"data-structures","dir":"Reference","previous_headings":"","what":"Data Structures","title":"The poppr R package ‚Äî poppr-package","text":"Data structures \"genclone\" (based adegenet's genind) \"snpclone\" (based adegenet's genlight large SNP data sets). data structures defined presence extra MLG slot representing multilocus genotype assignments, can numeric vector MLG class object. genclone - Handles microsatellite, presence/absence, small SNP data sets snpclone - Designed handle larger binary SNP data sets. MLG - internal class holding data frame multilocus genotype assignments acts like vector, allowing user easily switch different MLG definitions. bootgen - internal class used explicitly aboot() inherits gen-class virtual object. designed allow sampling loci replacement. bruvomat - internal class designed handle bootstrapping Bruvo's distance blocks integer loci can shuffled.","code":""},{"path":"/reference/poppr-package.html","id":"data-manipulation","dir":"Reference","previous_headings":"","what":"Data manipulation","title":"The poppr R package ‚Äî poppr-package","text":".genclone() (m) - Converts genind objects genclone objects missingno() (m) - Handles missing data clonecorrect() (m | s) - Clone-censors specified population hierarchy informloci() (m) - Detects removes phylogenetically uninformative loci popsub() (m | s) - Subsets genind objects population shufflepop() (m) - Shuffles genotypes locus using four different shuffling algorithms recode_polyploids() (m | x) - Recodes polyploid data sets missing alleles imported \"0\" make_haplotypes() (m | s) - Splits data pseudo-haplotypes. mainly used AMOVA. test_replen() (m) - Tests inconsistent repeat lengths microsatellite data. use bruvo.dist() functions. fix_replen() (m) - Fixes inconsistent repeat lengths. use bruvo.dist() functions.","code":""},{"path":"/reference/poppr-package.html","id":"genetic-distances","dir":"Reference","previous_headings":"","what":"Genetic distances","title":"The poppr R package ‚Äî poppr-package","text":"bruvo.dist() (m) - Bruvo's distance (see also: fix_replen()) diss.dist() (m) - Absolute genetic distance (see prevosti.dist()) nei.dist() (m | x) - Nei's 1978 genetic distance rogers.dist() (m | x) - Rogers' euclidean distance reynolds.dist() (m | x) - Reynolds' coancestry distance edwards.dist() (m | x) - Edwards' angular distance prevosti.dist() (m | x) - Prevosti's absolute genetic distance bitwise.dist() (s) - Calculates fast pairwise distances genlight objects.","code":""},{"path":"/reference/poppr-package.html","id":"bootstrapping","dir":"Reference","previous_headings":"","what":"Bootstrapping","title":"The poppr R package ‚Äî poppr-package","text":"aboot() (m | s | x) - Creates bootstrapped dendrogram distance measure bruvo.boot() (m) - Produces dendrograms bootstrap support based Bruvo's distance diversity_boot() (x) - Generates boostrap distributions diversity statistics multilocus genotypes diversity_ci() (m | s | x) - Generates confidence intervals multilocus genotype diversity. resample.ia() (m) - Calculates index association subsets data.","code":""},{"path":"/reference/poppr-package.html","id":"multilocus-genotypes","dir":"Reference","previous_headings":"","what":"Multilocus Genotypes","title":"The poppr R package ‚Äî poppr-package","text":"mlg() (m | s) - Calculates number multilocus genotypes mll() (m | s) - Displays current multilocus lineages (genotypes) defined. nmll() (m | s) - mlg(). mlg.crosspop() (m | s) - Finds multilocus genotypes cross populations mlg.table() (m | s) - Returns table populations multilocus genotypes mlg.vector() (m | s) - Returns vector numeric multilocus genotype assignment individual mlg.id() (m | s) - Finds individuals associated single multilocus genotype mlg.filter() (m | s) - Collapses MLGs genetic distance filter_stats() (m | s) - Calculates mlg.filter algorithms plots cutoff_predictor() (x) - Predicts cutoff threshold mlg.filter. mll.custom() (m | s) - Allows custom definition multilocus lineages mll.levels() (m | s) - Allows user change levels custom MLLs. mll.reset() (m | s) - Reset multilocus lineages. diversity_stats() (x) - Creates table diversity indices multilocus genotypes.","code":""},{"path":"/reference/poppr-package.html","id":"index-of-association-analysis","dir":"Reference","previous_headings":"","what":"Index of Association Analysis","title":"The poppr R package ‚Äî poppr-package","text":"Analysis multilocus linkage disequilibrium. ia() (m) - Calculates index association pair.ia() (m) - Calculates index association loci pairs. win.ia() (s) - Index association windows genlight objects. samp.ia() (s) - Index association random subsets loci genlight objects.","code":""},{"path":"/reference/poppr-package.html","id":"population-genetic-analysis","dir":"Reference","previous_headings":"","what":"Population Genetic Analysis","title":"The poppr R package ‚Äî poppr-package","text":"poppr.amova() (m | s) - Analysis Molecular Variance (implemented ade4) poppr() (m | x) - Returns diversity table population poppr.() (m | x) - Returns diversity table population compatible files specified private_alleles() (m) - Tabulates occurrences alleles occur one population. locus_table() (m) - Creates table summary statistics per locus. rrmlg() (m | x) - Round-robin multilocus genotype estimates. rraf() (m) - Round-robin allele frequency estimates. pgen() (m) - Probability genotypes. psex() (m) - Probability observing genotype . rare_allele_correction (m) - rules correcting rare alleles round-robin estimates. incomp() (m) - Check data incomparable samples.","code":""},{"path":"/reference/poppr-package.html","id":"visualization","dir":"Reference","previous_headings":"","what":"Visualization","title":"The poppr R package ‚Äî poppr-package","text":"imsn() (m | s) - Interactive construction visualization minimum spanning networks plot_poppr_msn() (m | s | x) - Plots minimum spanning networks produced poppr scale bar legend greycurve() (x) - Helper determine appropriate parameters adjusting grey level msn functions bruvo.msn() (m) - Produces minimum spanning networks based Bruvo's distance colored population poppr.msn() (m | s | x) - Produces minimum spanning network pairwise distance matrix related data info_table() (m) - Creates heatmap representing missing data observed ploidy genotype_curve() (m | x) - Creates series boxplots demonstrate many markers needed represent diversity data.","code":""},{"path":"/reference/poppr-package.html","id":"datasets","dir":"Reference","previous_headings":"","what":"Datasets","title":"The poppr R package ‚Äî poppr-package","text":"Aeut() - (AFLP) Oomycete root rot pathogen Aphanomyces euteiches (Gr√ºnwald Hoheisel, 2006) monpop() - (SSR) Peach brown rot pathogen Monilinia fructicola (Everhart Scherm, 2015) partial_clone() - (SSR) partially-clonal data simulated via simuPOP (Peng Amos, 2008) Pinf() - (SSR) Potato late blight pathogen Phytophthora infestans (Goss et. al., 2014) Pram() - (SSR) Sudden Oak Death pathogen Phytophthora ramorum (Kamvar et. al., 2015; Goss et. al., 2009)","code":""},{"path":"/reference/poppr-package.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"The poppr R package ‚Äî poppr-package","text":"--------- Papers announcing poppr --------- Kamvar ZN, Tabima JF, Gr√ºnwald NJ. (2014) Poppr: R package genetic analysis populations clonal, partially clonal, /sexual reproduction. PeerJ 2:e281 doi:10.7717/peerj.281 Kamvar ZN, Brooks JC Gr√ºnwald NJ (2015) Novel R tools analysis genome-wide population genetic data emphasis clonality. Front. Genet. 6:208. doi:10.3389/fgene.2015.00208 --------- Papers referencing data sets --------- Gr√ºnwald, NJ Hoheisel, G.. 2006. Hierarchical Analysis Diversity, Selfing, Genetic Differentiation Populations Oomycete Aphanomyces euteiches. Phytopathology 96:1134-1141 doi: doi:10.1094/PHYTO-96-1134 SE Everhart, H Scherm, (2015) Fine-scale genetic structure Monilinia fructicola brown rot epidemics within individual peach tree canopies. Phytopathology 105:542-549 doi: doi:10.1094/PHYTO-03-14-0088-R Bo Peng Christopher Amos (2008) Forward-time simulations nonrandom mating populations using simuPOP. bioinformatics, 24 (11): 1408-1409. Goss, Erica M., Javier F. Tabima, David EL Cooke, Silvia Restrepo, William E. Fry, Gregory . Forbes, Valerie J. Fieland, Martha Cardenas, Niklaus J. Gr√ºnwald. (2014) \"Irish potato famine pathogen Phytophthora infestans originated central Mexico rather Andes.\" Proceedings National Academy Sciences 111:8791-8796. doi: doi:10.1073/pnas.1401884111 Kamvar, Z. N., Larsen, M. M., Kanaskie, . M., Hansen, E. M., & Gr√ºnwald, N. J. (2015). Spatial temporal analysis populations sudden oak death pathogen Oregon forests. Phytopathology 105:982-989. doi: doi:10.1094/PHYTO-12-14-0350-FI Goss, E. M., Larsen, M., Chastagner, G. ., Givens, D. R., Gr√ºnwald, N. J. 2009. Population genetic analysis infers migration pathways Phytophthora ramorum US nurseries. PLoS Pathog. 5:e1000583. doi: doi:10.1371/journal.ppat.1000583","code":""},{"path":"/reference/poppr-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"The poppr R package ‚Äî poppr-package","text":"Zhian N. Kamvar, Jonah C. Brooks, Sydney E. Everhart, Javier F. Tabima, Stacy Krueger-Hadfield, Erik Sotka, Niklaus J. Gr√ºnwald Maintainer: Zhian N. Kamvar","code":""},{"path":"/reference/poppr.all.html","id":null,"dir":"Reference","previous_headings":"","what":"Process a list of files with poppr ‚Äî poppr.all","title":"Process a list of files with poppr ‚Äî poppr.all","text":"poppr.wrapper function loop list files working directory, execute [poppr()], concatenate output one data frame.","code":""},{"path":"/reference/poppr.all.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process a list of files with poppr ‚Äî poppr.all","text":"","code":"poppr.all(filelist, ...)"},{"path":"/reference/poppr.all.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process a list of files with poppr ‚Äî poppr.all","text":"filelist list files current working directory ... arguments passed poppr","code":""},{"path":"/reference/poppr.all.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process a list of files with poppr ‚Äî poppr.all","text":"see [poppr()]","code":""},{"path":[]},{"path":"/reference/poppr.all.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Process a list of files with poppr ‚Äî poppr.all","text":"Zhian N. Kamvar","code":""},{"path":"/reference/poppr.all.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Process a list of files with poppr ‚Äî poppr.all","text":"","code":"# \\dontrun{ # Obtain a list of fstat files from a directory. x <- getfile(multi=TRUE, pattern=\"^.+?dat$\")  # run the analysis on each file. poppr.all(file.path(x$path, x$files)) #>  \\     #>   | File: .  #>  /     #>  #>  File format ( / ) not supported. #>  #> Supported formats are: #> GENETIX (.gtx)  #> FSTAT (.dat)  #> Genepop (.gen) #>   #> STRUCTURE (.str) #> Error in process_file(dat, missing = missing, cutoff = cutoff, clonecorrect = clonecorrect,     strata = strata, keep = keep, quiet = TRUE): is.genind(input) is not TRUE # }"},{"path":"/reference/poppr.amova.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform Analysis of Molecular Variance (AMOVA) on genind or genclone objects. ‚Äî poppr.amova","title":"Perform Analysis of Molecular Variance (AMOVA) on genind or genclone objects. ‚Äî poppr.amova","text":"function simplifies process necessary performing AMOVA R. gives user choice utilizing either ade4 pegas implementation AMOVA. See ade4::amova() (ade4) pegas::amova() (pegas) details specific implementation.","code":""},{"path":"/reference/poppr.amova.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform Analysis of Molecular Variance (AMOVA) on genind or genclone objects. ‚Äî poppr.amova","text":"","code":"poppr.amova(   x,   hier = NULL,   clonecorrect = FALSE,   within = TRUE,   dist = NULL,   squared = TRUE,   freq = TRUE,   correction = \"quasieuclid\",   sep = \"_\",   filter = FALSE,   threshold = 0,   algorithm = \"farthest_neighbor\",   threads = 1L,   missing = \"loci\",   cutoff = 0.05,   quiet = FALSE,   method = c(\"ade4\", \"pegas\"),   nperm = 0 )"},{"path":"/reference/poppr.amova.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform Analysis of Molecular Variance (AMOVA) on genind or genclone objects. ‚Äî poppr.amova","text":"x genind, genclone, genlight, snpclone object hier hierarchical formula defines population hierarchy. (e.g.: ~Population/Subpopulation). See Details . clonecorrect logical TRUE, data set clone corrected respect lowest level hierarchy. default set FALSE. See clonecorrect() details. within logical. set TRUE (Default), variance within individuals calculated well. set FALSE, lowest level hierarchy sample level. See Details . dist optional distance matrix calculated data. set NULL (default), raw pairwise distances calculated via dist(). squared distance matrix supplied, indicates whether represents squared distances. freq logical. within = FALSE, parameter rho calculated (Ronfort et al. 1998; Meirmans Liu 2018). setting freq = TRUE, (default) allele counts converted frequencies distance calculated, otherwise, distance calculated allele counts, can bias results mixed-ploidy data sets. Note option effect haploid presence/absence data sets. correction character defining correction method non-euclidean distances. Options ade4::quasieuclid() (Default), ade4::lingoes(), ade4::cailliez(). See Details . sep Deprecated. poppr version 2, argument serves purpose. filter logical set TRUE, mlg.filter run determine genotypes distance matrix. defaults FALSE. can set parameters algorithm threshold arguments. Note performed within = TRUE. Note threshold number allowable substitutions supply distance matrix. threshold number indicating minimum distance two MLGs must separated considered different. Defaults 0, reflect original (naive) MLG definition. algorithm determines type clustering done. \"farthest_neighbor\" (default) merges clusters based    maximum distance points either cluster. strictest   three. \"nearest_neighbor\" merges clusters based minimum distance   points either cluster. loosest three. \"average_neighbor\" merges clusters based average distance   every pair points clusters. threads integer using filtering genlight objects, parameter specifies number parallel processes passed mlg.filter() /bitwise.dist(). missing specify method correcting missing data utilizing options given function missingno(). Default \"loci\". applies genind genclone objects. cutoff specify level missing data removed/modified. See missingno() details. applies genind genclone objects. quiet logical FALSE (Default), messages regarding corrections printed screen. TRUE, messages printed. method method calculating AMOVA used? Choices refer package implementations: \"ade4\" (default) \"pegas\". See details differences. nperm number permutations passed pegas implementation amova.","code":""},{"path":"/reference/poppr.amova.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform Analysis of Molecular Variance (AMOVA) on genind or genclone objects. ‚Äî poppr.amova","text":"list class amova ade4 pegas package. See ade4::amova() pegas::amova() details.","code":""},{"path":"/reference/poppr.amova.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Perform Analysis of Molecular Variance (AMOVA) on genind or genclone objects. ‚Äî poppr.amova","text":"poppr implementation AMOVA detailed wrapper ade4 implementation. output ade4::amova() class list contains results first four elements. inputs contained last three elements. inputs required ade4 implementation : distance matrix unique genotypes (haplotypes) data frame defining hierarchy distance matrix genotype (haplotype) frequency table. data can constructed genind genlight object, can daunting novice R user. function automates entire process. Since many variables regarding genetic data, points need highlighted:","code":""},{"path":"/reference/poppr.amova.html","id":"on-hierarchies-","dir":"Reference","previous_headings":"","what":"On Hierarchies:","title":"Perform Analysis of Molecular Variance (AMOVA) on genind or genclone objects. ‚Äî poppr.amova","text":"hierarchy defined different population strata separate data hierarchically. strata defined strata slot genind, genlight, genclone, snpclone objects. useful defining population factor data. See function strata() details properly define strata.","code":""},{"path":"/reference/poppr.amova.html","id":"on-within-individual-variance-","dir":"Reference","previous_headings":"","what":"On Within Individual Variance:","title":"Perform Analysis of Molecular Variance (AMOVA) on genind or genclone objects. ‚Äî poppr.amova","text":"Heterozygosities within genotypes sources variation within individuals can quantified AMOVA. within = TRUE, poppr split genotypes haplotypes function make_haplotypes() use calculate within-individual variance. estimation phase made. acts much like default settings AMOVA Arlequin software package. Within individual variance calculated haploid individuals dominant markers haplotypes split . Setting within = FALSE uses euclidean distance allele frequencies within individual. Note: within = TRUE incompatible filter = TRUE. case, within set FALSE","code":""},{"path":"/reference/poppr.amova.html","id":"on-euclidean-distances-","dir":"Reference","previous_headings":"","what":"On Euclidean Distances:","title":"Perform Analysis of Molecular Variance (AMOVA) on genind or genclone objects. ‚Äî poppr.amova","text":"ade4 implementation AMOVA (utilized poppr), distances must Euclidean (due nature calculations). Unfortunately, many genetic distance measures always euclidean must corrected analyzed. Poppr automates three methods implemented ade4, quasieuclid(), lingoes(), cailliez(). correction distances adversely affect outcome analysis.","code":""},{"path":"/reference/poppr.amova.html","id":"on-filtering-","dir":"Reference","previous_headings":"","what":"On Filtering:","title":"Perform Analysis of Molecular Variance (AMOVA) on genind or genclone objects. ‚Äî poppr.amova","text":"Filtering multilocus genotypes performed mlg.filter(). can necessarily done AMOVA tests account within-individual variance. distance matrix used calculate amova derived using mlg.filter() option stats = \"distance\", reports distance multilocus genotype clusters. One useful way utilize feature correct genotypes equivalent distance due missing data. (See example .)","code":""},{"path":"/reference/poppr.amova.html","id":"on-methods-","dir":"Reference","previous_headings":"","what":"On Methods:","title":"Perform Analysis of Molecular Variance (AMOVA) on genind or genclone objects. ‚Äî poppr.amova","text":"ade4 pegas implementations AMOVA, appropriately called \"amova\". ade4 version faster, questions raised validity code utilized. pegas version slower, careful measures implemented accuracy method. must noted appears bug regarding permuting analyses within individual variance accounted (within = TRUE) pegas implementation. want perform permutation analyses pegas implementation, must set within = FALSE. addition, clone correction implemented methods, filtering implemented ade4 version.","code":""},{"path":"/reference/poppr.amova.html","id":"on-polyploids-","dir":"Reference","previous_headings":"","what":"On Polyploids:","title":"Perform Analysis of Molecular Variance (AMOVA) on genind or genclone objects. ‚Äî poppr.amova","text":"poppr version 2.7.0, function able calculate phi statistics within-individual variance polyploid data full dosage information. data set contain full dosage information samples, resulting pseudo-haplotypes contain missing data, result incorrect estimate variance. Instead, AMOVA performed distance matrix derived allele counts allele frequencies, depending freq option. shown robust estimates mixed ploidy (Ronfort et al. 1998; Meirmans Liu 2018). wish brute-force way estimating AMOVA using missing values, can split haplotypes make_haplotypes() function. One strategy addressing ambiguous dosage polyploid data set convert data polysat's genambig class .genambig(), estimate allele frequencies polysat::deSilvaFreq(), use frequencies randomly sample alleles fill ambiguous alleles.","code":""},{"path":"/reference/poppr.amova.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Perform Analysis of Molecular Variance (AMOVA) on genind or genclone objects. ‚Äî poppr.amova","text":"Excoffier, L., Smouse, P.E. Quattro, J.M. (1992) Analysis molecular variance inferred metric distances among DNA haplotypes: application human mitochondrial DNA restriction data. Genetics, 131, 479-491. Ronfort, J., Jenczewski, E., Bataillon, T., Rousset, F. (1998). Analysis population structure autotetraploid species. Genetics, 150, 921‚Äì930. Meirmans, P., Liu, S. (2018) Analysis Molecular Variance (AMOVA) Autopolyploids Submitted.","code":""},{"path":[]},{"path":"/reference/poppr.amova.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform Analysis of Molecular Variance (AMOVA) on genind or genclone objects. ‚Äî poppr.amova","text":"","code":"data(Aeut) strata(Aeut) <- other(Aeut)$population_hierarchy[-1] agc <- as.genclone(Aeut) agc #>  #> This is a genclone object #> ------------------------- #> Genotype information: #>  #>    119 original multilocus genotypes  #>    187 diploid individuals #>     56 dominant loci #>  #> Population information: #>  #>      2 strata - Pop, Subpop #>      2 populations defined - Athena, Mt. Vernon amova.result <- poppr.amova(agc, ~Pop/Subpop) #>  #>  No missing values detected. amova.result #> $call #> ade4::amova(samples = xtab, distances = xdist, structures = xstruct) #>  #> $results #>                             Df    Sum Sq     Mean Sq #> Between Pop                  1 1051.2345 1051.234516 #> Between samples Within Pop  16  273.4575   17.091091 #> Within samples             169  576.5059    3.411277 #> Total                      186 1901.1979   10.221494 #>  #> $componentsofcovariance #>                                            Sigma          % #> Variations  Between Pop                11.063446  70.006786 #> Variations  Between samples Within Pop  1.328667   8.407483 #> Variations  Within samples              3.411277  21.585732 #> Total variations                       15.803391 100.000000 #>  #> $statphi #>                         Phi #> Phi-samples-total 0.7841427 #> Phi-samples-Pop   0.2803128 #> Phi-Pop-total     0.7000679 #>  amova.test <- randtest(amova.result) # Test for significance plot(amova.test)  amova.test #> class: krandtest lightkrandtest  #> Monte-Carlo tests #> Call: randtest.amova(xtest = amova.result) #>  #> Number of tests:   3  #>  #> Adjustment method for multiple comparisons:   none  #> Permutation number:   99  #>                         Test       Obs   Std.Obs   Alter Pvalue #> 1  Variations within samples  3.411277 -28.82359    less   0.01 #> 2 Variations between samples  1.328667  20.76983 greater   0.01 #> 3     Variations between Pop 11.063446  10.20109 greater   0.01 #>   # \\dontrun{  # You can get the same results with the pegas implementation amova.pegas <- poppr.amova(agc, ~Pop/Subpop, method = \"pegas\") #>  #>  No missing values detected. #> Warning: Zero distance(s) amova.pegas #>  #> \tAnalysis of Molecular Variance #>  #> Call: pegas::amova(formula = hier, data = hierdf, nperm = nperm, is.squared = FALSE) #>  #>              SSD         MSD  df #> Pop    1051.2345 1051.234516   1 #> Subpop  273.4575   17.091091  16 #> Error   576.5059    3.411277 169 #> Total  1901.1979   10.221494 186 #>  #> Variance components: #>       Pop    Subpop     Error  #> 11.063446  1.328667  3.411277  #>  #> Phi-statistics: #>    Pop.in.GLOBAL (Phi_CT) Subpop.in.GLOBAL (Phi_ST)    Subpop.in.Pop (Phi_SC)  #>                 0.7000679                 0.7841427                 0.2803128  #>  #> Variance coefficients: #>        a        b        c  #> 10.29589 11.16949 93.36898  #>  amova.pegas$varcomp/sum(amova.pegas$varcomp) #>        Pop     Subpop      Error  #> 0.70006786 0.08407483 0.21585732   # Clone correction is possible amova.cc.result <- poppr.amova(agc, ~Pop/Subpop, clonecorrect = TRUE) #>  #>  No missing values detected. amova.cc.result #> $call #> ade4::amova(samples = xtab, distances = xdist, structures = xstruct) #>  #> $results #>                             Df    Sum Sq    Mean Sq #> Between Pop                  1  741.9872 741.987234 #> Between samples Within Pop  16  185.6877  11.605483 #> Within samples             123  520.1123   4.228555 #> Total                      140 1447.7872  10.341337 #>  #> $componentsofcovariance #>                                             Sigma          % #> Variations  Between Pop                10.4131525  66.777680 #> Variations  Between samples Within Pop  0.9520545   6.105355 #> Variations  Within samples              4.2285550  27.116965 #> Total variations                       15.5937620 100.000000 #>  #> $statphi #>                         Phi #> Phi-samples-total 0.7288303 #> Phi-samples-Pop   0.1837727 #> Phi-Pop-total     0.6677768 #>  amova.cc.test <- randtest(amova.cc.result) plot(amova.cc.test)  amova.cc.test #> class: krandtest lightkrandtest  #> Monte-Carlo tests #> Call: randtest.amova(xtest = amova.cc.result) #>  #> Number of tests:   3  #>  #> Adjustment method for multiple comparisons:   none  #> Permutation number:   99  #>                         Test        Obs    Std.Obs   Alter Pvalue #> 1  Variations within samples  4.2285550 -20.171106    less   0.01 #> 2 Variations between samples  0.9520545   9.802126 greater   0.01 #> 3     Variations between Pop 10.4131525   9.237767 greater   0.01 #>    # Example with filtering data(monpop) splitStrata(monpop) <- ~Tree/Year/Symptom poppr.amova(monpop, ~Symptom/Year) # gets a warning of zero distances #>  #>  No loci with missing values above 5% found. #> Warning: Zero distance(s) #> Distance matrix is non-euclidean. #> Using quasieuclid correction method. See ?quasieuclid for details. #> Warning: Zero distance(s) #> $call #> ade4::amova(samples = xtab, distances = xdist, structures = xstruct) #>  #> $results #>                                 Df     Sum Sq    Mean Sq #> Between Symptom                  1   17.62137  17.621372 #> Between samples Within Symptom   4  444.47746 111.119364 #> Within samples                 688 4880.09229   7.093157 #> Total                          693 5342.19112   7.708789 #>  #> $componentsofcovariance #>                                                 Sigma          % #> Variations  Between Symptom                -0.3380505  -4.369677 #> Variations  Between samples Within Symptom  0.9811742  12.682763 #> Variations  Within samples                  7.0931574  91.686913 #> Total variations                            7.7362812 100.000000 #>  #> $statphi #>                             Phi #> Phi-samples-total    0.08313087 #> Phi-samples-Symptom  0.12151770 #> Phi-Symptom-total   -0.04369677 #>  poppr.amova(monpop, ~Symptom/Year, filter = TRUE, threshold = 0.1) # no warning #> Filtering ... #> Original multilocus genotypes   ... 264 #> Contracted multilocus genotypes ... 236 #>  #>  No loci with missing values above 5% found. #> Distance matrix is non-euclidean. #> Using quasieuclid correction method. See ?quasieuclid for details. #> $call #> ade4::amova(samples = xtab, distances = xdist, structures = xstruct) #>  #> $results #>                                 Df     Sum Sq    Mean Sq #> Between Symptom                  1   18.13215  18.132145 #> Between samples Within Symptom   4  452.34660 113.086650 #> Within samples                 688 5002.62587   7.271259 #> Total                          693 5473.10462   7.897698 #>  #> $componentsofcovariance #>                                                 Sigma          % #> Variations  Between Symptom                -0.3430635  -4.328197 #> Variations  Between samples Within Symptom  0.9980498  12.591711 #> Variations  Within samples                  7.2712585  91.736486 #> Total variations                            7.9262448 100.000000 #>  #> $statphi #>                             Phi #> Phi-samples-total    0.08263514 #> Phi-samples-Symptom  0.12069326 #> Phi-Symptom-total   -0.04328197 #>    # }"},{"path":"/reference/poppr.html","id":null,"dir":"Reference","previous_headings":"","what":"Produce a basic summary table for population genetic analyses. ‚Äî poppr","title":"Produce a basic summary table for population genetic analyses. ‚Äî poppr","text":"poppr package description, please see package?poppr function allows user quickly view indices heterozygosity, evenness, linkage aid decision path analyze specified dataset. natively takes adegenet::genind genclone objects, can convert raw data formats adegenet can take (fstat, structure, genetix, genpop) well genalex files exported csv format (see read.genalex() details).","code":""},{"path":"/reference/poppr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Produce a basic summary table for population genetic analyses. ‚Äî poppr","text":"","code":"poppr(   dat,   total = TRUE,   sublist = \"ALL\",   exclude = NULL,   blacklist = NULL,   sample = 0,   method = 1,   missing = \"ignore\",   cutoff = 0.05,   quiet = FALSE,   clonecorrect = FALSE,   strata = 1,   keep = 1,   plot = TRUE,   hist = TRUE,   index = \"rbarD\",   minsamp = 10,   legend = FALSE,   ... )"},{"path":"/reference/poppr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Produce a basic summary table for population genetic analyses. ‚Äî poppr","text":"dat adegenet::genind object genclone object fstat, structure, genetix, genpop, genalex formatted file. total TRUE (default), indices calculated pooled populations. sublist list character strings integers indicate specific population names (accessed via adegenet::popNames()). Defaults \"\". exclude vector population names indexes user wishes discard. Default NULL. blacklist DEPRECATED, use exclude. sample integer indicating number permutations desired obtain p-values. Sampling shuffle genotypes locus simulate panmictic population using observed genotypes. Calculating p-value includes observed statistics, set sample number one round p-value (eg. sample = 999 give p = 0.001 sample = 1000 give p = 0.000999001). method integer 1 4 indicating method sampling desired. see shufflepop() details. missing missing data treated? \"zero\" \"mean\" set missing values documented tab(). \"loci\" \"geno\" remove loci genotypes missing data, respectively (see missingno() information. cutoff numeric number 0 1 indicating percent missing data allowed analysis. used conjunction flag missing (see missingno() details) quiet FALSE (default) display progress bar population analyzed. clonecorrect default FALSE. must used strata parameter, user potentially get undesired results. see clonecorrect() details. strata formula indicating hierarchical levels used. hierarchies present strata slot. See strata() details. keep integer. indicates strata wish keep clone correcting data sets. combine strata, just set keep 1 number straifications set strata. see clonecorrect() details. plot logical TRUE (default) sampling > 0, histogram produced population. hist logical Deprecated. Use plot. index character Either \"Ia\" \"rbarD\". hist = TRUE, determine index used visualization. minsamp integer indicating minimum number individuals resample rarefaction analysis. See vegan::rarefy() details. legend logical. set TRUE, legend describing resulting table columns printed. Defaults FALSE ... arguments passed diversity_stats()","code":""},{"path":"/reference/poppr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Produce a basic summary table for population genetic analyses. ‚Äî poppr","text":"data frame populations rows following columns: Pop: vector indicating population factor N: integer vector indicating number individuals/isolates specified population. MLG: integer vector indicating number multilocus genotypes found specified population, (see: mlg()) eMLG: expected number MLG lowest common sample size (set parameter minsamp). SE: standard error rarefaction analysis H: Shannon-Weiner Diversity index G: Stoddard Taylor's Index lambda: Simpson's index E.5: Evenness Hexp: Nei's gene diversity (expected heterozygosity) Ia: numeric vector giving value Index Association population factor, (see ia()). p.Ia: numeric vector indicating p-value Ia number reshufflings indicated sample. Lowest value 1/n n number observed values. rbarD: numeric vector giving value Standardized Index Association population factor, (see ia()). p.rD: numeric vector indicating p-value rbarD number reshuffles indicated sample. Lowest value 1/n n number observed values. File: vector indicating name original data file.","code":""},{"path":"/reference/poppr.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Produce a basic summary table for population genetic analyses. ‚Äî poppr","text":"table intended first look dynamics mutlilocus genotype diversity. Many statistics (except index association) simply based counts multilocus genotypes take account actual allelic states. Descriptions statistics can found Algorithms Equations vignette: vignette(\"algo\", package = \"poppr\").","code":""},{"path":"/reference/poppr.html","id":"sampling","dir":"Reference","previous_headings":"","what":"sampling","title":"Produce a basic summary table for population genetic analyses. ‚Äî poppr","text":"sampling procedure explicitly testing index association. None diversity statistics (H, G, lambda, E.5) tested sampling due differing data types. obtain confidence intervals statistics, please see diversity_ci().","code":""},{"path":"/reference/poppr.html","id":"rarefaction","dir":"Reference","previous_headings":"","what":"rarefaction","title":"Produce a basic summary table for population genetic analyses. ‚Äî poppr","text":"Rarefaction analysis performed number multilocus genotypes relatively easy estimate (Gr√ºnwald et al., 2003). obtain rarefied estimates diversity, possible use diversity_ci() argument rarefy = TRUE","code":""},{"path":"/reference/poppr.html","id":"graphic","dir":"Reference","previous_headings":"","what":"graphic","title":"Produce a basic summary table for population genetic analyses. ‚Äî poppr","text":"function outputs ggplot2 graphic histograms. can manipulated visualized another manner retrieving plot last_plot() command ggplot2. useful manipulation arrange graphs single column values statistic line : p <- last_plot(); p + facet_wrap(~population, ncol = 1, scales = \"free_y\") name groupings \"population\" name x axis \"value\".","code":""},{"path":"/reference/poppr.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Produce a basic summary table for population genetic analyses. ‚Äî poppr","text":"calculation Hexp changed poppr 1.x. previously calculated based diversity multilocus genotypes, resulting value 1 sexual populations. obviously Nei's 1978 expected heterozygosity. thus changed statistic true value Hexp calculating \\((\\frac{n}{n-1}) 1 - \\sum_{=   1}^k{p^{2}_{}}\\) p allele frequencies given locus n number observed alleles (Nei, 1978) locus returning average. Caution exercised interpreting results Hexp polyploid organisms ambiguous ploidy. lack allelic dosage information cause rare alleles -represented artificially inflate index. especially true small sample sizes.","code":""},{"path":"/reference/poppr.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Produce a basic summary table for population genetic analyses. ‚Äî poppr","text":"Paul-Michael Agapow Austin Burt. Indices multilocus linkage disequilibrium. Molecular Ecology Notes, 1(1-2):101-102, 2001 .H.D. Brown, M.W. Feldman, E. Nevo. Multilocus structure natural populations Hordeum spontaneum. Genetics, 96(2):523-536, 1980. Niklaus J. Gr\\\"unwald, Stephen B. Goodwin, Michael G. Milgroom, William E. Fry. Analysis genotypic diversity data populations microorganisms. Phytopathology, 93(6):738-46, 2003 Bernhard Haubold Richard R. Hudson. Lian 3.0: detecting linkage disequilibrium multilocus data. Bioinformatics, 16(9):847-849, 2000. Kenneth L.Jr. Heck, Gerald van Belle, Daniel Simberloff. Explicit calculation rarefaction diversity measurement determination sufficient sample size. Ecology, 56(6):pp. 1459-1461, 1975 Masatoshi Nei. Estimation average heterozygosity genetic distance small number individuals. Genetics, 89(3):583-590, 1978. S H Hurlbert. nonconcept species diversity: critique alternative parameters. Ecology, 52(4):577-586, 1971. J.. Ludwig J.F. Reynolds. Statistical Ecology. Primer Methods Computing. New York USA: John Wiley Sons, 1988. Simpson, E. H. Measurement diversity. Nature 163: 688, 1949 doi:10.1038/163688a0 Good, . J. (1953). Population Frequency Species Estimation Population Parameters. Biometrika 40(3/4): 237-264. Lande, R. (1996). Statistics partitioning species diversity, similarity among multiple communities. Oikos 76: 5-13. Jari Oksanen, F. Guillaume Blanchet, Roeland Kindt, Pierre Legendre, Peter R. Minchin, R. B. O'Hara, Gavin L. Simpson, Peter Solymos, M. Henry H. Stevens, Helene Wagner. vegan: Community Ecology Package, 2012. R package version 2.0-5. E.C. Pielou. Ecological Diversity. Wiley, 1975. Claude Elwood Shannon. mathematical theory communication. Bell Systems Technical Journal, 27:379-423,623-656, 1948 J M Smith, N H Smith, M O'Rourke, B G Spratt. clonal bacteria? Proceedings National Academy Sciences, 90(10):4384-4388, 1993. J.. Stoddart J.F. Taylor. Genotypic diversity: estimation prediction samples. Genetics, 118(4):705-11, 1988.","code":""},{"path":[]},{"path":"/reference/poppr.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Produce a basic summary table for population genetic analyses. ‚Äî poppr","text":"Zhian N. Kamvar","code":""},{"path":"/reference/poppr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Produce a basic summary table for population genetic analyses. ‚Äî poppr","text":"","code":"data(nancycats) poppr(nancycats) #>      Pop   N MLG eMLG       SE    H   G lambda E.5  Hexp      Ia   rbarD #> 1    P01  10  10   10 0.00e+00 2.30  10  0.900   1 0.649  0.1656  0.0211 #> 2    P02  22  22   10 0.00e+00 3.09  22  0.955   1 0.701  0.1818  0.0230 #> 3    P03  12  12   10 0.00e+00 2.48  12  0.917   1 0.719  0.3546  0.0452 #> 4    P04  23  23   10 5.03e-07 3.14  23  0.957   1 0.750  0.4494  0.0563 #> 5    P05  15  15   10 2.77e-07 2.71  15  0.933   1 0.640 -0.0475 -0.0060 #> 6    P06  11  11   10 0.00e+00 2.40  11  0.909   1 0.745  0.3337  0.0426 #> 7    P07  14  14   10 0.00e+00 2.64  14  0.929   1 0.667  0.2569  0.0326 #> 8    P08  10  10   10 0.00e+00 2.30  10  0.900   1 0.752  0.2388  0.0301 #> 9    P09   9   9    9 0.00e+00 2.20   9  0.889   1 0.694  2.0845  0.2636 #> 10   P10  11  11   10 0.00e+00 2.40  11  0.909   1 0.698  0.5955  0.0763 #> 11   P11  20  20   10 0.00e+00 3.00  20  0.950   1 0.783  0.2847  0.0363 #> 12   P12  14  14   10 0.00e+00 2.64  14  0.929   1 0.667  0.4899  0.0643 #> 13   P13  13  13   10 7.30e-08 2.56  13  0.923   1 0.688  0.1855  0.0237 #> 14   P14  17  17   10 2.31e-07 2.83  17  0.941   1 0.789  0.2210  0.0282 #> 15   P15  11  11   10 0.00e+00 2.40  11  0.909   1 0.723  0.6933  0.0873 #> 16   P16  12  12   10 0.00e+00 2.48  12  0.917   1 0.700  0.2345  0.0295 #> 17   P17  13  13   10 7.30e-08 2.56  13  0.923   1 0.605 -0.0906 -0.0138 #> 18 Total 237 237   10 0.00e+00 5.47 237  0.996   1 0.774  0.1721  0.0218 #>         File #> 1  nancycats #> 2  nancycats #> 3  nancycats #> 4  nancycats #> 5  nancycats #> 6  nancycats #> 7  nancycats #> 8  nancycats #> 9  nancycats #> 10 nancycats #> 11 nancycats #> 12 nancycats #> 13 nancycats #> 14 nancycats #> 15 nancycats #> 16 nancycats #> 17 nancycats #> 18 nancycats  # \\dontrun{ # Sampling poppr(nancycats, sample = 999, total = FALSE, plot = TRUE)  #>    Pop  N MLG eMLG       SE    H  G lambda E.5  Hexp      Ia  p.Ia   rbarD #> 1  P01 10  10   10 0.00e+00 2.30 10  0.900   1 0.649  0.1656 0.229  0.0211 #> 2  P02 22  22   10 0.00e+00 3.09 22  0.955   1 0.701  0.1818 0.074  0.0230 #> 3  P03 12  12   10 0.00e+00 2.48 12  0.917   1 0.719  0.3546 0.042  0.0452 #> 4  P04 23  23   10 5.03e-07 3.14 23  0.957   1 0.750  0.4494 0.001  0.0563 #> 5  P05 15  15   10 2.77e-07 2.71 15  0.933   1 0.640 -0.0475 0.578 -0.0060 #> 6  P06 11  11   10 0.00e+00 2.40 11  0.909   1 0.745  0.3337 0.060  0.0426 #> 7  P07 14  14   10 0.00e+00 2.64 14  0.929   1 0.667  0.2569 0.098  0.0326 #> 8  P08 10  10   10 0.00e+00 2.30 10  0.900   1 0.752  0.2388 0.138  0.0301 #> 9  P09  9   9    9 0.00e+00 2.20  9  0.889   1 0.694  2.0845 0.001  0.2636 #> 10 P10 11  11   10 0.00e+00 2.40 11  0.909   1 0.698  0.5955 0.012  0.0763 #> 11 P11 20  20   10 0.00e+00 3.00 20  0.950   1 0.783  0.2847 0.307  0.0363 #> 12 P12 14  14   10 0.00e+00 2.64 14  0.929   1 0.667  0.4899 0.014  0.0643 #> 13 P13 13  13   10 7.30e-08 2.56 13  0.923   1 0.688  0.1855 0.146  0.0237 #> 14 P14 17  17   10 2.31e-07 2.83 17  0.941   1 0.789  0.2210 0.068  0.0282 #> 15 P15 11  11   10 0.00e+00 2.40 11  0.909   1 0.723  0.6933 0.008  0.0873 #> 16 P16 12  12   10 0.00e+00 2.48 12  0.917   1 0.700  0.2345 0.112  0.0295 #> 17 P17 13  13   10 7.30e-08 2.56 13  0.923   1 0.605 -0.0906 0.667 -0.0138 #>     p.rD      File #> 1  0.228 nancycats #> 2  0.074 nancycats #> 3  0.042 nancycats #> 4  0.001 nancycats #> 5  0.577 nancycats #> 6  0.060 nancycats #> 7  0.098 nancycats #> 8  0.140 nancycats #> 9  0.001 nancycats #> 10 0.011 nancycats #> 11 0.309 nancycats #> 12 0.013 nancycats #> 13 0.144 nancycats #> 14 0.068 nancycats #> 15 0.009 nancycats #> 16 0.112 nancycats #> 17 0.667 nancycats  # Customizing the plot library(\"ggplot2\") p <- last_plot() p + facet_wrap(~population, scales = \"free_y\", ncol = 1)   # Turning off diversity statistics (see get_stats) poppr(nancycats, total=FALSE, H = FALSE, G = FALSE, lambda = FALSE, E5 = FALSE) #>    Pop  N MLG eMLG       SE  Hexp      Ia   rbarD      File #> 1  P01 10  10   10 0.00e+00 0.649  0.1656  0.0211 nancycats #> 2  P02 22  22   10 0.00e+00 0.701  0.1818  0.0230 nancycats #> 3  P03 12  12   10 0.00e+00 0.719  0.3546  0.0452 nancycats #> 4  P04 23  23   10 5.03e-07 0.750  0.4494  0.0563 nancycats #> 5  P05 15  15   10 2.77e-07 0.640 -0.0475 -0.0060 nancycats #> 6  P06 11  11   10 0.00e+00 0.745  0.3337  0.0426 nancycats #> 7  P07 14  14   10 0.00e+00 0.667  0.2569  0.0326 nancycats #> 8  P08 10  10   10 0.00e+00 0.752  0.2388  0.0301 nancycats #> 9  P09  9   9    9 0.00e+00 0.694  2.0845  0.2636 nancycats #> 10 P10 11  11   10 0.00e+00 0.698  0.5955  0.0763 nancycats #> 11 P11 20  20   10 0.00e+00 0.783  0.2847  0.0363 nancycats #> 12 P12 14  14   10 0.00e+00 0.667  0.4899  0.0643 nancycats #> 13 P13 13  13   10 7.30e-08 0.688  0.1855  0.0237 nancycats #> 14 P14 17  17   10 2.31e-07 0.789  0.2210  0.0282 nancycats #> 15 P15 11  11   10 0.00e+00 0.723  0.6933  0.0873 nancycats #> 16 P16 12  12   10 0.00e+00 0.700  0.2345  0.0295 nancycats #> 17 P17 13  13   10 7.30e-08 0.605 -0.0906 -0.0138 nancycats  # The previous version of poppr contained a definition of Hexp, which # was calculated as (N/(N - 1))*lambda. It basically looks like an unbiased  # Simpson's index. This statistic was originally included in poppr because it # was originally included in the program multilocus. It was finally figured # to be an unbiased Simpson's diversity metric (Lande, 1996; Good, 1953).  data(Aeut)  uSimp <- function(x){   lambda <- vegan::diversity(x, \"simpson\")   x <- drop(as.matrix(x))   if (length(dim(x)) > 1){     N <- rowSums(x)   } else {     N <- sum(x)   }   return((N/(N-1))*lambda) } poppr(Aeut, uSimp = uSimp) #>          Pop   N MLG eMLG   SE    H    G lambda   E.5 uSimp  Hexp    Ia  rbarD #> 1     Athena  97  70 66.0 1.25 4.06 42.2  0.976 0.721 0.986 0.170  2.91 0.0724 #> 2 Mt. Vernon  90  50 50.0 0.00 3.67 28.7  0.965 0.726 0.976 0.158 13.30 0.2816 #> 3      Total 187 119 68.5 2.99 4.56 69.0  0.986 0.720 0.991 0.365 14.37 0.2706 #>   File #> 1 Aeut #> 2 Aeut #> 3 Aeut   # Demonstration with viral data # Note: this is a larger data set that could take a couple of minutes to run # on slower computers.  data(H3N2) strata(H3N2) <- data.frame(other(H3N2)$x) setPop(H3N2) <- ~country poppr(H3N2, total = FALSE, sublist=c(\"Austria\", \"China\", \"USA\"),    clonecorrect = TRUE, strata = ~country/year) #>       Pop   N MLG eMLG    SE    H     G lambda   E.5   Hexp    Ia  rbarD File #> 1     USA 275 254 42.5 0.687 5.51 238.6  0.996 0.964 0.1341 10.75 0.1167 H3N2 #> 2   China  82  79 42.2 0.757 4.36  76.4  0.987 0.980 0.0929  2.54 0.0371 H3N2 #> 3 Austria  43  41 41.0 0.000 3.70  39.3  0.975 0.975 0.1140 13.02 0.2226 H3N2 # }"},{"path":"/reference/poppr.msn.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a minimum spanning network of selected populations using a distance \nmatrix. ‚Äî poppr.msn","title":"Create a minimum spanning network of selected populations using a distance \nmatrix. ‚Äî poppr.msn","text":"Create minimum spanning network selected populations using distance  matrix.","code":""},{"path":"/reference/poppr.msn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a minimum spanning network of selected populations using a distance \nmatrix. ‚Äî poppr.msn","text":"","code":"poppr.msn(   gid,   distmat,   palette = topo.colors,   mlg.compute = \"original\",   sublist = \"All\",   exclude = NULL,   blacklist = NULL,   vertex.label = \"MLG\",   gscale = TRUE,   glim = c(0, 0.8),   gadj = 3,   gweight = 1,   wscale = TRUE,   showplot = TRUE,   include.ties = FALSE,   threshold = NULL,   clustering.algorithm = NULL,   ... )"},{"path":"/reference/poppr.msn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a minimum spanning network of selected populations using a distance \nmatrix. ‚Äî poppr.msn","text":"gid genind, genclone, genlight, snpclone object distmat distance matrix derived data set. palette vector function defining color palette  used color populations graph. defaults  topo.colors. See examples details. mlg.compute multilocus genotypes set \"custom\" (see  mll.custom details) genclone object,  specify mlg level calculate nodes . See details. sublist vector population names indexes user  wishes keep. Default \"\". exclude vector population names indexes user wishes discard. Default NULL. blacklist DEPRECATED, use exclude. vertex.label vector characters label vertex. two defaults: \"MLG\" label nodes multilocus  genotype original data set \"inds\" label nodes  representative individual names. gscale \"grey scale\". TRUE, scale color edges proportional observed distance, lines becoming darker related nodes. See greycurve details. glim \"grey limit\". Two numbers zero one. determine  upper lower limits gray function. Default  0 (black) 0.8 (20% black). See greycurve details. gadj \"grey adjust\". positive integer greater zero  serve exponent edge weight scale grey value  represent weight. See greycurve details. gweight \"grey weight\". integer. 1, grey scale  weighted emphasize differences closely related  nodes. 2, grey scale weighted emphasize  differences distantly related nodes. See  greycurve details. wscale \"width scale\". TRUE, edge widths  scaled proportional inverse observed distance ,  lines becoming thicker related nodes. showplot logical. TRUE, graph plotted.  FALSE, simply returned. include.ties logical. TRUE, graph include edges arbitrarily passed favor another edge equal weight. FALSE, default, one edge arbitrarily  selected two edges tied, resulting pure minimum spanning network. threshold numeric. default, NULL, effect. threshold value passed argument used mlg.filter prior creating MSN. data set contains contracted MLGs, argument override threshold data set. See Details. clustering.algorithm string. default, NULL. threshold = NULL, argument effect. supplied either \"farthest_neighbor\", \"average_neighbor\", \"nearest_neighbor\", passed mlg.filter prior creating MSN. data set contains contracted MLGs, argument override algorithm data set. See Details. ... arguments go plot.igraph","code":""},{"path":"/reference/poppr.msn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a minimum spanning network of selected populations using a distance \nmatrix. ‚Äî poppr.msn","text":"graph minimum spanning network nodes corresponding    MLGs within data set. Colors nodes represent population    membership. Width color edges represent distance. populations vector population names corresponding    vertex colors colors vector hexadecimal representations   colors used vertex colors","code":""},{"path":"/reference/poppr.msn.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a minimum spanning network of selected populations using a distance \nmatrix. ‚Äî poppr.msn","text":"minimum spanning network generated function generated   via igraph's minimum.spanning.tree. resultant   graph produced can plotted using igraph functions, entire object   can plotted using function plot_poppr_msn,   give user scale bar option layout data.","code":""},{"path":"/reference/poppr.msn.html","id":"node-sizes","dir":"Reference","previous_headings":"","what":"node sizes","title":"Create a minimum spanning network of selected populations using a distance \nmatrix. ‚Äî poppr.msn","text":"area nodes representative number samples.   igraph scales nodes radius, node sizes graph    represented square root number samples.","code":""},{"path":"/reference/poppr.msn.html","id":"mlg-compute","dir":"Reference","previous_headings":"","what":"mlg.compute","title":"Create a minimum spanning network of selected populations using a distance \nmatrix. ‚Äî poppr.msn","text":"node graph represents different multilocus genotype.    edges graph represent genetic distances connect   multilocus genotypes. genclone objects, possible set   multilocus genotypes custom definition. creates problem   clone correction, however, possible define custom lineages   monophyletic. clone correction performed   definitions, information lost graph. circumvent ,   clone correction done via computed multilocus genotypes, either   \"original\" \"contracted\". specified mlg.compute   argument, .","code":""},{"path":"/reference/poppr.msn.html","id":"contracted-multilocus-genotypes","dir":"Reference","previous_headings":"","what":"contracted multilocus genotypes","title":"Create a minimum spanning network of selected populations using a distance \nmatrix. ‚Äî poppr.msn","text":"incoming data set class genclone,   contains contracted multilocus genotypes, function retain   information creating minimum spanning network. can use   arguments threshold clustering.algorithm change   threshold clustering algorithm used network. example,   data set threshold 0.1 wish minimum   spanning network without threshold, can simply add    threshold = 0.0, clustering happen. threshold clustering.algorithm arguments can also   used filter un-contracted data sets. filtering use distance matrix supplied argument    distmat.","code":""},{"path":"/reference/poppr.msn.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Create a minimum spanning network of selected populations using a distance \nmatrix. ‚Äî poppr.msn","text":"edges graphs may cross graph becomes   large.","code":""},{"path":[]},{"path":"/reference/poppr.msn.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create a minimum spanning network of selected populations using a distance \nmatrix. ‚Äî poppr.msn","text":"Javier F. Tabima, Zhian N. Kamvar, Jonah C. Brooks","code":""},{"path":"/reference/poppr.msn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a minimum spanning network of selected populations using a distance \nmatrix. ‚Äî poppr.msn","text":"","code":"# Load the data set and calculate the distance matrix for all individuals. data(Aeut) A.dist <- diss.dist(Aeut)  # Graph it. A.msn <- poppr.msn(Aeut, A.dist, gadj = 15, vertex.label = NA)   # Find the sizes of the nodes (number of individuals per MLL): igraph::vertex_attr(A.msn$graph, \"size\")^2 #>   [1]  2  1  2  2  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  9  1  1  5  1  1 #>  [26]  2  1  1  1  1  2  3  1  1  2  1  1  1  2  1  1  1  1  1  1  2  1  2  1  1 #>  [51]  1  2  1  3  1  1  1  1  1  2  1  1  1  2  1  1  1  1  1  1  1  1  1  2  1 #>  [76]  2  1  1 10  1  1  1  1  1  1  1  1  1  1  2  5  2  2  1  2  1  5  2  2  3 #> [101]  1  4  1  1  2  1  1  1  1  2  3  1  2  2  1  1  2  1  4  # \\dontrun{ # Set subpopulation structure. Aeut.sub <- as.genclone(Aeut) setPop(Aeut.sub) <- ~Pop/Subpop #> Warning: Cannot set the population from an empty strata  # Plot respective to the subpopulation structure As.msn <- poppr.msn(Aeut.sub, A.dist, gadj=15, vertex.label=NA)   # Show only the structure of the Athena population. As.msn <- poppr.msn(Aeut.sub, A.dist, gadj=15, vertex.label=NA, sublist=1:10)   # Let's look at the structure of the microbov data set  library(\"igraph\") data(microbov) micro.dist <- diss.dist(microbov, percent = TRUE) micro.msn <- poppr.msn(microbov, micro.dist, vertex.label=NA)   # Let's plot it and show where individuals have < 15% of their genotypes  # different.  edge_weight <- E(micro.msn$graph)$weight edge_labels <- ifelse(edge_weight < 0.15, round(edge_weight, 3), NA) plot.igraph(micro.msn$graph, edge.label = edge_labels, vertex.size = 2,  edge.label.color = \"red\")   # }"},{"path":"/reference/poppr.plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal function to plot the results from ia() and poppr() ‚Äî poppr.plot","title":"Internal function to plot the results from ia() and poppr() ‚Äî poppr.plot","text":"Internal function plot results ia() poppr()","code":""},{"path":"/reference/poppr.plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal function to plot the results from ia() and poppr() ‚Äî poppr.plot","text":"","code":"poppr.plot(   sample,   pval = c(Ia = 0.05, rbarD = 0.05),   pop = NULL,   file = NULL,   N = NULL,   observed = c(Ia = 0, rbarD = 0),   index = c(\"rbarD\", \"Ia\"),   labsize = rel(3),   linesize = rel(1) )"},{"path":"/reference/poppr.plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal function to plot the results from ia() and poppr() ‚Äî poppr.plot","text":"sample either object class \"ialist\" list ialists pval named vector specifying p values display pop name population file name source file N number samples population observed observed values Ia rbarD index index plot (defaults \"rbarD\") labsize size -plot label linesize size -plot line","code":""},{"path":"/reference/poppr.plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Internal function to plot the results from ia() and poppr() ‚Äî poppr.plot","text":"ggplot2 object","code":""},{"path":"/reference/poppr.plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Internal function to plot the results from ia() and poppr() ‚Äî poppr.plot","text":"","code":"# \\dontrun{ data(Pinf) x <- Pinf %>% seppop() %>% lapply(ia, sample = 99, valuereturn = TRUE, quiet = TRUE, plot = FALSE) x #> $`South America` #> Index #>        Ia      p.Ia     rbarD      p.rD  #> 2.8733344 0.0100000 0.3446431 0.0100000  #> Samples #>            Ia        rbarD #> 1 -0.19840549 -0.019950733 #> 2  0.03917534  0.003954763 #> 3 -0.15476529 -0.015624251 #> 4 -0.05714287 -0.005742415 #> 5  0.05669263  0.005724563 #> 6  0.16824228  0.016989254 #> ... #>              Ia         rbarD #> 94  0.064385660  0.0064568717 #> 95 -0.119014789 -0.0119519903 #> 96 -0.002660131 -0.0002678349 #> 97 -0.093509702 -0.0094239241 #> 98 -0.032672062 -0.0032803542 #> 99 -0.045189509 -0.0045407380 #>  #> $`North America` #> Index #>         Ia       p.Ia      rbarD       p.rD  #> 0.22260850 0.02000000 0.02395687 0.02000000  #> Samples #>            Ia        rbarD #> 1  0.12627335  0.012831930 #> 2  0.06628103  0.006785674 #> 3 -0.09848652 -0.009952178 #> 4  0.06140446  0.006181698 #> 5  0.06126695  0.006262511 #> 6  0.11656534  0.011779419 #> ... #>             Ia         rbarD #> 94  0.00709140  0.0007143281 #> 95 -0.01644547 -0.0016665396 #> 96  0.01172850  0.0011935324 #> 97  0.03893598  0.0039743077 #> 98 -0.03249290 -0.0033205183 #> 99 -0.17858266 -0.0181508777 #>  poppr:::poppr.plot(sample = x, file = \"hey\") # plots multiple populations  # plot.ialist takes care of the single populations. for (i in x){   print(plot(i)) }   # }"},{"path":"/reference/poppr_has_parallel.html","id":null,"dir":"Reference","previous_headings":"","what":"Determines whether openMP is support on this system. ‚Äî poppr_has_parallel","title":"Determines whether openMP is support on this system. ‚Äî poppr_has_parallel","text":"Determines whether openMP support system.","code":""},{"path":"/reference/poppr_has_parallel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determines whether openMP is support on this system. ‚Äî poppr_has_parallel","text":"","code":"poppr_has_parallel()"},{"path":"/reference/poppr_has_parallel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determines whether openMP is support on this system. ‚Äî poppr_has_parallel","text":"FALSE openMP supported, TRUE ","code":""},{"path":"/reference/poppr_has_parallel.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Determines whether openMP is support on this system. ‚Äî poppr_has_parallel","text":"Zhian N. Kamvar, Jonah C. Brooks","code":""},{"path":"/reference/poppr_has_parallel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Determines whether openMP is support on this system. ‚Äî poppr_has_parallel","text":"","code":"poppr_has_parallel() #> [1] FALSE"},{"path":"/reference/popsub.html","id":null,"dir":"Reference","previous_headings":"","what":"Subset data by population ‚Äî popsub","title":"Subset data by population ‚Äî popsub","text":"Create new dataset specified populations exclude specified populations dataset.","code":""},{"path":"/reference/popsub.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subset data by population ‚Äî popsub","text":"","code":"popsub(   gid,   sublist = \"ALL\",   exclude = NULL,   blacklist = NULL,   mat = NULL,   drop = TRUE )"},{"path":"/reference/popsub.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Subset data by population ‚Äî popsub","text":"gid genind, genclone, genlight, snpclone object. sublist vector population names indexes user wishes keep. Default \"\". exclude vector population names indexes user wishes discard. Default NULL. blacklist DEPRECATED, use exclude. mat matrix object produced mlg.table subsetted. present, subsetted matrix returned instead genind object drop logical. TRUE, unvarying alleles dropped population.","code":""},{"path":"/reference/popsub.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Subset data by population ‚Äî popsub","text":"genind object matrix.","code":""},{"path":"/reference/popsub.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Subset data by population ‚Äî popsub","text":"Zhian N. Kamvar","code":""},{"path":"/reference/popsub.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Subset data by population ‚Äî popsub","text":"","code":"# Load the dataset microbov. data(microbov)  # List the population names. popNames(microbov) #>  [1] \"Borgou\"          \"Zebu\"            \"Lagunaire\"       \"NDama\"           #>  [5] \"Somba\"           \"Aubrac\"          \"Bazadais\"        \"BlondeAquitaine\" #>  [9] \"BretPieNoire\"    \"Charolais\"       \"Gascon\"          \"Limousin\"        #> [13] \"MaineAnjou\"      \"Montbeliard\"     \"Salers\"           # Analyze only the populations with exactly 50 individuals mic.50 <- popsub(microbov, sublist=c(1:6, 11:15), exclude=c(3,4,13,14))  # \\dontrun{ # Analyze the first 10 populations, except for \"Bazadais\" mic.10 <- popsub(microbov, sublist=1:10, exclude=\"Bazadais\")  # Take out the two smallest populations micbig <- popsub(microbov, exclude=c(\"NDama\", \"Montbeliard\"))  # Analyze the two largest populations miclrg <- popsub(microbov, sublist=c(\"BlondeAquitaine\", \"Charolais\")) # }"},{"path":"/reference/private_alleles.html","id":null,"dir":"Reference","previous_headings":"","what":"Tabulate alleles the occur in only one population. ‚Äî private_alleles","title":"Tabulate alleles the occur in only one population. ‚Äî private_alleles","text":"Tabulate alleles occur one population.","code":""},{"path":"/reference/private_alleles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tabulate alleles the occur in only one population. ‚Äî private_alleles","text":"","code":"private_alleles(   gid,   form = alleles ~ .,   report = \"table\",   level = \"population\",   count.alleles = TRUE,   drop = FALSE )"},{"path":"/reference/private_alleles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tabulate alleles the occur in only one population. ‚Äî private_alleles","text":"gid adegenet::genind genclone object. form formula() giving levels markers hierarchy analyze. See Details. report one \"table\", \"vector\", \"data.frame\". Tables (Default) data frame report counts along populations individuals. Vectors simply report populations individuals contain private alleles. Tables matrices populations individuals rows alleles columns. Data frames long form. level one \"population\" (Default) \"individual\". count.alleles logical. TRUE (Default), report return observed number alleles private population. FALSE, private allele counted , regardless dosage. drop logical. TRUE, populations/individuals without private alleles dropped result. Defaults FALSE.","code":""},{"path":"/reference/private_alleles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tabulate alleles the occur in only one population. ‚Äî private_alleles","text":"matrix, data.frame, vector defining populations individuals containing private alleles. vector chosen, alleles defined.","code":""},{"path":"/reference/private_alleles.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Tabulate alleles the occur in only one population. ‚Äî private_alleles","text":"argument form allows control strata private alleles computed. takes form left hand side formula can either \"allele\", \"locus\", \"loci\". right hand equation, default \".\". change , must correspond strata located adegenet::strata() slot. Note, right hand side disabled genpop objects.","code":""},{"path":"/reference/private_alleles.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Tabulate alleles the occur in only one population. ‚Äî private_alleles","text":"Zhian N. Kamvar","code":""},{"path":"/reference/private_alleles.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tabulate alleles the occur in only one population. ‚Äî private_alleles","text":"","code":"data(Pinf) # Load P. infestans data. private_alleles(Pinf) #>               Pi02.150 Pi02.152 Pi02.154 Pi02.156 Pi02.166 Pi02.170 D13.104 #> South America        0        0        1        0        0        0       0 #> North America        3        2        0        2        2        1       2 #>               D13.108 D13.110 D13.132 D13.148 D13.150 D13.152 D13.154 D13.158 #> South America       3       0       2       0       0       1       6       0 #> North America       0       5       0       3       1       0       0       1 #>               D13.164 D13.172 D13.174 D13.176 D13.184 D13.188 D13.190 Pi33.209 #> South America       0       0       0       0       0       0       0        0 #> North America       6       1       2       2       1       4       2        1 #>               Pi4B.205 Pi4B.215 Pi16.168 Pi16.172 Pi16.182 G11.140 G11.148 #> South America       16        2        0        0        0       5       5 #> North America        0        0        2       11        1       0       0 #>               G11.150 G11.152 G11.158 G11.170 G11.198 G11.206 G11.208 G11.210 #> South America       1      11       0       1       1       0       0       0 #> North America       0       0       3       0       0      19       2       5 #>               G11.212 G11.246 G11.266 Pi56.154 Pi70.195 Pi89.191 Pi89.197 #> South America       0       0       0        0        4        0        0 #> North America       1       2       1        2        0        1       22 #>               Pi89.199 Pi89.201 Pi89.203 Pi89.205 Pi89.207 Pi89.209 Pi89.213 #> South America        0        0        0        0        0        0        0 #> North America        7        2        1        2        1        3        1  # \\dontrun{ # Analyze private alleles based on the country of interest: private_alleles(Pinf, alleles ~ Country) #>          Pi02.150 Pi02.152 Pi02.154 Pi02.156 Pi02.166 Pi02.170 D13.104 D13.110 #> Colombia        0        0        0        0        0        0       0       0 #> Ecuador         0        0        0        0        0        0       0       0 #> Mexico          3        2        0        2        2        1       2       5 #> Peru            0        0        1        0        0        0       0       0 #>          D13.148 D13.150 D13.152 D13.154 D13.158 D13.164 D13.172 D13.174 #> Colombia       0       0       0       0       0       0       0       0 #> Ecuador        0       0       0       0       0       0       0       0 #> Mexico         3       1       0       0       1       6       1       2 #> Peru           0       0       1       6       0       0       0       0 #>          D13.176 D13.184 D13.188 D13.190 Pi33.209 Pi4B.215 Pi16.168 Pi16.172 #> Colombia       0       0       0       0        0        0        0        0 #> Ecuador        0       0       0       0        0        0        0        0 #> Mexico         2       1       4       2        1        0        2       11 #> Peru           0       0       0       0        0        2        0        0 #>          Pi16.182 G11.140 G11.148 G11.150 G11.158 G11.170 G11.198 G11.206 #> Colombia        0       0       0       0       0       0       0       0 #> Ecuador         0       0       0       1       0       0       0       0 #> Mexico          1       0       0       0       3       0       0      19 #> Peru            0       5       5       0       0       1       1       0 #>          G11.208 G11.210 G11.212 G11.246 G11.266 Pi56.154 Pi70.195 Pi89.191 #> Colombia       0       0       0       0       0        0        0        0 #> Ecuador        0       0       0       0       0        0        0        0 #> Mexico         2       5       1       2       1        2        0        1 #> Peru           0       0       0       0       0        0        4        0 #>          Pi89.197 Pi89.199 Pi89.201 Pi89.203 Pi89.205 Pi89.207 Pi89.209 #> Colombia        0        0        0        0        0        0        0 #> Ecuador         0        0        0        0        0        0        0 #> Mexico         22        7        2        1        2        1        3 #> Peru            0        0        0        0        0        0        0 #>          Pi89.213 #> Colombia        0 #> Ecuador         0 #> Mexico          1 #> Peru            0  # Number of observed alleles per locus private_alleles(Pinf, locus ~ Country, count.alleles = TRUE) #>          Pi02 D13 Pi33 Pi4B Pi16 G11 Pi56 Pi70 Pi89 #> Colombia    0   0    0    0    0   0    0    0    0 #> Ecuador     0   0    0    0    0   1    0    0    0 #> Mexico     10  30    1    0   14  33    2    0   40 #> Peru        1   7    0    2    0  12    0    4    0  # Get raw number of private alleles per locus. (pal <- private_alleles(Pinf, locus ~ Country, count.alleles = FALSE)) #>          Pi02 D13 Pi33 Pi4B Pi16 G11 Pi56 Pi70 Pi89 #> Colombia    0   0    0    0    0   0    0    0    0 #> Ecuador     0   0    0    0    0   1    0    0    0 #> Mexico      5  12    1    0    3   7    1    0    9 #> Peru        1   2    0    1    0   4    0    1    0  # Get percentages. sweep(pal, 2, nAll(Pinf)[colnames(pal)], FUN = \"/\") #>                Pi02        D13      Pi33  Pi4B      Pi16        G11 Pi56 Pi70 #> Colombia 0.00000000 0.00000000 0.0000000 0.000 0.0000000 0.00000000 0.00 0.00 #> Ecuador  0.00000000 0.00000000 0.0000000 0.000 0.0000000 0.04545455 0.00 0.00 #> Mexico   0.45454545 0.46153846 0.3333333 0.000 0.4285714 0.31818182 0.25 0.00 #> Peru     0.09090909 0.07692308 0.0000000 0.125 0.0000000 0.18181818 0.00 0.25 #>          Pi89 #> Colombia 0.00 #> Ecuador  0.00 #> Mexico   0.75 #> Peru     0.00  # An example of how these data can be displayed. library(\"ggplot2\") Pinfpriv <- private_alleles(Pinf, report = \"data.frame\") ggplot(Pinfpriv) + geom_tile(aes(x = population, y = allele, fill = count))  # }"},{"path":"/reference/psex.html","id":null,"dir":"Reference","previous_headings":"","what":"Probability of encountering a genotype more than once by chance ‚Äî psex","title":"Probability of encountering a genotype more than once by chance ‚Äî psex","text":"Probability encountering genotype chance","code":""},{"path":"/reference/psex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Probability of encountering a genotype more than once by chance ‚Äî psex","text":"","code":"psex(   gid,   pop = NULL,   by_pop = TRUE,   freq = NULL,   G = NULL,   method = c(\"single\", \"multiple\"),   ... )"},{"path":"/reference/psex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Probability of encountering a genotype more than once by chance ‚Äî psex","text":"gid genind genclone object. pop either formula set population factor  strata slot vector specifying population factor  sample. Defaults NULL. by_pop TRUE (default), calculation done population. freq vector matrix allele frequencies. defaults  NULL, indicating frequencies determined via  round-robin approach rraf. matrix  vector provided, zero-value allele frequencies automatically corrected. details, please see documentation correcting rare alleles. G integer vector specifying number observed genets. NULL, number original multilocus genotypes  method = \"single\" number populations  method = \"multiple\". G can also named integer  vector population by_pop = TRUE. Unnamed vectors lengths greater 1 throw error. method method calculating psex used? Using  method = \"single\" (default) indicates calculation psex  reflect probability encountering second genotype. Using  method = \"multiple\" gives probability encountering multiple  samples genotype (see details). ... options correcting rare alleles. default correct allele frequencies 1/n","code":""},{"path":"/reference/psex.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Probability of encountering a genotype more than once by chance ‚Äî psex","text":"vector Psex sample.","code":""},{"path":"/reference/psex.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Probability of encountering a genotype more than once by chance ‚Äî psex","text":"Unless freq supplied, function automatically calculate   round-robin allele frequencies rraf G   nmll.","code":""},{"path":"/reference/psex.html","id":"single-encounter-","dir":"Reference","previous_headings":"","what":"single encounter:","title":"Probability of encountering a genotype more than once by chance ‚Äî psex","text":"Psex probability encountering given genotype    chance. basic equation Parks Werth (1993) $$p_{sex} = 1 - (1 - p_{gen})^{G})$$ G number multilocus genotypes pgen   probability given genotype (see   pgen calculation). given value alpha (e.g.   alpha = 0.05), genotypes psex < alpha can thought single   genet whereas genotypes psex > alpha strong evidence   members belong genet (Parks Werth, 1993).","code":""},{"path":"/reference/psex.html","id":"multiple-encounters-","dir":"Reference","previous_headings":"","what":"multiple encounters:","title":"Probability of encountering a genotype more than once by chance ‚Äî psex","text":"method = \"multiple\", method Arnaud-Haond et al. (1997)   used sum binomial density taken. $$   p_{sex} = \\sum_{= n}^N {N \\choose } \\left(p_{gen}\\right)^\\left(1 - p_{gen}\\right)^{N - }   $$ N number sampling units ith - 1    encounter given genotype, pgen value pgen    genotype. procedure performed samples data.   example, genotype whose pgen value 0.0001, 5    observations 100 samples, value psex computed like :","code":"dbinom(0:4, 100, 0.0001)"},{"path":"/reference/psex.html","id":"using-by-pop-true-and-modifying-g-","dir":"Reference","previous_headings":"","what":"using by_pop = TRUE and modifying G:","title":"Probability of encountering a genotype more than once by chance ‚Äî psex","text":"possible modify G single multiple encounters.   method = \"single\", G takes place exponent, whereas    method = \"multiple\", G replaces N (see ).    supply named vector G population names   by_pop = TRUE, value G different   population. example, case method = \"multiple\", say   two populations share genotype . size population   B 25 75, respectively, values pgen genotype   population B 0.005 0.0001, respectively, number   samples genotype popualtions B 4 6, respectively.   case psex genotype calculated population   separately specify G: specify G = 100, changes : also specify G number genotypes observed    population (say = 10, B = 20)","code":"psexA = dbinom(0:3, 25, 0.005)   psexB = dbinom(0:5, 75, 0.0001) psexA = dbinom(0:3, 100, 0.005)   psexB = dbinom(0:5, 100, 0.0001) psexA = dbinom(0:3, 10, 0.005)   psexB = dbinom(0:5, 20, 0.0001)"},{"path":"/reference/psex.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Probability of encountering a genotype more than once by chance ‚Äî psex","text":"values Psex represent value multilocus genotype.    Additionally, argument pop NULL,    by_pop automatically TRUE.","code":""},{"path":"/reference/psex.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Probability of encountering a genotype more than once by chance ‚Äî psex","text":"Arnaud-Haond, S., Duarte, C. M., Alberto, F., & Serr√£o, E. . 2007.  Standardizing methods address clonality population studies.  Molecular Ecology, 16(24), 5115-5139. Parks, J. C., & Werth, C. R. 1993. study spatial features clones population bracken fern, Pteridium aquilinum (Dennstaedtiaceae).  American Journal Botany, 537-544.","code":""},{"path":[]},{"path":"/reference/psex.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Probability of encountering a genotype more than once by chance ‚Äî psex","text":"Zhian N. Kamvar, Jonah Brooks, Stacy . Krueger-Hadfield, Erik Sotka","code":""},{"path":"/reference/psex.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Probability of encountering a genotype more than once by chance ‚Äî psex","text":"","code":"data(Pram)  # With multiple encounters Pram_psex <- psex(Pram, by_pop = FALSE, method = \"multiple\") plot(Pram_psex, log = \"y\", col = ifelse(Pram_psex > 0.05, \"red\", \"blue\")) abline(h = 0.05, lty = 2) title(\"Probability of multiple encounters\")  # \\dontrun{  # For a single encounter (default) Pram_psex <- psex(Pram, by_pop = FALSE) plot(Pram_psex, log = \"y\", col = ifelse(Pram_psex > 0.05, \"red\", \"blue\")) abline(h = 0.05, lty = 2) title(\"Probability of second encounter\")   # This can be also done assuming populations structure Pram_psex <- psex(Pram, by_pop = TRUE, method = \"multiple\") plot(Pram_psex, log = \"y\", col = ifelse(Pram_psex > 0.05, \"red\", \"blue\")) abline(h = 0.05, lty = 2) title(\"Probability of multiple encounters\\nwith pop structure\")   # The above, but correcting zero-value alleles by 1/(2*rrmlg) with no  # population structure assumed # Type ?rare_allele_correction for details. Pram_psex2 <- psex(Pram, by_pop = FALSE, d = \"rrmlg\", mul = 1/2, method = \"multiple\") plot(Pram_psex2, log = \"y\", col = ifelse(Pram_psex2 > 0.05, \"red\", \"blue\")) abline(h = 0.05, lty = 2) title(\"Probability of multiple encounters\\nwith pop structure (1/(2*rrmlg))\")   # We can also set G to the total population size (G <- nInd(Pram)) #> [1] 729 Pram_psex <- psex(Pram, by_pop = TRUE, method = \"multiple\", G = G) plot(Pram_psex, log = \"y\", col = ifelse(Pram_psex > 0.05, \"red\", \"blue\")) abline(h = 0.05, lty = 2) title(\"Probability of multiple encounters\\nwith pop structure G = 729\")   # Or we can set G to the number of unique MLGs (G <- rowSums(mlg.table(Pram, plot = FALSE) > 0)) #>    Nursery_CA    Nursery_OR    JHallCr_OR NFChetHigh_OR      Coast_OR  #>            30            19            30            35            12  #>   HunterCr_OR   Winchuck_OR ChetcoMain_OR  PistolRSF_OR  #>             4             9             7             2  Pram_psex <- psex(Pram, by_pop = TRUE, method = \"multiple\", G = G) plot(Pram_psex, log = \"y\", col = ifelse(Pram_psex > 0.05, \"red\", \"blue\")) #> Warning: 179 y values <= 0 omitted from logarithmic plot abline(h = 0.05, lty = 2) title(\"Probability of multiple encounters\\nwith pop structure G = nmll\")   ## An example of supplying previously calculated frequencies and G # From Parks and Werth, 1993, using the first three genotypes.  # The row names indicate the number of samples found with that genotype x <- \"  Hk Lap Mdh2 Pgm1 Pgm2 X6Pgd2 54 12 12 12 23 22 11 36 22 22 11 22 33 11 10 23 22 11 33 13 13\"  # Since we aren't representing the whole data set here, we are defining the # allele frequencies before the analysis. afreq <- c(Hk.1 = 0.167, Hk.2 = 0.795, Hk.3 = 0.038,             Lap.1 = 0.190, Lap.2 = 0.798, Lap.3 = 0.012,            Mdh2.0 = 0.011, Mdh2.1 = 0.967, Mdh2.2 = 0.022,            Pgm1.2 = 0.279, Pgm1.3 = 0.529, Pgm1.4 = 0.162, Pgm1.5 = 0.029,            Pgm2.1 = 0.128, Pgm2.2 = 0.385, Pgm2.3 = 0.487,            X6Pgd2.1 = 0.526, X6Pgd2.2 = 0.051, X6Pgd2.3 = 0.423)  xtab <- read.table(text = x, header = TRUE, row.names = 1)  # Here we are expanding the number of samples to their observed values. # Since we have already defined the allele frequencies, this step is actually # not necessary.  all_samples <- rep(rownames(xtab), as.integer(rownames(xtab))) xgid        <- df2genind(xtab[all_samples, ], ncode = 1)  freqs <- afreq[colnames(tab(xgid))] # only used alleles in the sample pSex  <- psex(xgid, by_pop = FALSE, freq = freqs, G = 45)  # Note, pgen returns log values for each locus, here we take the sum across # all loci and take the exponent to give us the value of pgen for each sample pGen <- exp(rowSums(pgen(xgid, by_pop = FALSE, freq = freqs)))  res  <- matrix(c(unique(pGen), unique(pSex)), ncol = 2) colnames(res) <- c(\"Pgen\", \"Psex\") res <- cbind(xtab, nRamet = rownames(xtab), round(res, 5)) rownames(res) <- 1:3 res # Compare to the first three rows of Table 2 in Parks & Werth, 1993 #>   Hk Lap Mdh2 Pgm1 Pgm2 X6Pgd2 nRamet    Pgen    Psex #> 1 12  12   12   23   22     11     54 0.00004 0.00186 #> 2 22  22   11   22   33     11     36 0.00192 0.08295 #> 3 23  22   11   33   13     13     10 0.00056 0.02483 # }"},{"path":"/reference/rare_allele_correction.html","id":null,"dir":"Reference","previous_headings":"","what":"Correcting rare allele frequencies ‚Äî rare_allele_correction","title":"Correcting rare allele frequencies ‚Äî rare_allele_correction","text":"following set arguments use rraf,  pgen, psex correct rare allele frequencies lost estimating round-robin allele frequencies.","code":""},{"path":"/reference/rare_allele_correction.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Correcting rare allele frequencies ‚Äî rare_allele_correction","text":"e numeric epsilon value use missing allele frequencies. d unit take reciprocal. div = \"sample\" 1/(n samples), d = \"mlg\" 1/(n mlg), d =  \"rrmlg\" 1/(n mlg locus). overridden e. mul multiplier div. Default mul = 1. parameter  overridden e sum_to_one TRUE, original frequencies reduced  allele frequencies sum one. Default:  FALSE","code":""},{"path":"/reference/rare_allele_correction.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Correcting rare allele frequencies ‚Äî rare_allele_correction","text":"default (d = \"sample\", e = NULL, sum_to_one = FALSE, mul = 1), add 1/(n samples) zero-value alleles. basic formula 1/(d * m) unless e specified. sum_to_one =  TRUE, frequencies scaled x/sum(x) correction,  indicating allele frequencies reduced. See examples  details. general pattern correction value MAF  rrmlg > mlg > sample","code":""},{"path":"/reference/rare_allele_correction.html","id":"motivation","dir":"Reference","previous_headings":"","what":"Motivation","title":"Correcting rare allele frequencies ‚Äî rare_allele_correction","text":"calculating allele frequencies round-robin approach, rare alleles often lost resulting zero-valued allele frequencies (Arnaud-Haond et al. 2007, Parks Werth 1993). can problematic calculating values pgen psex frequencies zero result undefined values samples contain rare alleles. solution problem give estimate frequency rare alleles, question arises. arguments provide way define rare alleles estimated/corrected.","code":""},{"path":"/reference/rare_allele_correction.html","id":"using-these-arguments","dir":"Reference","previous_headings":"","what":"Using these arguments","title":"Correcting rare allele frequencies ‚Äî rare_allele_correction","text":"arguments use functions rraf,  pgen, psex. replace dots (...)  appear end function call. example, want set  minor allele frequencies specific value (say 0.001), regardless locus, can insert e = 0.001 along  arguments (note, position specific):","code":"pgen(my_data, e = 0.001, log = FALSE)  psex(my_data, method = \"multiple\", e = 0.001)"},{"path":"/reference/rare_allele_correction.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Correcting rare allele frequencies ‚Äî rare_allele_correction","text":"Arnaud-Haond, S., Duarte, C. M., Alberto, F., & Serr√£o, E. . 2007. Standardizing methods address clonality population studies. Molecular Ecology, 16(24), 5115-5139. Parks, J. C., & Werth, C. R. 1993. study spatial features clones population bracken fern, Pteridium aquilinum (Dennstaedtiaceae). American Journal Botany, 537-544.","code":""},{"path":[]},{"path":"/reference/rare_allele_correction.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Correcting rare allele frequencies ‚Äî rare_allele_correction","text":"Zhian N. Kamvar","code":""},{"path":"/reference/rare_allele_correction.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Correcting rare allele frequencies ‚Äî rare_allele_correction","text":"","code":"# \\dontrun{  data(Pram) #-------------------------------------  # If you set correction = FALSE, you'll notice the zero-valued alleles  rraf(Pram, correction = FALSE) #> $PrMS6A1 #> PrMS6A1.165 PrMS6A1.168  #>   0.5360825   0.4639175  #>  #> $Pr9C3A1 #> Pr9C3A1.216 Pr9C3A1.226  #>   0.5357143   0.4642857  #>  #> $PrMS39A1 #> PrMS39A1.130 PrMS39A1.213 PrMS39A1.214 PrMS39A1.242 PrMS39A1.246 PrMS39A1.250  #>  0.500000000  0.000000000  0.007575758  0.000000000  0.121212121  0.363636364  #> PrMS39A1.254  #>  0.007575758  #>  #> $PrMS45A1 #> PrMS45A1.154 PrMS45A1.166 PrMS45A1.186  #>    0.0000000    0.5057471    0.4942529  #>  #> $PrMS43A1 #> PrMS43A1.213 PrMS43A1.281 PrMS43A1.285 PrMS43A1.345 PrMS43A1.349 PrMS43A1.357  #>   0.00000000   0.00000000   0.00000000   0.00000000   0.00000000   0.00000000  #> PrMS43A1.360 PrMS43A1.364 PrMS43A1.368 PrMS43A1.372 PrMS43A1.376 PrMS43A1.380  #>   0.00000000   0.00000000   0.07692308   0.11538462   0.15384615   0.03846154  #> PrMS43A1.384 PrMS43A1.388 PrMS43A1.465 PrMS43A1.469 PrMS43A1.473 PrMS43A1.477  #>   0.11538462   0.00000000   0.00000000   0.00000000   0.00000000   0.00000000  #> PrMS43A1.481 PrMS43A1.485 PrMS43A1.489 PrMS43A1.493 PrMS43A1.497 PrMS43A1.505  #>   0.07692308   0.38461538   0.03846154   0.00000000   0.00000000   0.00000000  #>   # By default, however, the data will be corrected by 1/n  rraf(Pram) #> $PrMS6A1 #> PrMS6A1.165 PrMS6A1.168  #>   0.5360825   0.4639175  #>  #> $Pr9C3A1 #> Pr9C3A1.216 Pr9C3A1.226  #>   0.5357143   0.4642857  #>  #> $PrMS39A1 #> PrMS39A1.130 PrMS39A1.213 PrMS39A1.214 PrMS39A1.242 PrMS39A1.246 PrMS39A1.250  #>  0.500000000  0.001371742  0.007575758  0.001371742  0.121212121  0.363636364  #> PrMS39A1.254  #>  0.007575758  #>  #> $PrMS45A1 #> PrMS45A1.154 PrMS45A1.166 PrMS45A1.186  #>  0.001371742  0.505747126  0.494252874  #>  #> $PrMS43A1 #> PrMS43A1.213 PrMS43A1.281 PrMS43A1.285 PrMS43A1.345 PrMS43A1.349 PrMS43A1.357  #>  0.001371742  0.001371742  0.001371742  0.001371742  0.001371742  0.001371742  #> PrMS43A1.360 PrMS43A1.364 PrMS43A1.368 PrMS43A1.372 PrMS43A1.376 PrMS43A1.380  #>  0.001371742  0.001371742  0.076923077  0.115384615  0.153846154  0.038461538  #> PrMS43A1.384 PrMS43A1.388 PrMS43A1.465 PrMS43A1.469 PrMS43A1.473 PrMS43A1.477  #>  0.115384615  0.001371742  0.001371742  0.001371742  0.001371742  0.001371742  #> PrMS43A1.481 PrMS43A1.485 PrMS43A1.489 PrMS43A1.493 PrMS43A1.497 PrMS43A1.505  #>  0.076923077  0.384615385  0.038461538  0.001371742  0.001371742  0.001371742  #>   # Of course, this is a diploid organism, we might want to set 1/2n  rraf(Pram, mul = 1/2) #> $PrMS6A1 #> PrMS6A1.165 PrMS6A1.168  #>   0.5360825   0.4639175  #>  #> $Pr9C3A1 #> Pr9C3A1.216 Pr9C3A1.226  #>   0.5357143   0.4642857  #>  #> $PrMS39A1 #> PrMS39A1.130 PrMS39A1.213 PrMS39A1.214 PrMS39A1.242 PrMS39A1.246 PrMS39A1.250  #> 0.5000000000 0.0006858711 0.0075757576 0.0006858711 0.1212121212 0.3636363636  #> PrMS39A1.254  #> 0.0075757576  #>  #> $PrMS45A1 #> PrMS45A1.154 PrMS45A1.166 PrMS45A1.186  #> 0.0006858711 0.5057471264 0.4942528736  #>  #> $PrMS43A1 #> PrMS43A1.213 PrMS43A1.281 PrMS43A1.285 PrMS43A1.345 PrMS43A1.349 PrMS43A1.357  #> 0.0006858711 0.0006858711 0.0006858711 0.0006858711 0.0006858711 0.0006858711  #> PrMS43A1.360 PrMS43A1.364 PrMS43A1.368 PrMS43A1.372 PrMS43A1.376 PrMS43A1.380  #> 0.0006858711 0.0006858711 0.0769230769 0.1153846154 0.1538461538 0.0384615385  #> PrMS43A1.384 PrMS43A1.388 PrMS43A1.465 PrMS43A1.469 PrMS43A1.473 PrMS43A1.477  #> 0.1153846154 0.0006858711 0.0006858711 0.0006858711 0.0006858711 0.0006858711  #> PrMS43A1.481 PrMS43A1.485 PrMS43A1.489 PrMS43A1.493 PrMS43A1.497 PrMS43A1.505  #> 0.0769230769 0.3846153846 0.0384615385 0.0006858711 0.0006858711 0.0006858711  #>   # To set MAF = 1/2mlg  rraf(Pram, d = \"mlg\", mul = 1/2) #> $PrMS6A1 #> PrMS6A1.165 PrMS6A1.168  #>   0.5360825   0.4639175  #>  #> $Pr9C3A1 #> Pr9C3A1.216 Pr9C3A1.226  #>   0.5357143   0.4642857  #>  #> $PrMS39A1 #> PrMS39A1.130 PrMS39A1.213 PrMS39A1.214 PrMS39A1.242 PrMS39A1.246 PrMS39A1.250  #>  0.500000000  0.005102041  0.007575758  0.005102041  0.121212121  0.363636364  #> PrMS39A1.254  #>  0.007575758  #>  #> $PrMS45A1 #> PrMS45A1.154 PrMS45A1.166 PrMS45A1.186  #>  0.005102041  0.505747126  0.494252874  #>  #> $PrMS43A1 #> PrMS43A1.213 PrMS43A1.281 PrMS43A1.285 PrMS43A1.345 PrMS43A1.349 PrMS43A1.357  #>  0.005102041  0.005102041  0.005102041  0.005102041  0.005102041  0.005102041  #> PrMS43A1.360 PrMS43A1.364 PrMS43A1.368 PrMS43A1.372 PrMS43A1.376 PrMS43A1.380  #>  0.005102041  0.005102041  0.076923077  0.115384615  0.153846154  0.038461538  #> PrMS43A1.384 PrMS43A1.388 PrMS43A1.465 PrMS43A1.469 PrMS43A1.473 PrMS43A1.477  #>  0.115384615  0.005102041  0.005102041  0.005102041  0.005102041  0.005102041  #> PrMS43A1.481 PrMS43A1.485 PrMS43A1.489 PrMS43A1.493 PrMS43A1.497 PrMS43A1.505  #>  0.076923077  0.384615385  0.038461538  0.005102041  0.005102041  0.005102041  #>   # Another way to think about this is, since these allele frequencies were # derived at each locus with different sample sizes, it's only appropriate to # correct based on those sample sizes.  rraf(Pram, d = \"rrmlg\", mul = 1/2) #> $PrMS6A1 #> PrMS6A1.165 PrMS6A1.168  #>   0.5360825   0.4639175  #>  #> $Pr9C3A1 #> Pr9C3A1.216 Pr9C3A1.226  #>   0.5357143   0.4642857  #>  #> $PrMS39A1 #> PrMS39A1.130 PrMS39A1.213 PrMS39A1.214 PrMS39A1.242 PrMS39A1.246 PrMS39A1.250  #>  0.500000000  0.007575758  0.007575758  0.007575758  0.121212121  0.363636364  #> PrMS39A1.254  #>  0.007575758  #>  #> $PrMS45A1 #> PrMS45A1.154 PrMS45A1.166 PrMS45A1.186  #>  0.005747126  0.505747126  0.494252874  #>  #> $PrMS43A1 #> PrMS43A1.213 PrMS43A1.281 PrMS43A1.285 PrMS43A1.345 PrMS43A1.349 PrMS43A1.357  #>   0.03846154   0.03846154   0.03846154   0.03846154   0.03846154   0.03846154  #> PrMS43A1.360 PrMS43A1.364 PrMS43A1.368 PrMS43A1.372 PrMS43A1.376 PrMS43A1.380  #>   0.03846154   0.03846154   0.07692308   0.11538462   0.15384615   0.03846154  #> PrMS43A1.384 PrMS43A1.388 PrMS43A1.465 PrMS43A1.469 PrMS43A1.473 PrMS43A1.477  #>   0.11538462   0.03846154   0.03846154   0.03846154   0.03846154   0.03846154  #> PrMS43A1.481 PrMS43A1.485 PrMS43A1.489 PrMS43A1.493 PrMS43A1.497 PrMS43A1.505  #>   0.07692308   0.38461538   0.03846154   0.03846154   0.03846154   0.03846154  #>   # If we were going to use these frequencies for simulations, we might want to # ensure that they all sum to one.   rraf(Pram, d = \"mlg\", mul = 1/2, sum_to_one = TRUE)  #> $PrMS6A1 #> PrMS6A1.165 PrMS6A1.168  #>   0.5360825   0.4639175  #>  #> $Pr9C3A1 #> Pr9C3A1.216 Pr9C3A1.226  #>   0.5357143   0.4642857  #>  #> $PrMS39A1 #> PrMS39A1.130 PrMS39A1.213 PrMS39A1.214 PrMS39A1.242 PrMS39A1.246 PrMS39A1.250  #>  0.494949495  0.005050505  0.007499235  0.005050505  0.119987756  0.359963269  #> PrMS39A1.254  #>  0.007499235  #>  #> $PrMS45A1 #> PrMS45A1.154 PrMS45A1.166 PrMS45A1.186  #>  0.005076142  0.503179882  0.491743976  #>  #> $PrMS43A1 #> PrMS43A1.213 PrMS43A1.281 PrMS43A1.285 PrMS43A1.345 PrMS43A1.349 PrMS43A1.357  #>  0.004716981  0.004716981  0.004716981  0.004716981  0.004716981  0.004716981  #> PrMS43A1.360 PrMS43A1.364 PrMS43A1.368 PrMS43A1.372 PrMS43A1.376 PrMS43A1.380  #>  0.004716981  0.004716981  0.071117562  0.106676343  0.142235123  0.035558781  #> PrMS43A1.384 PrMS43A1.388 PrMS43A1.465 PrMS43A1.469 PrMS43A1.473 PrMS43A1.477  #>  0.106676343  0.004716981  0.004716981  0.004716981  0.004716981  0.004716981  #> PrMS43A1.481 PrMS43A1.485 PrMS43A1.489 PrMS43A1.493 PrMS43A1.497 PrMS43A1.505  #>  0.071117562  0.355587808  0.035558781  0.004716981  0.004716981  0.004716981  #>   #------------------------------------- # When we calculate these frequencies based on population, they are heavily # influenced by the number of observed mlgs.   rraf(Pram, by_pop = TRUE, d = \"rrmlg\", mul = 1/2) #>               PrMS6A1.165 PrMS6A1.168 Pr9C3A1.216 Pr9C3A1.226 PrMS39A1.130 #> Nursery_CA      0.5000000   0.5000000   0.5000000   0.5000000          0.5 #> Nursery_OR      0.5000000   0.5000000   0.5000000   0.5000000          0.5 #> JHallCr_OR      0.6166667   0.3833333   0.6166667   0.3833333          0.5 #> NFChetHigh_OR   0.5000000   0.5000000   0.5000000   0.5000000          0.5 #> Coast_OR        0.5000000   0.5000000   0.5000000   0.5000000          0.5 #> HunterCr_OR     0.5000000   0.5000000   0.5000000   0.5000000          0.5 #> Winchuck_OR     0.5000000   0.5000000   0.5000000   0.5000000          0.5 #> ChetcoMain_OR   0.5000000   0.5000000   0.5000000   0.5000000          0.5 #> PistolRSF_OR    0.5000000   0.5000000   0.5000000   0.5000000          0.5 #>               PrMS39A1.213 PrMS39A1.214 PrMS39A1.242 PrMS39A1.246 PrMS39A1.250 #> Nursery_CA      0.02500000   0.02500000   0.02500000   0.35000000   0.15000000 #> Nursery_OR      0.03571429   0.03571429   0.03571429   0.07142857   0.35714286 #> JHallCr_OR      0.01923077   0.01923077   0.01923077   0.01923077   0.48076923 #> NFChetHigh_OR   0.02000000   0.02000000   0.02000000   0.04000000   0.42000000 #> Coast_OR        0.04545455   0.04545455   0.04545455   0.40909091   0.09090909 #> HunterCr_OR     0.16666667   0.16666667   0.16666667   0.33333333   0.16666667 #> Winchuck_OR     0.06250000   0.06250000   0.06250000   0.06250000   0.50000000 #> ChetcoMain_OR   0.10000000   0.10000000   0.10000000   0.20000000   0.20000000 #> PistolRSF_OR    0.25000000   0.25000000   0.25000000   0.25000000   0.50000000 #>               PrMS39A1.254 PrMS45A1.154 PrMS45A1.166 PrMS45A1.186 PrMS43A1.213 #> Nursery_CA      0.02500000   0.01666667     0.500000     0.500000   0.16666667 #> Nursery_OR      0.03571429   0.02631579     0.500000     0.500000   0.12500000 #> JHallCr_OR      0.01923077   0.01851852     0.537037     0.462963   0.07142857 #> NFChetHigh_OR   0.02000000   0.01612903     0.500000     0.500000   0.05555556 #> Coast_OR        0.04545455   0.04166667     0.500000     0.500000   0.25000000 #> HunterCr_OR     0.16666667   0.12500000     0.500000     0.500000   0.25000000 #> Winchuck_OR     0.06250000   0.06250000     0.500000     0.500000   0.16666667 #> ChetcoMain_OR   0.10000000   0.07142857     0.500000     0.500000   0.16666667 #> PistolRSF_OR    0.25000000   0.25000000     0.500000     0.500000   0.50000000 #>               PrMS43A1.281 PrMS43A1.285 PrMS43A1.345 PrMS43A1.349 PrMS43A1.357 #> Nursery_CA      0.16666667   0.16666667   0.16666667   0.16666667   0.16666667 #> Nursery_OR      0.12500000   0.12500000   0.12500000   0.12500000   0.12500000 #> JHallCr_OR      0.07142857   0.07142857   0.07142857   0.07142857   0.07142857 #> NFChetHigh_OR   0.05555556   0.05555556   0.05555556   0.05555556   0.05555556 #> Coast_OR        0.25000000   0.25000000   0.25000000   0.25000000   0.25000000 #> HunterCr_OR     0.25000000   0.25000000   0.25000000   0.25000000   0.25000000 #> Winchuck_OR     0.16666667   0.16666667   0.16666667   0.16666667   0.16666667 #> ChetcoMain_OR   0.16666667   0.16666667   0.16666667   0.16666667   0.16666667 #> PistolRSF_OR    0.50000000   0.50000000   0.50000000   0.50000000   0.50000000 #>               PrMS43A1.360 PrMS43A1.364 PrMS43A1.368 PrMS43A1.372 PrMS43A1.376 #> Nursery_CA      0.16666667   0.16666667   0.16666667   0.33333333   0.16666667 #> Nursery_OR      0.12500000   0.12500000   0.12500000   0.25000000   0.12500000 #> JHallCr_OR      0.07142857   0.07142857   0.07142857   0.07142857   0.42857143 #> NFChetHigh_OR   0.05555556   0.05555556   0.11111111   0.05555556   0.05555556 #> Coast_OR        0.25000000   0.25000000   0.25000000   0.25000000   0.25000000 #> HunterCr_OR     0.25000000   0.25000000   0.50000000   0.25000000   0.25000000 #> Winchuck_OR     0.16666667   0.16666667   0.16666667   0.16666667   0.33333333 #> ChetcoMain_OR   0.16666667   0.16666667   0.16666667   0.16666667   0.50000000 #> PistolRSF_OR    0.50000000   0.50000000   0.50000000   0.50000000   0.50000000 #>               PrMS43A1.380 PrMS43A1.384 PrMS43A1.388 PrMS43A1.465 PrMS43A1.469 #> Nursery_CA      0.16666667   0.16666667   0.16666667   0.16666667   0.16666667 #> Nursery_OR      0.12500000   0.12500000   0.12500000   0.12500000   0.12500000 #> JHallCr_OR      0.07142857   0.07142857   0.07142857   0.07142857   0.07142857 #> NFChetHigh_OR   0.11111111   0.16666667   0.05555556   0.05555556   0.05555556 #> Coast_OR        0.25000000   0.25000000   0.25000000   0.25000000   0.25000000 #> HunterCr_OR     0.25000000   0.25000000   0.25000000   0.25000000   0.25000000 #> Winchuck_OR     0.16666667   0.16666667   0.16666667   0.16666667   0.16666667 #> ChetcoMain_OR   0.16666667   0.16666667   0.16666667   0.16666667   0.16666667 #> PistolRSF_OR    0.50000000   0.50000000   0.50000000   0.50000000   0.50000000 #>               PrMS43A1.473 PrMS43A1.477 PrMS43A1.481 PrMS43A1.485 PrMS43A1.489 #> Nursery_CA      0.16666667   0.16666667   0.16666667    0.3333333   0.16666667 #> Nursery_OR      0.12500000   0.12500000   0.12500000    0.3750000   0.12500000 #> JHallCr_OR      0.07142857   0.07142857   0.07142857    0.4285714   0.07142857 #> NFChetHigh_OR   0.05555556   0.05555556   0.16666667    0.2777778   0.05555556 #> Coast_OR        0.25000000   0.25000000   0.25000000    0.2500000   0.25000000 #> HunterCr_OR     0.25000000   0.25000000   0.25000000    0.2500000   0.25000000 #> Winchuck_OR     0.16666667   0.16666667   0.50000000    0.1666667   0.16666667 #> ChetcoMain_OR   0.16666667   0.16666667   0.16666667    0.1666667   0.16666667 #> PistolRSF_OR    0.50000000   0.50000000   0.50000000    0.5000000   0.50000000 #>               PrMS43A1.493 PrMS43A1.497 PrMS43A1.505 #> Nursery_CA      0.16666667   0.16666667   0.16666667 #> Nursery_OR      0.12500000   0.12500000   0.12500000 #> JHallCr_OR      0.07142857   0.07142857   0.07142857 #> NFChetHigh_OR   0.05555556   0.05555556   0.05555556 #> Coast_OR        0.25000000   0.25000000   0.25000000 #> HunterCr_OR     0.50000000   0.25000000   0.25000000 #> Winchuck_OR     0.16666667   0.16666667   0.16666667 #> ChetcoMain_OR   0.16666667   0.16666667   0.16666667 #> PistolRSF_OR    0.50000000   0.50000000   0.50000000  # This can be fixed by specifying a specific value  rraf(Pram, by_pop = TRUE, e = 0.01) #>               PrMS6A1.165 PrMS6A1.168 Pr9C3A1.216 Pr9C3A1.226 PrMS39A1.130 #> Nursery_CA      0.5000000   0.5000000   0.5000000   0.5000000          0.5 #> Nursery_OR      0.5000000   0.5000000   0.5000000   0.5000000          0.5 #> JHallCr_OR      0.6166667   0.3833333   0.6166667   0.3833333          0.5 #> NFChetHigh_OR   0.5000000   0.5000000   0.5000000   0.5000000          0.5 #> Coast_OR        0.5000000   0.5000000   0.5000000   0.5000000          0.5 #> HunterCr_OR     0.5000000   0.5000000   0.5000000   0.5000000          0.5 #> Winchuck_OR     0.5000000   0.5000000   0.5000000   0.5000000          0.5 #> ChetcoMain_OR   0.5000000   0.5000000   0.5000000   0.5000000          0.5 #> PistolRSF_OR    0.5000000   0.5000000   0.5000000   0.5000000          0.5 #>               PrMS39A1.213 PrMS39A1.214 PrMS39A1.242 PrMS39A1.246 PrMS39A1.250 #> Nursery_CA            0.01         0.01   0.01000000   0.35000000   0.15000000 #> Nursery_OR            0.01         0.01   0.03571429   0.07142857   0.35714286 #> JHallCr_OR            0.01         0.01   0.01000000   0.01923077   0.48076923 #> NFChetHigh_OR         0.01         0.02   0.01000000   0.04000000   0.42000000 #> Coast_OR              0.01         0.01   0.01000000   0.40909091   0.09090909 #> HunterCr_OR           0.01         0.01   0.01000000   0.33333333   0.16666667 #> Winchuck_OR           0.01         0.01   0.01000000   0.01000000   0.50000000 #> ChetcoMain_OR         0.01         0.01   0.01000000   0.20000000   0.20000000 #> PistolRSF_OR          0.01         0.01   0.01000000   0.01000000   0.50000000 #>               PrMS39A1.254 PrMS45A1.154 PrMS45A1.166 PrMS45A1.186 PrMS43A1.213 #> Nursery_CA      0.01000000         0.01     0.500000     0.500000         0.01 #> Nursery_OR      0.03571429         0.01     0.500000     0.500000         0.01 #> JHallCr_OR      0.01000000         0.01     0.537037     0.462963         0.01 #> NFChetHigh_OR   0.02000000         0.01     0.500000     0.500000         0.01 #> Coast_OR        0.01000000         0.01     0.500000     0.500000         0.01 #> HunterCr_OR     0.01000000         0.01     0.500000     0.500000         0.01 #> Winchuck_OR     0.01000000         0.01     0.500000     0.500000         0.01 #> ChetcoMain_OR   0.10000000         0.01     0.500000     0.500000         0.01 #> PistolRSF_OR    0.01000000         0.01     0.500000     0.500000         0.01 #>               PrMS43A1.281 PrMS43A1.285 PrMS43A1.345 PrMS43A1.349 PrMS43A1.357 #> Nursery_CA            0.01         0.01         0.01         0.01         0.01 #> Nursery_OR            0.01         0.01         0.01         0.01         0.01 #> JHallCr_OR            0.01         0.01         0.01         0.01         0.01 #> NFChetHigh_OR         0.01         0.01         0.01         0.01         0.01 #> Coast_OR              0.01         0.01         0.01         0.01         0.01 #> HunterCr_OR           0.01         0.01         0.01         0.01         0.01 #> Winchuck_OR           0.01         0.01         0.01         0.01         0.01 #> ChetcoMain_OR         0.01         0.01         0.01         0.01         0.01 #> PistolRSF_OR          0.01         0.01         0.01         0.01         0.01 #>               PrMS43A1.360 PrMS43A1.364 PrMS43A1.368 PrMS43A1.372 PrMS43A1.376 #> Nursery_CA            0.01        0.010    0.1666667   0.33333333   0.01000000 #> Nursery_OR            0.01        0.125    0.1250000   0.25000000   0.01000000 #> JHallCr_OR            0.01        0.010    0.0100000   0.01000000   0.42857143 #> NFChetHigh_OR         0.01        0.010    0.1111111   0.05555556   0.05555556 #> Coast_OR              0.01        0.010    0.2500000   0.01000000   0.01000000 #> HunterCr_OR           0.01        0.010    0.5000000   0.01000000   0.01000000 #> Winchuck_OR           0.01        0.010    0.0100000   0.01000000   0.33333333 #> ChetcoMain_OR         0.01        0.010    0.0100000   0.01000000   0.50000000 #> PistolRSF_OR          0.01        0.010    0.0100000   0.01000000   0.50000000 #>               PrMS43A1.380 PrMS43A1.384 PrMS43A1.388 PrMS43A1.465 PrMS43A1.469 #> Nursery_CA       0.0100000   0.01000000         0.01         0.01         0.01 #> Nursery_OR       0.0100000   0.01000000         0.01         0.01         0.01 #> JHallCr_OR       0.0100000   0.07142857         0.01         0.01         0.01 #> NFChetHigh_OR    0.1111111   0.16666667         0.01         0.01         0.01 #> Coast_OR         0.0100000   0.25000000         0.01         0.01         0.01 #> HunterCr_OR      0.0100000   0.01000000         0.01         0.01         0.01 #> Winchuck_OR      0.1666667   0.01000000         0.01         0.01         0.01 #> ChetcoMain_OR    0.0100000   0.01000000         0.01         0.01         0.01 #> PistolRSF_OR     0.0100000   0.01000000         0.01         0.01         0.01 #>               PrMS43A1.473 PrMS43A1.477 PrMS43A1.481 PrMS43A1.485 PrMS43A1.489 #> Nursery_CA            0.01    0.0100000    0.0100000    0.3333333   0.16666667 #> Nursery_OR            0.01    0.0100000    0.0100000    0.3750000   0.12500000 #> JHallCr_OR            0.01    0.0100000    0.0100000    0.4285714   0.07142857 #> NFChetHigh_OR         0.01    0.0100000    0.1666667    0.2777778   0.05555556 #> Coast_OR              0.01    0.0100000    0.0100000    0.2500000   0.25000000 #> HunterCr_OR           0.01    0.0100000    0.0100000    0.0100000   0.01000000 #> Winchuck_OR           0.01    0.0100000    0.5000000    0.0100000   0.01000000 #> ChetcoMain_OR         0.01    0.1666667    0.1666667    0.1666667   0.01000000 #> PistolRSF_OR          0.01    0.0100000    0.0100000    0.5000000   0.01000000 #>               PrMS43A1.493 PrMS43A1.497 PrMS43A1.505 #> Nursery_CA            0.01         0.01         0.01 #> Nursery_OR            0.01         0.01         0.01 #> JHallCr_OR            0.01         0.01         0.01 #> NFChetHigh_OR         0.01         0.01         0.01 #> Coast_OR              0.01         0.01         0.01 #> HunterCr_OR           0.50         0.01         0.01 #> Winchuck_OR           0.01         0.01         0.01 #> ChetcoMain_OR         0.01         0.01         0.01 #> PistolRSF_OR          0.01         0.01         0.01  # }"},{"path":"/reference/read.genalex.html","id":null,"dir":"Reference","previous_headings":"","what":"Importing data from genalex formatted \\*.csv files. ‚Äî read.genalex","title":"Importing data from genalex formatted \\*.csv files. ‚Äî read.genalex","text":"read.genalex read genalex-formatted file exported comma separated format parse types genalex data. output genclone-class genind-class object.","code":""},{"path":"/reference/read.genalex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Importing data from genalex formatted \\*.csv files. ‚Äî read.genalex","text":"","code":"read.genalex(   genalex,   ploidy = 2,   geo = FALSE,   region = FALSE,   genclone = TRUE,   sep = \",\",   recode = FALSE )"},{"path":"/reference/read.genalex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Importing data from genalex formatted \\*.csv files. ‚Äî read.genalex","text":"genalex \\*.csv file exported genalex ploidy integer indicate ploidy dataset geo indicates presence geographic data file. data included data frame labeled xy () slot. region indicates presence regional data file. genclone TRUE (default), output genclone object. FALSE, output genind object sep character specifying column separator data. Defaults \",\". recode polyploid data: want recode data varying ploidy? Default FALSE, data returned even ploidy missing alleles coded \"0\". TRUE, data run function recode_polyploids() returned. Note prevent conversion genpop objects future. See details.","code":""},{"path":"/reference/read.genalex.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Importing data from genalex formatted \\*.csv files. ‚Äî read.genalex","text":"genclone genind bject.","code":""},{"path":"/reference/read.genalex.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Importing data from genalex formatted \\*.csv files. ‚Äî read.genalex","text":"resulting genclone-class genind-class object single strata defined strata slot. called \"Pop\" reflect population factor defined genalex input. region = TRUE, second column inserted labeled \"Region\". two strata within data set, run command adegenet::splitStrata() data set define unique stratifications.","code":""},{"path":"/reference/read.genalex.html","id":"for-polyploid-gt-n-data-sets","dir":"Reference","previous_headings":"","what":"FOR POLYPLOID (> 2n) DATA SETS","title":"Importing data from genalex formatted \\*.csv files. ‚Äî read.genalex","text":"genind object --none approach missing data. sample missing data particular locus, entire locus considered missing. works diploids haploids allelic dosage unambiguous. polyploids poses problem much data set transformed missing data. function, created workaround. importing polyploid data sets, missing data scored \"0\" kept within genind object extra allele. break analyses relying allele frequencies*. functions poppr work properly data sets multilocus genotype analysis agnostic ploidy written Bruvo's distance index association way able handle polyploids presented manner. \\* restore functionality analyses relying allele frequencies, use recode_polyploids() function.","code":""},{"path":"/reference/read.genalex.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Importing data from genalex formatted \\*.csv files. ‚Äî read.genalex","text":"function handle raw allele frequency data. case duplicated names within file, function assume separate individuals rename one sequence integers 1 number individuals. vector original names saved slot original_names.","code":""},{"path":[]},{"path":"/reference/read.genalex.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Importing data from genalex formatted \\*.csv files. ‚Äî read.genalex","text":"Zhian N. Kamvar","code":""},{"path":"/reference/read.genalex.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Importing data from genalex formatted \\*.csv files. ‚Äî read.genalex","text":"","code":"# \\dontrun{ Aeut <- read.genalex(system.file(\"files/rootrot.csv\", package=\"poppr\"))  genalex2 <- read.genalex(\"genalex2.csv\", geo=TRUE) #> Warning: cannot open file 'genalex2.csv': No such file or directory #> Error in file(con, \"r\"): cannot open the connection # A genalex file with geographic coordinate data.  genalex3 <- read.genalex(\"genalex3.csv\", region=TRUE)  #> Warning: cannot open file 'genalex3.csv': No such file or directory #> Error in file(con, \"r\"): cannot open the connection # A genalex file with regional information.  genalex4 <- read.genalex(\"genalex4.csv\", region=TRUE, geo=TRUE)  #> Warning: cannot open file 'genalex4.csv': No such file or directory #> Error in file(con, \"r\"): cannot open the connection # A genalex file with both regional and geographic information. # }"},{"path":"/reference/recode_polyploids.html","id":null,"dir":"Reference","previous_headings":"","what":"Recode polyploid microsatellite data for use in frequency based statistics. ‚Äî recode_polyploids","title":"Recode polyploid microsatellite data for use in frequency based statistics. ‚Äî recode_polyploids","text":"genind object requires ploidy consistent across loci,  workaround importing polyploid data code missing alleles \"0\"  (microsatellite data sets). advantage users  able calculate Bruvo's distance, index association, genotypic  diversity statistics. tradeoff fact broke  analyses relied allele frequencies missing alleles  treated extra alleles. function removes alleles returns  genclone genind object  allele frequencies coded based number alleles observed  single locus per individual. See examples details.","code":""},{"path":"/reference/recode_polyploids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Recode polyploid microsatellite data for use in frequency based statistics. ‚Äî recode_polyploids","text":"","code":"recode_polyploids(poly, newploidy = FALSE, addzero = FALSE)"},{"path":"/reference/recode_polyploids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Recode polyploid microsatellite data for use in frequency based statistics. ‚Äî recode_polyploids","text":"poly genclone, genind,  genpop object ploidy > 2 newploidy genind genclone objects: FALSE (default), user-defined ploidy stay constant. TRUE, ploidy sample determined maximum ploidy observed genotype. addzero add zeroes onto genind genclone objects uneven ploidy? TRUE, objects uneven ploidies zeroes appended loci allow conversion genpop objects. Defaults FALSE.","code":""},{"path":"/reference/recode_polyploids.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Recode polyploid microsatellite data for use in frequency based statistics. ‚Äî recode_polyploids","text":"genclone, genind,  genpop object.","code":""},{"path":"/reference/recode_polyploids.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Recode polyploid microsatellite data for use in frequency based statistics. ‚Äî recode_polyploids","text":"genind object two caveats make difficult work    polyploid data sets: ploidy must constant throughout data set missing data treated \"--none\" ideal world, polyploid genotypes just unambiguous    diploid haploid genotypes. Unfortunately, world live far    ideal genotype AB tetraploid organism AAAB,    AABB, ABBB. order get polyploid data adegenet    poppr, must code loci number allelic    states ploidy largest observed heterozygote (ploidy    unknown). way insert zeroes pad alleles. ,   import two genotypes : coded : zero treated extra allele represented genind object : function remedies problem removing zero column.   table become: , user able calculate frequency based statistics data set.","code":""},{"path":"/reference/recode_polyploids.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Recode polyploid microsatellite data for use in frequency based statistics. ‚Äî recode_polyploids","text":"approximation, bad one . Poppr originally intended polyploids, inclusion Bruvo's distance, made sense attempt something beyond single use.","code":""},{"path":"/reference/recode_polyploids.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Recode polyploid microsatellite data for use in frequency based statistics. ‚Äî recode_polyploids","text":"Zhian N. Kamvar","code":""},{"path":"/reference/recode_polyploids.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Recode polyploid microsatellite data for use in frequency based statistics. ‚Äî recode_polyploids","text":"","code":"data(Pinf) iPinf <- recode_polyploids(Pinf)  # Note that the difference between the number of alleles. nAll(Pinf) #> Pi02  D13 Pi33 Pi04 Pi4B Pi16  G11 Pi56 Pi63 Pi70 Pi89  #>   11   26    3    5    8    7   22    4    4    4   12  nAll(iPinf) #> Pi02  D13 Pi33 Pi04 Pi4B Pi16  G11 Pi56 Pi63 Pi70 Pi89  #>   10   25    2    4    7    6   21    3    3    3   11   # \\dontrun{ library(\"ape\")  # Removing missing data.  setPop(Pinf) <- ~Country  # Calculating Rogers' distance.  rog <- rogers.dist(genind2genpop(Pinf)) #>  #>  Converting data from a genind to a genpop object...  #>  #> ...done. #>  irog <- rogers.dist(recode_polyploids(genind2genpop(Pinf))) #>  #>  Converting data from a genind to a genpop object...  #>  #> ...done. #>   # We will now plot neighbor joining trees. Note the decreased distance in the # original data. plot(nj(rog), type = \"unrooted\") add.scale.bar(lcol = \"red\", length = 0.02)  plot(nj(irog), type = \"unrooted\") add.scale.bar(lcol = \"red\", length = 0.02)  # }"},{"path":"/reference/rraf.html","id":null,"dir":"Reference","previous_headings":"","what":"Round Robin Allele Frequencies ‚Äî rraf","title":"Round Robin Allele Frequencies ‚Äî rraf","text":"function utilizes rrmlg calculate multilocus genotypes  subsets locus resulting MLGs calculate  round-robin allele frequencies used pgen psex.","code":""},{"path":"/reference/rraf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Round Robin Allele Frequencies ‚Äî rraf","text":"","code":"rraf(gid, pop = NULL, res = \"list\", by_pop = FALSE, correction = TRUE, ...)"},{"path":"/reference/rraf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Round Robin Allele Frequencies ‚Äî rraf","text":"gid genind genclone object pop either formula set population factor  strata slot vector specifying population factor  sample. Defaults NULL. res either \"list\" (default), \"vector\", \"data.frame\". by_pop TRUE, calculation done  population. Defaults FALSE correction logical indicating whether zero-valued allele  frequencies corrected using methods outlined  correcting rare alleles.  (Default: TRUE) ... options correcting rare alleles. default correct allele frequencies 1/n","code":""},{"path":"/reference/rraf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Round Robin Allele Frequencies ‚Äî rraf","text":"vector list allele frequencies","code":""},{"path":"/reference/rraf.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Round Robin Allele Frequencies ‚Äî rraf","text":"Calculating allele frequencies clonal populations difficult   task. Frequencies calculated non-clone-corrected data suffer bias    due non-independent samples. hand, frequencies calculated    clone-corrected data artificially increases significance rare    alleles. method round-robin allele frequencies presented Parks   Werth (1993) provides method calculating allele frequencies    way minimizes effects.","code":""},{"path":"/reference/rraf.html","id":"rare-alleles","dir":"Reference","previous_headings":"","what":"Rare Alleles","title":"Round Robin Allele Frequencies ‚Äî rraf","text":"Allele frequencies given locus   calculated based samples clone corrected without   locus. happens, rare alleles high likelihood dropping   , giving frequency \"0\". analyses, perfectly   fine outcome, analyses pgen   psex, result undefined values. Setting    correction = TRUE allow control zero-valued    allele frequencies corrected. details, please see documentation   correcting rare alleles examples.","code":""},{"path":"/reference/rraf.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Round Robin Allele Frequencies ‚Äî rraf","text":"by_pop = TRUE, output matrix allele    frequencies. Additionally, argument pop NULL,   by_pop automatically TRUE.","code":""},{"path":"/reference/rraf.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Round Robin Allele Frequencies ‚Äî rraf","text":"Arnaud-Haond, S., Duarte, C. M., Alberto, F., & Serr√£o, E. . 2007. Standardizing methods address clonality population studies. Molecular Ecology, 16(24), 5115-5139. Parks, J. C., & Werth, C. R. 1993. study spatial features clones population bracken fern, Pteridium aquilinum (Dennstaedtiaceae). American Journal Botany, 537-544.","code":""},{"path":[]},{"path":"/reference/rraf.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Round Robin Allele Frequencies ‚Äî rraf","text":"Zhian N. Kamvar, Jonah Brooks, Stacy . Krueger-Hadfield, Erik Sotka","code":""},{"path":"/reference/rraf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Round Robin Allele Frequencies ‚Äî rraf","text":"","code":"data(Pram)  # Round robin allele frequencies, correcting zero-valued frequencies to 1/nInd(Pram) rraf(Pram) #> $PrMS6A1 #> PrMS6A1.165 PrMS6A1.168  #>   0.5360825   0.4639175  #>  #> $Pr9C3A1 #> Pr9C3A1.216 Pr9C3A1.226  #>   0.5357143   0.4642857  #>  #> $PrMS39A1 #> PrMS39A1.130 PrMS39A1.213 PrMS39A1.214 PrMS39A1.242 PrMS39A1.246 PrMS39A1.250  #>  0.500000000  0.001371742  0.007575758  0.001371742  0.121212121  0.363636364  #> PrMS39A1.254  #>  0.007575758  #>  #> $PrMS45A1 #> PrMS45A1.154 PrMS45A1.166 PrMS45A1.186  #>  0.001371742  0.505747126  0.494252874  #>  #> $PrMS43A1 #> PrMS43A1.213 PrMS43A1.281 PrMS43A1.285 PrMS43A1.345 PrMS43A1.349 PrMS43A1.357  #>  0.001371742  0.001371742  0.001371742  0.001371742  0.001371742  0.001371742  #> PrMS43A1.360 PrMS43A1.364 PrMS43A1.368 PrMS43A1.372 PrMS43A1.376 PrMS43A1.380  #>  0.001371742  0.001371742  0.076923077  0.115384615  0.153846154  0.038461538  #> PrMS43A1.384 PrMS43A1.388 PrMS43A1.465 PrMS43A1.469 PrMS43A1.473 PrMS43A1.477  #>  0.115384615  0.001371742  0.001371742  0.001371742  0.001371742  0.001371742  #> PrMS43A1.481 PrMS43A1.485 PrMS43A1.489 PrMS43A1.493 PrMS43A1.497 PrMS43A1.505  #>  0.076923077  0.384615385  0.038461538  0.001371742  0.001371742  0.001371742  #>    # \\dontrun{  ## Round robin allele frequencies will be different than observed  # Compare to without round robin: PrLoc <- seploc(Pram, res = \"mat\") # get locus by matrix lapply(PrLoc, colMeans, na.rm = TRUE) #> $PrMS6A1 #> PrMS6A1.165 PrMS6A1.168  #>   1.0397805   0.9602195  #>  #> $Pr9C3A1 #> Pr9C3A1.216 Pr9C3A1.226  #>   1.0411523   0.9588477  #>  #> $PrMS39A1 #> PrMS39A1.130 PrMS39A1.213 PrMS39A1.214 PrMS39A1.242 PrMS39A1.246 PrMS39A1.250  #>  1.000000000  0.001371742  0.001371742  0.001371742  0.322359396  0.648834019  #> PrMS39A1.254  #>  0.024691358  #>  #> $PrMS45A1 #> PrMS45A1.154 PrMS45A1.166 PrMS45A1.186  #>  0.001371742  1.008230453  0.990397805  #>  #> $PrMS43A1 #> PrMS43A1.213 PrMS43A1.281 PrMS43A1.285 PrMS43A1.345 PrMS43A1.349 PrMS43A1.357  #>  0.001371742  0.027434842  0.001371742  0.002743484  0.004115226  0.001371742  #> PrMS43A1.360 PrMS43A1.364 PrMS43A1.368 PrMS43A1.372 PrMS43A1.376 PrMS43A1.380  #>  0.002743484  0.035665295  0.189300412  0.209876543  0.407407407  0.058984911  #> PrMS43A1.384 PrMS43A1.388 PrMS43A1.465 PrMS43A1.469 PrMS43A1.473 PrMS43A1.477  #>  0.082304527  0.015089163  0.001371742  0.001371742  0.001371742  0.038408779  #> PrMS43A1.481 PrMS43A1.485 PrMS43A1.489 PrMS43A1.493 PrMS43A1.497 PrMS43A1.505  #>  0.117969822  0.556927298  0.138545953  0.100137174  0.001371742  0.002743484  #>   # Without round robin, clone corrected: Pcc    <- clonecorrect(Pram, strata = NA) # indiscriminantly clone correct PccLoc <- seploc(Pcc, res = \"mat\") lapply(PccLoc, colMeans, na.rm = TRUE) #> $PrMS6A1 #> PrMS6A1.165 PrMS6A1.168  #>   1.0612245   0.9387755  #>  #> $Pr9C3A1 #> Pr9C3A1.216 Pr9C3A1.226  #>   1.0714286   0.9285714  #>  #> $PrMS39A1 #> PrMS39A1.130 PrMS39A1.213 PrMS39A1.214 PrMS39A1.242 PrMS39A1.246 PrMS39A1.250  #>   1.00000000   0.01020408   0.01020408   0.01020408   0.30612245   0.58163265  #> PrMS39A1.254  #>   0.08163265  #>  #> $PrMS45A1 #> PrMS45A1.154 PrMS45A1.166 PrMS45A1.186  #>   0.01020408   1.03061224   0.95918367  #>  #> $PrMS43A1 #> PrMS43A1.213 PrMS43A1.281 PrMS43A1.285 PrMS43A1.345 PrMS43A1.349 PrMS43A1.357  #>   0.01020408   0.04081633   0.01020408   0.02040816   0.02040816   0.01020408  #> PrMS43A1.360 PrMS43A1.364 PrMS43A1.368 PrMS43A1.372 PrMS43A1.376 PrMS43A1.380  #>   0.01020408   0.07142857   0.15306122   0.21428571   0.24489796   0.16326531  #> PrMS43A1.384 PrMS43A1.388 PrMS43A1.465 PrMS43A1.469 PrMS43A1.473 PrMS43A1.477  #>   0.08163265   0.05102041   0.01020408   0.01020408   0.01020408   0.07142857  #> PrMS43A1.481 PrMS43A1.485 PrMS43A1.489 PrMS43A1.493 PrMS43A1.497 PrMS43A1.505  #>   0.18367347   0.37755102   0.14285714   0.06122449   0.01020408   0.02040816  #>   ## Different methods of obtaining round robin allele frequencies  # Get vector output. rraf(Pram, res = \"vector\") #>  PrMS6A1.165  PrMS6A1.168  Pr9C3A1.216  Pr9C3A1.226 PrMS39A1.130 PrMS39A1.213  #>  0.536082474  0.463917526  0.535714286  0.464285714  0.500000000  0.001371742  #> PrMS39A1.214 PrMS39A1.242 PrMS39A1.246 PrMS39A1.250 PrMS39A1.254 PrMS45A1.154  #>  0.007575758  0.001371742  0.121212121  0.363636364  0.007575758  0.001371742  #> PrMS45A1.166 PrMS45A1.186 PrMS43A1.213 PrMS43A1.281 PrMS43A1.285 PrMS43A1.345  #>  0.505747126  0.494252874  0.001371742  0.001371742  0.001371742  0.001371742  #> PrMS43A1.349 PrMS43A1.357 PrMS43A1.360 PrMS43A1.364 PrMS43A1.368 PrMS43A1.372  #>  0.001371742  0.001371742  0.001371742  0.001371742  0.076923077  0.115384615  #> PrMS43A1.376 PrMS43A1.380 PrMS43A1.384 PrMS43A1.388 PrMS43A1.465 PrMS43A1.469  #>  0.153846154  0.038461538  0.115384615  0.001371742  0.001371742  0.001371742  #> PrMS43A1.473 PrMS43A1.477 PrMS43A1.481 PrMS43A1.485 PrMS43A1.489 PrMS43A1.493  #>  0.001371742  0.001371742  0.076923077  0.384615385  0.038461538  0.001371742  #> PrMS43A1.497 PrMS43A1.505  #>  0.001371742  0.001371742   # Getting the output as a data frame allows us to use ggplot2 to visualize (Prdf <- rraf(Pram, res = \"data.frame\")) #>                frequency    locus       allele #> PrMS6A1.165  0.536082474  PrMS6A1  PrMS6A1.165 #> PrMS6A1.168  0.463917526  PrMS6A1  PrMS6A1.168 #> Pr9C3A1.216  0.535714286  Pr9C3A1  Pr9C3A1.216 #> Pr9C3A1.226  0.464285714  Pr9C3A1  Pr9C3A1.226 #> PrMS39A1.130 0.500000000 PrMS39A1 PrMS39A1.130 #> PrMS39A1.213 0.001371742 PrMS39A1 PrMS39A1.213 #> PrMS39A1.214 0.007575758 PrMS39A1 PrMS39A1.214 #> PrMS39A1.242 0.001371742 PrMS39A1 PrMS39A1.242 #> PrMS39A1.246 0.121212121 PrMS39A1 PrMS39A1.246 #> PrMS39A1.250 0.363636364 PrMS39A1 PrMS39A1.250 #> PrMS39A1.254 0.007575758 PrMS39A1 PrMS39A1.254 #> PrMS45A1.154 0.001371742 PrMS45A1 PrMS45A1.154 #> PrMS45A1.166 0.505747126 PrMS45A1 PrMS45A1.166 #> PrMS45A1.186 0.494252874 PrMS45A1 PrMS45A1.186 #> PrMS43A1.213 0.001371742 PrMS43A1 PrMS43A1.213 #> PrMS43A1.281 0.001371742 PrMS43A1 PrMS43A1.281 #> PrMS43A1.285 0.001371742 PrMS43A1 PrMS43A1.285 #> PrMS43A1.345 0.001371742 PrMS43A1 PrMS43A1.345 #> PrMS43A1.349 0.001371742 PrMS43A1 PrMS43A1.349 #> PrMS43A1.357 0.001371742 PrMS43A1 PrMS43A1.357 #> PrMS43A1.360 0.001371742 PrMS43A1 PrMS43A1.360 #> PrMS43A1.364 0.001371742 PrMS43A1 PrMS43A1.364 #> PrMS43A1.368 0.076923077 PrMS43A1 PrMS43A1.368 #> PrMS43A1.372 0.115384615 PrMS43A1 PrMS43A1.372 #> PrMS43A1.376 0.153846154 PrMS43A1 PrMS43A1.376 #> PrMS43A1.380 0.038461538 PrMS43A1 PrMS43A1.380 #> PrMS43A1.384 0.115384615 PrMS43A1 PrMS43A1.384 #> PrMS43A1.388 0.001371742 PrMS43A1 PrMS43A1.388 #> PrMS43A1.465 0.001371742 PrMS43A1 PrMS43A1.465 #> PrMS43A1.469 0.001371742 PrMS43A1 PrMS43A1.469 #> PrMS43A1.473 0.001371742 PrMS43A1 PrMS43A1.473 #> PrMS43A1.477 0.001371742 PrMS43A1 PrMS43A1.477 #> PrMS43A1.481 0.076923077 PrMS43A1 PrMS43A1.481 #> PrMS43A1.485 0.384615385 PrMS43A1 PrMS43A1.485 #> PrMS43A1.489 0.038461538 PrMS43A1 PrMS43A1.489 #> PrMS43A1.493 0.001371742 PrMS43A1 PrMS43A1.493 #> PrMS43A1.497 0.001371742 PrMS43A1 PrMS43A1.497 #> PrMS43A1.505 0.001371742 PrMS43A1 PrMS43A1.505 library(\"ggplot2\") ggplot(Prdf, aes(y = allele, x = frequency)) +   geom_point() +   facet_grid(locus ~ ., scale = \"free_y\", space = \"free\")   ## Round Robin allele frequencies by population (matrix only)  # By default, allele frequencies will be corrected by 1/n per population (Prbp <- rraf(Pram, by_pop = TRUE)) #>               PrMS6A1.165 PrMS6A1.168 Pr9C3A1.216 Pr9C3A1.226 PrMS39A1.130 #> Nursery_CA      0.5000000   0.5000000   0.5000000   0.5000000          0.5 #> Nursery_OR      0.5000000   0.5000000   0.5000000   0.5000000          0.5 #> JHallCr_OR      0.6166667   0.3833333   0.6166667   0.3833333          0.5 #> NFChetHigh_OR   0.5000000   0.5000000   0.5000000   0.5000000          0.5 #> Coast_OR        0.5000000   0.5000000   0.5000000   0.5000000          0.5 #> HunterCr_OR     0.5000000   0.5000000   0.5000000   0.5000000          0.5 #> Winchuck_OR     0.5000000   0.5000000   0.5000000   0.5000000          0.5 #> ChetcoMain_OR   0.5000000   0.5000000   0.5000000   0.5000000          0.5 #> PistolRSF_OR    0.5000000   0.5000000   0.5000000   0.5000000          0.5 #>               PrMS39A1.213 PrMS39A1.214 PrMS39A1.242 PrMS39A1.246 PrMS39A1.250 #> Nursery_CA     0.006896552  0.006896552  0.006896552   0.35000000   0.15000000 #> Nursery_OR     0.014084507  0.014084507  0.035714286   0.07142857   0.35714286 #> JHallCr_OR     0.004098361  0.004098361  0.004098361   0.01923077   0.48076923 #> NFChetHigh_OR  0.008771930  0.020000000  0.008771930   0.04000000   0.42000000 #> Coast_OR       0.029411765  0.029411765  0.029411765   0.40909091   0.09090909 #> HunterCr_OR    0.015151515  0.015151515  0.015151515   0.33333333   0.16666667 #> Winchuck_OR    0.028571429  0.028571429  0.028571429   0.02857143   0.50000000 #> ChetcoMain_OR  0.062500000  0.062500000  0.062500000   0.20000000   0.20000000 #> PistolRSF_OR   0.250000000  0.250000000  0.250000000   0.25000000   0.50000000 #>               PrMS39A1.254 PrMS45A1.154 PrMS45A1.166 PrMS45A1.186 PrMS43A1.213 #> Nursery_CA     0.006896552  0.006896552     0.500000     0.500000  0.006896552 #> Nursery_OR     0.035714286  0.014084507     0.500000     0.500000  0.014084507 #> JHallCr_OR     0.004098361  0.004098361     0.537037     0.462963  0.004098361 #> NFChetHigh_OR  0.020000000  0.008771930     0.500000     0.500000  0.008771930 #> Coast_OR       0.029411765  0.029411765     0.500000     0.500000  0.029411765 #> HunterCr_OR    0.015151515  0.015151515     0.500000     0.500000  0.015151515 #> Winchuck_OR    0.028571429  0.028571429     0.500000     0.500000  0.028571429 #> ChetcoMain_OR  0.100000000  0.062500000     0.500000     0.500000  0.062500000 #> PistolRSF_OR   0.250000000  0.250000000     0.500000     0.500000  0.250000000 #>               PrMS43A1.281 PrMS43A1.285 PrMS43A1.345 PrMS43A1.349 PrMS43A1.357 #> Nursery_CA     0.006896552  0.006896552  0.006896552  0.006896552  0.006896552 #> Nursery_OR     0.014084507  0.014084507  0.014084507  0.014084507  0.014084507 #> JHallCr_OR     0.004098361  0.004098361  0.004098361  0.004098361  0.004098361 #> NFChetHigh_OR  0.008771930  0.008771930  0.008771930  0.008771930  0.008771930 #> Coast_OR       0.029411765  0.029411765  0.029411765  0.029411765  0.029411765 #> HunterCr_OR    0.015151515  0.015151515  0.015151515  0.015151515  0.015151515 #> Winchuck_OR    0.028571429  0.028571429  0.028571429  0.028571429  0.028571429 #> ChetcoMain_OR  0.062500000  0.062500000  0.062500000  0.062500000  0.062500000 #> PistolRSF_OR   0.250000000  0.250000000  0.250000000  0.250000000  0.250000000 #>               PrMS43A1.360 PrMS43A1.364 PrMS43A1.368 PrMS43A1.372 PrMS43A1.376 #> Nursery_CA     0.006896552  0.006896552  0.166666667  0.333333333  0.006896552 #> Nursery_OR     0.014084507  0.125000000  0.125000000  0.250000000  0.014084507 #> JHallCr_OR     0.004098361  0.004098361  0.004098361  0.004098361  0.428571429 #> NFChetHigh_OR  0.008771930  0.008771930  0.111111111  0.055555556  0.055555556 #> Coast_OR       0.029411765  0.029411765  0.250000000  0.029411765  0.029411765 #> HunterCr_OR    0.015151515  0.015151515  0.500000000  0.015151515  0.015151515 #> Winchuck_OR    0.028571429  0.028571429  0.028571429  0.028571429  0.333333333 #> ChetcoMain_OR  0.062500000  0.062500000  0.062500000  0.062500000  0.500000000 #> PistolRSF_OR   0.250000000  0.250000000  0.250000000  0.250000000  0.500000000 #>               PrMS43A1.380 PrMS43A1.384 PrMS43A1.388 PrMS43A1.465 PrMS43A1.469 #> Nursery_CA     0.006896552  0.006896552  0.006896552  0.006896552  0.006896552 #> Nursery_OR     0.014084507  0.014084507  0.014084507  0.014084507  0.014084507 #> JHallCr_OR     0.004098361  0.071428571  0.004098361  0.004098361  0.004098361 #> NFChetHigh_OR  0.111111111  0.166666667  0.008771930  0.008771930  0.008771930 #> Coast_OR       0.029411765  0.250000000  0.029411765  0.029411765  0.029411765 #> HunterCr_OR    0.015151515  0.015151515  0.015151515  0.015151515  0.015151515 #> Winchuck_OR    0.166666667  0.028571429  0.028571429  0.028571429  0.028571429 #> ChetcoMain_OR  0.062500000  0.062500000  0.062500000  0.062500000  0.062500000 #> PistolRSF_OR   0.250000000  0.250000000  0.250000000  0.250000000  0.250000000 #>               PrMS43A1.473 PrMS43A1.477 PrMS43A1.481 PrMS43A1.485 PrMS43A1.489 #> Nursery_CA     0.006896552  0.006896552  0.006896552   0.33333333   0.16666667 #> Nursery_OR     0.014084507  0.014084507  0.014084507   0.37500000   0.12500000 #> JHallCr_OR     0.004098361  0.004098361  0.004098361   0.42857143   0.07142857 #> NFChetHigh_OR  0.008771930  0.008771930  0.166666667   0.27777778   0.05555556 #> Coast_OR       0.029411765  0.029411765  0.029411765   0.25000000   0.25000000 #> HunterCr_OR    0.015151515  0.015151515  0.015151515   0.01515152   0.01515152 #> Winchuck_OR    0.028571429  0.028571429  0.500000000   0.02857143   0.02857143 #> ChetcoMain_OR  0.062500000  0.166666667  0.166666667   0.16666667   0.06250000 #> PistolRSF_OR   0.250000000  0.250000000  0.250000000   0.50000000   0.25000000 #>               PrMS43A1.493 PrMS43A1.497 PrMS43A1.505 #> Nursery_CA     0.006896552  0.006896552  0.006896552 #> Nursery_OR     0.014084507  0.014084507  0.014084507 #> JHallCr_OR     0.004098361  0.004098361  0.004098361 #> NFChetHigh_OR  0.008771930  0.008771930  0.008771930 #> Coast_OR       0.029411765  0.029411765  0.029411765 #> HunterCr_OR    0.500000000  0.015151515  0.015151515 #> Winchuck_OR    0.028571429  0.028571429  0.028571429 #> ChetcoMain_OR  0.062500000  0.062500000  0.062500000 #> PistolRSF_OR   0.250000000  0.250000000  0.250000000  # This might be problematic because populations like PistolRSF_OR has a  # population size of four.  # By using the 'e' argument to rare_allele_correction, this can be set to a # more reasonable value. (Prbp <- rraf(Pram, by_pop = TRUE, e = 1/nInd(Pram))) #>               PrMS6A1.165 PrMS6A1.168 Pr9C3A1.216 Pr9C3A1.226 PrMS39A1.130 #> Nursery_CA      0.5000000   0.5000000   0.5000000   0.5000000          0.5 #> Nursery_OR      0.5000000   0.5000000   0.5000000   0.5000000          0.5 #> JHallCr_OR      0.6166667   0.3833333   0.6166667   0.3833333          0.5 #> NFChetHigh_OR   0.5000000   0.5000000   0.5000000   0.5000000          0.5 #> Coast_OR        0.5000000   0.5000000   0.5000000   0.5000000          0.5 #> HunterCr_OR     0.5000000   0.5000000   0.5000000   0.5000000          0.5 #> Winchuck_OR     0.5000000   0.5000000   0.5000000   0.5000000          0.5 #> ChetcoMain_OR   0.5000000   0.5000000   0.5000000   0.5000000          0.5 #> PistolRSF_OR    0.5000000   0.5000000   0.5000000   0.5000000          0.5 #>               PrMS39A1.213 PrMS39A1.214 PrMS39A1.242 PrMS39A1.246 PrMS39A1.250 #> Nursery_CA     0.001371742  0.001371742  0.001371742  0.350000000   0.15000000 #> Nursery_OR     0.001371742  0.001371742  0.035714286  0.071428571   0.35714286 #> JHallCr_OR     0.001371742  0.001371742  0.001371742  0.019230769   0.48076923 #> NFChetHigh_OR  0.001371742  0.020000000  0.001371742  0.040000000   0.42000000 #> Coast_OR       0.001371742  0.001371742  0.001371742  0.409090909   0.09090909 #> HunterCr_OR    0.001371742  0.001371742  0.001371742  0.333333333   0.16666667 #> Winchuck_OR    0.001371742  0.001371742  0.001371742  0.001371742   0.50000000 #> ChetcoMain_OR  0.001371742  0.001371742  0.001371742  0.200000000   0.20000000 #> PistolRSF_OR   0.001371742  0.001371742  0.001371742  0.001371742   0.50000000 #>               PrMS39A1.254 PrMS45A1.154 PrMS45A1.166 PrMS45A1.186 PrMS43A1.213 #> Nursery_CA     0.001371742  0.001371742     0.500000     0.500000  0.001371742 #> Nursery_OR     0.035714286  0.001371742     0.500000     0.500000  0.001371742 #> JHallCr_OR     0.001371742  0.001371742     0.537037     0.462963  0.001371742 #> NFChetHigh_OR  0.020000000  0.001371742     0.500000     0.500000  0.001371742 #> Coast_OR       0.001371742  0.001371742     0.500000     0.500000  0.001371742 #> HunterCr_OR    0.001371742  0.001371742     0.500000     0.500000  0.001371742 #> Winchuck_OR    0.001371742  0.001371742     0.500000     0.500000  0.001371742 #> ChetcoMain_OR  0.100000000  0.001371742     0.500000     0.500000  0.001371742 #> PistolRSF_OR   0.001371742  0.001371742     0.500000     0.500000  0.001371742 #>               PrMS43A1.281 PrMS43A1.285 PrMS43A1.345 PrMS43A1.349 PrMS43A1.357 #> Nursery_CA     0.001371742  0.001371742  0.001371742  0.001371742  0.001371742 #> Nursery_OR     0.001371742  0.001371742  0.001371742  0.001371742  0.001371742 #> JHallCr_OR     0.001371742  0.001371742  0.001371742  0.001371742  0.001371742 #> NFChetHigh_OR  0.001371742  0.001371742  0.001371742  0.001371742  0.001371742 #> Coast_OR       0.001371742  0.001371742  0.001371742  0.001371742  0.001371742 #> HunterCr_OR    0.001371742  0.001371742  0.001371742  0.001371742  0.001371742 #> Winchuck_OR    0.001371742  0.001371742  0.001371742  0.001371742  0.001371742 #> ChetcoMain_OR  0.001371742  0.001371742  0.001371742  0.001371742  0.001371742 #> PistolRSF_OR   0.001371742  0.001371742  0.001371742  0.001371742  0.001371742 #>               PrMS43A1.360 PrMS43A1.364 PrMS43A1.368 PrMS43A1.372 PrMS43A1.376 #> Nursery_CA     0.001371742  0.001371742  0.166666667  0.333333333  0.001371742 #> Nursery_OR     0.001371742  0.125000000  0.125000000  0.250000000  0.001371742 #> JHallCr_OR     0.001371742  0.001371742  0.001371742  0.001371742  0.428571429 #> NFChetHigh_OR  0.001371742  0.001371742  0.111111111  0.055555556  0.055555556 #> Coast_OR       0.001371742  0.001371742  0.250000000  0.001371742  0.001371742 #> HunterCr_OR    0.001371742  0.001371742  0.500000000  0.001371742  0.001371742 #> Winchuck_OR    0.001371742  0.001371742  0.001371742  0.001371742  0.333333333 #> ChetcoMain_OR  0.001371742  0.001371742  0.001371742  0.001371742  0.500000000 #> PistolRSF_OR   0.001371742  0.001371742  0.001371742  0.001371742  0.500000000 #>               PrMS43A1.380 PrMS43A1.384 PrMS43A1.388 PrMS43A1.465 PrMS43A1.469 #> Nursery_CA     0.001371742  0.001371742  0.001371742  0.001371742  0.001371742 #> Nursery_OR     0.001371742  0.001371742  0.001371742  0.001371742  0.001371742 #> JHallCr_OR     0.001371742  0.071428571  0.001371742  0.001371742  0.001371742 #> NFChetHigh_OR  0.111111111  0.166666667  0.001371742  0.001371742  0.001371742 #> Coast_OR       0.001371742  0.250000000  0.001371742  0.001371742  0.001371742 #> HunterCr_OR    0.001371742  0.001371742  0.001371742  0.001371742  0.001371742 #> Winchuck_OR    0.166666667  0.001371742  0.001371742  0.001371742  0.001371742 #> ChetcoMain_OR  0.001371742  0.001371742  0.001371742  0.001371742  0.001371742 #> PistolRSF_OR   0.001371742  0.001371742  0.001371742  0.001371742  0.001371742 #>               PrMS43A1.473 PrMS43A1.477 PrMS43A1.481 PrMS43A1.485 PrMS43A1.489 #> Nursery_CA     0.001371742  0.001371742  0.001371742  0.333333333  0.166666667 #> Nursery_OR     0.001371742  0.001371742  0.001371742  0.375000000  0.125000000 #> JHallCr_OR     0.001371742  0.001371742  0.001371742  0.428571429  0.071428571 #> NFChetHigh_OR  0.001371742  0.001371742  0.166666667  0.277777778  0.055555556 #> Coast_OR       0.001371742  0.001371742  0.001371742  0.250000000  0.250000000 #> HunterCr_OR    0.001371742  0.001371742  0.001371742  0.001371742  0.001371742 #> Winchuck_OR    0.001371742  0.001371742  0.500000000  0.001371742  0.001371742 #> ChetcoMain_OR  0.001371742  0.166666667  0.166666667  0.166666667  0.001371742 #> PistolRSF_OR   0.001371742  0.001371742  0.001371742  0.500000000  0.001371742 #>               PrMS43A1.493 PrMS43A1.497 PrMS43A1.505 #> Nursery_CA     0.001371742  0.001371742  0.001371742 #> Nursery_OR     0.001371742  0.001371742  0.001371742 #> JHallCr_OR     0.001371742  0.001371742  0.001371742 #> NFChetHigh_OR  0.001371742  0.001371742  0.001371742 #> Coast_OR       0.001371742  0.001371742  0.001371742 #> HunterCr_OR    0.500000000  0.001371742  0.001371742 #> Winchuck_OR    0.001371742  0.001371742  0.001371742 #> ChetcoMain_OR  0.001371742  0.001371742  0.001371742 #> PistolRSF_OR   0.001371742  0.001371742  0.001371742    # }"},{"path":"/reference/rrmlg.html","id":null,"dir":"Reference","previous_headings":"","what":"Round Robin Multilocus Genotypes ‚Äî rrmlg","title":"Round Robin Multilocus Genotypes ‚Äî rrmlg","text":"function mask locus one one calculate multilocus genotypes remaining loci round-robin fashion. used calculating round robin allele frequencies pgen psex.","code":""},{"path":"/reference/rrmlg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Round Robin Multilocus Genotypes ‚Äî rrmlg","text":"","code":"rrmlg(gid)"},{"path":"/reference/rrmlg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Round Robin Multilocus Genotypes ‚Äî rrmlg","text":"gid genind, genclone, loci object.","code":""},{"path":"/reference/rrmlg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Round Robin Multilocus Genotypes ‚Äî rrmlg","text":"matrix multilocus genotype assignments masked locus.    n rows m columns n = number samples m = number   loci.","code":""},{"path":"/reference/rrmlg.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Round Robin Multilocus Genotypes ‚Äî rrmlg","text":"Arnaud-Haond, S., Duarte, C. M., Alberto, F., & Serr√£o, E. . 2007. Standardizing methods address clonality population studies. Molecular Ecology, 16(24), 5115-5139. Parks, J. C., & Werth, C. R. 1993. study spatial features clones population bracken fern, Pteridium aquilinum (Dennstaedtiaceae). American Journal Botany, 537-544.","code":""},{"path":[]},{"path":"/reference/rrmlg.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Round Robin Multilocus Genotypes ‚Äî rrmlg","text":"Zhian N. Kamvar, Jonah Brooks, Stacy . Krueger-Hadfield, Erik Sotka","code":""},{"path":"/reference/rrmlg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Round Robin Multilocus Genotypes ‚Äî rrmlg","text":"","code":"# Find out the round-robin multilocus genotype assignments for P. ramorum data(Pram) pmlg_rr <- rrmlg(Pram) head(pmlg_rr) #>      PrMS6A1 Pr9C3A1 PrMS39A1 PrMS45A1 PrMS43A1 #> [1,]      61      61       35       52        9 #> [2,]      28      28       44       26        7 #> [3,]      75      75       51       67        9 #> [4,]      16      16       22       14        7 #> [5,]      27      27       43       25        7 #> [6,]      28      28       44       26        7 # \\dontrun{ # You can find out how many unique genotypes are found without each locus:  colSums(!apply(pmlg_rr, 2, duplicated)) #>  PrMS6A1  Pr9C3A1 PrMS39A1 PrMS45A1 PrMS43A1  #>       97       98       66       87       13  # }"},{"path":"/reference/samp.ia.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate random samples of the index of association for genlight objects. ‚Äî samp.ia","title":"Calculate random samples of the index of association for genlight objects. ‚Äî samp.ia","text":"Genlight objects can contain millions loci. Since make much  sense calculate index association many loci, function randomly sample sites calculate index association.","code":""},{"path":"/reference/samp.ia.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate random samples of the index of association for genlight objects. ‚Äî samp.ia","text":"","code":"samp.ia(x, n.snp = 100L, reps = 100L, threads = 1L, quiet = FALSE)"},{"path":"/reference/samp.ia.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate random samples of the index of association for genlight objects. ‚Äî samp.ia","text":"x [genlight][genlight-class] [snpclone][snpclone-class] object. n.snp number snps used calculate standardized index association. reps number times perform calculation. threads maximum number parallel threads used within  function. value 0 (default) attempt use many threads available cores/CPUs. cases ideal. value 1 force function run serially, may increase stability systems. values may specified, used caution. quiet `FALSE`, progress bar printed screen.","code":""},{"path":"/reference/samp.ia.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate random samples of the index of association for genlight objects. ‚Äî samp.ia","text":"Index association representing samples genlight   object.","code":""},{"path":"/reference/samp.ia.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate random samples of the index of association for genlight objects. ‚Äî samp.ia","text":"index association summary linkage disequilibrium    among many loci. information index association can found    associated funciton [ia()]. value near zero   indicator linkage equilibrium, whereas values significantly greater   zero indicate linkage disequilibrium. However, observed variance    distance among individuals less expected, mildly negative    values may observed (range index negative one one).   function call function [bitwise.ia()]   `reps` times calculate index association `n.snp`   loci. standardized index association ('rbarD') calculated   `reps` times. esitmates linkage disequilibrium random   genomic fractions can summarized (e.g., using histogram)   estimate genome-wide linkage disequilibrium. function currently works objects class genlight snpclone single ploidy level ploidy either haploid diploid.","code":""},{"path":"/reference/samp.ia.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Calculate random samples of the index of association for genlight objects. ‚Äî samp.ia","text":"calculate standardized index association Agapow 2001. See [ia()] details.","code":""},{"path":[]},{"path":"/reference/samp.ia.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Calculate random samples of the index of association for genlight objects. ‚Äî samp.ia","text":"Zhian N. Kamvar, Jonah C. Brooks","code":""},{"path":"/reference/samp.ia.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate random samples of the index of association for genlight objects. ‚Äî samp.ia","text":"","code":"# with structured snps assuming 1e4 positions set.seed(999) x <- glSim(n.ind = 10, n.snp.nonstruc = 5e2,             n.snp.struc = 5e2, ploidy = 2,            parallel = FALSE) position(x) <- sort(sample(1e4, 1e3)) res <- samp.ia(x) hist(res, breaks = \"fd\")   # with unstructured snps assuming 1e4 positions set.seed(999) x <- glSim(n.ind = 10, n.snp.nonstruc = 1e3, ploidy = 2) position(x) <- sort(sample(1e4, 1e3)) res <- samp.ia(x) hist(res, breaks = \"fd\")"},{"path":"/reference/shufflepop.html","id":null,"dir":"Reference","previous_headings":"","what":"Shuffle individuals in a genclone or\ngenind object independently over each locus. ‚Äî shufflepop","title":"Shuffle individuals in a genclone or\ngenind object independently over each locus. ‚Äî shufflepop","text":"Shuffle individuals genclone genind object independently locus.","code":""},{"path":"/reference/shufflepop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shuffle individuals in a genclone or\ngenind object independently over each locus. ‚Äî shufflepop","text":"","code":"shufflepop(pop, method = 1)"},{"path":"/reference/shufflepop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shuffle individuals in a genclone or\ngenind object independently over each locus. ‚Äî shufflepop","text":"pop genclone genind object method integer 1 4. See details .","code":""},{"path":"/reference/shufflepop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Shuffle individuals in a genclone or\ngenind object independently over each locus. ‚Äî shufflepop","text":"genclone genind object   shuffled specified method","code":""},{"path":"/reference/shufflepop.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Shuffle individuals in a genclone or\ngenind object independently over each locus. ‚Äî shufflepop","text":"function shuffle locus data set independently    one another, rendering essentially unlinked. following methods    available shuffle data: Permute    Alleles redistribute alleles sample throughout    locus. Missing data fixed place. maintains allelic structure,    heterozygosity variable. Parametric Bootstrap    redistribute available alleles within locus based allelic   frequencies. means allelic state heterozygosity   vary. resulting data set missing data. Non-Parametric Bootstrap shuffle allelic state    individual. Missing data fixed place. Multilocus    Style Permutation shuffle genotypes locus,    maintaining heterozygosity allelic structure.","code":""},{"path":"/reference/shufflepop.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Shuffle individuals in a genclone or\ngenind object independently over each locus. ‚Äî shufflepop","text":"Paul-Michael Agapow Austin Burt. 2001. Indices multilocus   linkage disequilibrium. Molecular Ecology Notes, 1(1-2):101-102","code":""},{"path":"/reference/shufflepop.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Shuffle individuals in a genclone or\ngenind object independently over each locus. ‚Äî shufflepop","text":"Zhian N. Kamvar","code":""},{"path":"/reference/shufflepop.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Shuffle individuals in a genclone or\ngenind object independently over each locus. ‚Äî shufflepop","text":"","code":"# load the microbov dataset data(microbov) # Let's look at a single population for now. Howsabout Zebu Zebu <- popsub(microbov, \"Zebu\") summary(Zebu) #>  #> // Number of individuals: 50 #> // Group sizes: 50 #> // Number of alleles per locus: 7 6 8 5 7 6 5 5 9 6 10 9 10 9 9 5 5 10 9 9 11 8 10 8 6 8 8 8 13 6 #> // Number of alleles per group: 235 #> // Percentage of missing data: 0.87 % #> // Observed heterozygosity: 0.54 0.58 0.7 0.67 0.48 0.6 0.46 0.5 0.71 0.8 0.74 0.86 0.78 0.72 0.9 0.82 0.62 0.74 0.82 0.64 0.8 0.41 0.6 0.76 0.58 0.52 0.76 0.66 0.82 0.4 #> // Expected heterozygosity: 0.71 0.61 0.74 0.73 0.75 0.64 0.58 0.6 0.66 0.76 0.81 0.83 0.75 0.78 0.82 0.76 0.59 0.78 0.83 0.63 0.82 0.42 0.8 0.8 0.73 0.61 0.74 0.65 0.83 0.44  # Take note of the Number of alleles per population and the Observed # heterozygosity as we go through each method.  # Permute Alleles: maintain allelic state; heterozygosity varies. summary(shufflepop(Zebu, method=1)) #>  #> // Number of individuals: 50 #> // Group sizes: 50 #> // Number of alleles per locus: 7 6 8 5 7 6 5 5 9 6 10 9 10 9 9 5 5 10 9 9 11 8 10 8 6 8 8 8 13 6 #> // Number of alleles per group: 235 #> // Percentage of missing data: 0.87 % #> // Observed heterozygosity: 0.66 0.66 0.76 0.76 0.69 0.58 0.64 0.7 0.75 0.8 0.76 0.82 0.73 0.7 0.7 0.78 0.66 0.8 0.8 0.66 0.9 0.41 0.79 0.84 0.72 0.62 0.6 0.64 0.84 0.42 #> // Expected heterozygosity: 0.71 0.61 0.74 0.73 0.75 0.64 0.58 0.6 0.66 0.76 0.81 0.83 0.75 0.78 0.82 0.76 0.59 0.78 0.83 0.63 0.82 0.42 0.8 0.8 0.73 0.61 0.74 0.65 0.83 0.44 # \\dontrun{ # Parametric Bootstrap: do not maintain allelic state or heterozygosity summary(shufflepop(Zebu, method=2)) #>  #> // Number of individuals: 50 #> // Group sizes: 50 #> // Number of alleles per locus: 7 6 8 5 7 6 4 5 8 6 10 9 8 9 8 5 5 8 9 9 11 6 8 8 6 8 6 7 12 5 #> // Number of alleles per group: 219 #> // Percentage of missing data: 0 % #> // Observed heterozygosity: 0.68 0.64 0.62 0.74 0.76 0.62 0.58 0.6 0.58 0.68 0.82 0.92 0.74 0.78 0.84 0.76 0.6 0.74 0.74 0.62 0.84 0.44 0.7 0.9 0.66 0.68 0.84 0.66 0.78 0.4 #> // Expected heterozygosity: 0.76 0.64 0.67 0.74 0.76 0.59 0.61 0.57 0.7 0.74 0.81 0.84 0.74 0.75 0.81 0.77 0.55 0.78 0.79 0.64 0.8 0.38 0.77 0.79 0.69 0.62 0.73 0.66 0.83 0.45  # Non-Parametric Bootstrap: do not maintain allelic state or heterozygosity. summary(shufflepop(Zebu, method=3)) #>  #> // Number of individuals: 50 #> // Group sizes: 50 #> // Number of alleles per locus: 7 6 8 5 7 6 5 5 9 6 10 9 10 9 9 5 5 10 9 9 11 8 10 8 6 8 8 8 13 6 #> // Number of alleles per group: 235 #> // Percentage of missing data: 0 % #> // Observed heterozygosity: 0.9 0.9 0.84 0.78 0.76 0.76 0.84 0.84 0.86 0.92 0.92 0.9 0.96 0.96 0.82 0.72 0.86 0.86 0.92 0.88 0.9 0.86 0.84 0.92 0.82 0.84 0.84 0.84 0.86 0.84 #> // Expected heterozygosity: 0.86 0.83 0.86 0.8 0.85 0.82 0.79 0.79 0.88 0.82 0.89 0.88 0.89 0.88 0.88 0.79 0.8 0.89 0.88 0.88 0.9 0.87 0.89 0.87 0.82 0.87 0.86 0.87 0.9 0.82  # Multilocus Style: maintain allelic state and heterozygosity. summary(shufflepop(Zebu, method=4)) #>  #> // Number of individuals: 50 #> // Group sizes: 50 #> // Number of alleles per locus: 7 6 8 5 7 6 5 5 9 6 10 9 10 9 9 5 5 10 9 9 11 8 10 8 6 8 8 8 13 6 #> // Number of alleles per group: 235 #> // Percentage of missing data: 0.87 % #> // Observed heterozygosity: 0.54 0.58 0.7 0.67 0.48 0.6 0.46 0.5 0.71 0.8 0.74 0.86 0.78 0.72 0.9 0.82 0.62 0.74 0.82 0.64 0.8 0.41 0.6 0.76 0.58 0.52 0.76 0.66 0.82 0.4 #> // Expected heterozygosity: 0.71 0.61 0.74 0.73 0.75 0.64 0.58 0.6 0.66 0.76 0.81 0.83 0.75 0.78 0.82 0.76 0.59 0.78 0.83 0.63 0.82 0.42 0.8 0.8 0.73 0.61 0.74 0.65 0.83 0.44 # }"},{"path":"/reference/snpclone-coercion-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a snpclone object from a genlight object. ‚Äî as.snpclone","title":"Create a snpclone object from a genlight object. ‚Äî as.snpclone","text":"Wrapper snpclone initializer.","code":""},{"path":"/reference/snpclone-coercion-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a snpclone object from a genlight object. ‚Äî as.snpclone","text":"","code":"as.snpclone(x, ..., parallel = FALSE, n.cores = NULL, mlg, mlgclass = TRUE)"},{"path":"/reference/snpclone-coercion-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a snpclone object from a genlight object. ‚Äî as.snpclone","text":"x genlight snpclone  object ... arguments passed genlight constructor. used x missing. parallel parallel package used construct object? n.cores many cores utilized? See documentation genlight details. mlg vector multilocus genotypes object class MLG new snpclone object. mlgclass TRUE (default), multilocus genotypes represented MLG object.","code":""},{"path":"/reference/snpclone-coercion-methods.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create a snpclone object from a genlight object. ‚Äî as.snpclone","text":"Zhian N. Kamvar","code":""},{"path":"/reference/snpclone-coercion-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a snpclone object from a genlight object. ‚Äî as.snpclone","text":"","code":"(x <- as.snpclone(glSim(100, 1e3, ploid=2))) #>  ||| SNPCLONE OBJECT ||||||||| #>  #>  || 100 genotypes,  1,000 binary SNPs, size: 182.6 Kb #>  0 (0 %) missing data #>  #>  || Basic content #>    @gen: list of 100 SNPbin #>    @mlg: 100 original multilocus genotypes #>    @ploidy: ploidy of each individual  (range: 2-2) #>  #>  || Optional content #>    @other: a list containing: ancestral.pops  #>  #> NULL # \\dontrun{ # Without parallel processing system.time(x <- as.snpclone(glSim(1000, 1e5, ploid=2))) #>    user  system elapsed  #> 103.761  17.851 121.638   # With parallel processing... doesn't really save you much time. system.time(x <- as.snpclone(glSim(1000, 1e5, ploid=2, parallel = TRUE),                               parallel = TRUE)) #> Loading required package: parallel #>    user  system elapsed  #> 103.208  11.911 115.625  # }"},{"path":"/reference/snpclone-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Methods used for the snpclone object ‚Äî [,snpclone,ANY,ANY,ANY-method","title":"Methods used for the snpclone object ‚Äî [,snpclone,ANY,ANY,ANY-method","text":"Default methods subsetting snpclone objects.","code":""},{"path":"/reference/snpclone-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Methods used for the snpclone object ‚Äî [,snpclone,ANY,ANY,ANY-method","text":"","code":"# S4 method for snpclone,ANY,ANY,ANY [(x, i, j, ..., mlg.reset = FALSE, drop = FALSE)  # S4 method for snpclone initialize(.Object, ..., mlg, mlgclass = TRUE)  # S4 method for snpclone show(object)"},{"path":"/reference/snpclone-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Methods used for the snpclone object ‚Äî [,snpclone,ANY,ANY,ANY-method","text":"x snpclone object vector numerics indicating number individuals desired j vector numerics corresponding loci desired. ... passed genlight object. mlg.reset logical. Defaults FALSE. TRUE, mlg vector reset drop set FALSE .Object character, \"snpclone\" mlg vector element assigns multilocus genotype individual data set. mlgclass logical value specifying whether translate mlg object MLG class object. object snpclone object","code":""},{"path":"/reference/snpclone-method.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Methods used for the snpclone object ‚Äî [,snpclone,ANY,ANY,ANY-method","text":"Zhian N. Kamvar","code":""},{"path":"/reference/test_replen.html","id":null,"dir":"Reference","previous_headings":"","what":"Test repeat length consistency. ‚Äî test_replen","title":"Test repeat length consistency. ‚Äî test_replen","text":"function test consistency sense alleles  able represented discrete units division rounding.","code":""},{"path":"/reference/test_replen.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test repeat length consistency. ‚Äî test_replen","text":"","code":"test_replen(gid, replen)"},{"path":"/reference/test_replen.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test repeat length consistency. ‚Äî test_replen","text":"gid genind genclone object replen numeric vector repeat motif lengths.","code":""},{"path":"/reference/test_replen.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test repeat length consistency. ‚Äî test_replen","text":"logical vector indicating whether repeat motif length   consistent.","code":""},{"path":"/reference/test_replen.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Test repeat length consistency. ‚Äî test_replen","text":"function modified version used    doi:10.5281/zenodo.13007 .","code":""},{"path":"/reference/test_replen.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Test repeat length consistency. ‚Äî test_replen","text":"Zhian N. Kamvar, Meg M. Larsen, Alan M. Kanaskie, Everett M.    Hansen, & Niklaus J. Gr√ºnwald. Sudden_Oak_Death_in_Oregon_Forests: Spatial   temporal population dynamics sudden oak death epidemic Oregon   Forests. ZENODO, doi:10.5281/zenodo.13007 , 2014. Kamvar, Z. N., Larsen, M. M., Kanaskie, . M., Hansen, E. M., & Gr√ºnwald,   N. J. (2015). Spatial temporal analysis populations sudden   oak death pathogen Oregon forests. Phytopathology 105:982-989.   doi: doi:10.1094/PHYTO-12-14-0350-FI Ruzica Bruvo, Nicolaas K. Michiels, Thomas G. D'Souza, Hinrich    Schulenburg. simple method calculation microsatellite genotype   distances irrespective ploidy level. Molecular Ecology, 13(7):2101-2106,   2004.","code":""},{"path":[]},{"path":"/reference/test_replen.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Test repeat length consistency. ‚Äî test_replen","text":"Zhian N. Kamvar","code":""},{"path":"/reference/test_replen.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test repeat length consistency. ‚Äî test_replen","text":"","code":"data(Pram) (Pram_replen <- setNames(c(3, 2, 4, 4, 4), locNames(Pram))) #>  PrMS6A1  Pr9C3A1 PrMS39A1 PrMS45A1 PrMS43A1  #>        3        2        4        4        4  test_replen(Pram, Pram_replen) #>  PrMS6A1  Pr9C3A1 PrMS39A1 PrMS45A1 PrMS43A1  #>     TRUE     TRUE    FALSE     TRUE     TRUE"},{"path":"/reference/unique-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Unique and Duplicated implementations for MLG objects ‚Äî unique,MLG-method","title":"Unique and Duplicated implementations for MLG objects ‚Äî unique,MLG-method","text":"internal use","code":""},{"path":"/reference/unique-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unique and Duplicated implementations for MLG objects ‚Äî unique,MLG-method","text":"","code":"# S4 method for MLG unique(x, incomparables = FALSE, ...)  # S4 method for MLG duplicated(x, incomparables = FALSE, ...)"},{"path":"/reference/unique-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Unique and Duplicated implementations for MLG objects ‚Äî unique,MLG-method","text":"incomparables vector values compared ... options passed base function unique duplicated.","code":""},{"path":[]},{"path":"/reference/upgma.html","id":null,"dir":"Reference","previous_headings":"","what":"UPGMA ‚Äî upgma","title":"UPGMA ‚Äî upgma","text":"UPGMA clustering. Just wrapper function around hclust.","code":""},{"path":"/reference/upgma.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"UPGMA ‚Äî upgma","text":"","code":"upgma(d)"},{"path":"/reference/upgma.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"UPGMA ‚Äî upgma","text":"d distance matrix.","code":""},{"path":"/reference/upgma.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"UPGMA ‚Äî upgma","text":"phylogenetic tree class phylo.","code":""},{"path":[]},{"path":"/reference/upgma.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"UPGMA ‚Äî upgma","text":"Klaus Schliep klaus.schliep@gmail.com","code":""},{"path":"/reference/upgma.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"UPGMA ‚Äî upgma","text":"","code":"library(ape) data(woodmouse) dm <- dist.dna(woodmouse) tree <- upgma(dm) plot(tree)"},{"path":"/reference/win.ia.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate windows of the index of association for genlight objects. ‚Äî win.ia","title":"Calculate windows of the index of association for genlight objects. ‚Äî win.ia","text":"Genlight objects can contain millions loci. Since make much sense calculate index association many loci, function scan windows across loci positions calculate index association.","code":""},{"path":"/reference/win.ia.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate windows of the index of association for genlight objects. ‚Äî win.ia","text":"","code":"win.ia(   x,   window = 100L,   min.snps = 3L,   threads = 1L,   quiet = FALSE,   name_window = TRUE,   chromosome_buffer = TRUE )"},{"path":"/reference/win.ia.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate windows of the index of association for genlight objects. ‚Äî win.ia","text":"x genlight snpclone object. window integer specifying size window. min.snps integer specifying minimum number snps allowed per window. window meet criteria, value return NA. threads maximum number parallel threads used within function. Defaults 1 thread, function run serially. value 0 attempt use many threads available cores/CPUs. cases ideal speed. Note: option passed bitwise.ia() parallelize windowization process. quiet FALSE (default), progress bar printed screen. name_window TRUE (default), result vector named terminal position window. case several chromosomes represented, position appended using period/full stop. chromosome_buffer DEPRECATED TRUE (default), buffers placed adjacent chromosomal positions prevent windows spanning two chromosomes.","code":""},{"path":"/reference/win.ia.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate windows of the index of association for genlight objects. ‚Äî win.ia","text":"value standardized index association windows chromosome.","code":""},{"path":"/reference/win.ia.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Calculate windows of the index of association for genlight objects. ‚Äî win.ia","text":"calculate standardized index association Agapow Burt, 2001. See ia() details.","code":""},{"path":[]},{"path":"/reference/win.ia.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Calculate windows of the index of association for genlight objects. ‚Äî win.ia","text":"Zhian N. Kamvar, Jonah C. Brooks","code":""},{"path":"/reference/win.ia.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate windows of the index of association for genlight objects. ‚Äî win.ia","text":"","code":"# with structured snps assuming 1e4 positions set.seed(999) x <- glSim(n.ind = 10, n.snp.nonstruc = 5e2, n.snp.struc = 5e2, ploidy = 2) position(x) <- sort(sample(1e4, 1e3)) res <- win.ia(x, window = 300L) # Calculate for windows of size 300 plot(res, type = \"l\")   # \\dontrun{  # unstructured snps set.seed(999) x <- glSim(n.ind = 10, n.snp.nonstruc = 1e3, ploidy = 2) position(x) <- sort(sample(1e4, 1e3)) res <- win.ia(x, window = 300L) # Calculate for windows of size 300 plot(res, type = \"l\")   # Accounting for chromosome coordinates set.seed(999) x <- glSim(n.ind = 10, n.snp.nonstruc = 5e2, n.snp.struc = 5e2, ploidy = 2) position(x) <- as.vector(vapply(1:10, function(x) sort(sample(1e3, 100)), integer(100))) chromosome(x) <- rep(1:10, each = 100) res <- win.ia(x, window = 100L) plot(res, type = \"l\")   # Converting chromosomal coordinates to tidy data library(\"dplyr\") #>  #> Attaching package: ‚Äòdplyr‚Äô #> The following objects are masked from ‚Äòpackage:igraph‚Äô: #>  #>     as_data_frame, groups, union #> The following object is masked from ‚Äòpackage:ape‚Äô: #>  #>     where #> The following objects are masked from ‚Äòpackage:stats‚Äô: #>  #>     filter, lag #> The following objects are masked from ‚Äòpackage:base‚Äô: #>  #>     intersect, setdiff, setequal, union library(\"tidyr\") #> Error in library(\"tidyr\"): there is no package called ‚Äòtidyr‚Äô res_tidy <- res %>%    tibble(rd = ., chromosome = names(.)) %>% # create two column data frame   separate(chromosome, into = c(\"chromosome\", \"position\")) %>% # get the position info   mutate(position = as.integer(position)) %>% # force position as integers   mutate(chromosome = factor(chromosome, unique(chromosome))) # force order chromosomes #> Error in separate(., chromosome, into = c(\"chromosome\", \"position\")): could not find function \"separate\" res_tidy #> Error in eval(expr, envir, enclos): object 'res_tidy' not found  # Plotting with ggplot2 library(\"ggplot2\") ggplot(res_tidy, aes(x = position, y = rd, color = chromosome)) +   geom_line() +   facet_wrap(~chromosome, nrow = 1) +   ylab(expression(bar(r)[d])) +   xlab(\"terminal position of sliding window\") +   labs(caption = \"window size: 100bp\") +    theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5)) +   theme(legend.position = \"top\") #> Error in eval(expr, envir, enclos): object 'res_tidy' not found  # }"},{"path":"/news/index.html","id":"poppr-295","dir":"Changelog","previous_headings":"","what":"poppr 2.9.5","title":"poppr 2.9.5","text":"CRAN release: 2024-01-15","code":""},{"path":"/news/index.html","id":"cran-maintenance-2-9-5","dir":"Changelog","previous_headings":"","what":"CRAN MAINTENANCE","title":"poppr 2.9.5","text":"usenames option xcolor removed algorithms equations vignette. Old documentation fixed conform CRAN standards.","code":""},{"path":"/news/index.html","id":"poppr-294","dir":"Changelog","previous_headings":"","what":"poppr 2.9.4","title":"poppr 2.9.4","text":"CRAN release: 2023-03-23","code":""},{"path":"/news/index.html","id":"cran-maintenance-2-9-4","dir":"Changelog","previous_headings":"","what":"CRAN MAINTENANCE","title":"poppr 2.9.4","text":"function declaration added SEXP omp_test() failing tests fixed. code object classes compared == fixed use inherits()","code":""},{"path":"/news/index.html","id":"dependencies-2-9-4","dir":"Changelog","previous_headings":"","what":"DEPENDENCIES","title":"poppr 2.9.4","text":"{RClone} removed suggested package archived CRAN time ago.","code":""},{"path":"/news/index.html","id":"poppr-293","dir":"Changelog","previous_headings":"","what":"poppr 2.9.3","title":"poppr 2.9.3","text":"CRAN release: 2021-09-07","code":""},{"path":"/news/index.html","id":"cran-maintenance-2-9-3","dir":"Changelog","previous_headings":"","what":"CRAN MAINTENANCE","title":"poppr 2.9.3","text":"C headers re-arranged place R-specific headers OMP headers avoid problems clang 13 (@zkamvar, https://github.com/grunwaldlab/poppr/pull/246).","code":""},{"path":"/news/index.html","id":"poppr-292","dir":"Changelog","previous_headings":"","what":"poppr 2.9.2","title":"poppr 2.9.2","text":"CRAN release: 2021-05-22","code":""},{"path":"/news/index.html","id":"cran-maintenance-2-9-2","dir":"Changelog","previous_headings":"","what":"CRAN MAINTENANCE","title":"poppr 2.9.2","text":"test bruvo.() fixed superficial way avoid error CRAN R-devel (@zkamvar, https://github.com/grunwaldlab/poppr/pull/242).","code":""},{"path":"/news/index.html","id":"poppr-291","dir":"Changelog","previous_headings":"","what":"poppr 2.9.1","title":"poppr 2.9.1","text":"CRAN release: 2021-03-21","code":""},{"path":"/news/index.html","id":"dependency-update-2-9-1","dir":"Changelog","previous_headings":"","what":"DEPENDENCY UPDATE","title":"poppr 2.9.1","text":"{phangorn} package longer imported. used one line code package (upgma), copied implementation author‚Äôs permission (@KlausVigo, https://github.com/grunwaldlab/poppr/pull/237).","code":""},{"path":"/news/index.html","id":"poppr-290","dir":"Changelog","previous_headings":"","what":"poppr 2.9.0","title":"poppr 2.9.0","text":"CRAN release: 2021-02-06","code":""},{"path":"/news/index.html","id":"new-features-2-9-0","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"poppr 2.9.0","text":"bruvo.() calculate bruvo‚Äôs distances query dataset reference dataset (@davefol, #223)","code":""},{"path":"/news/index.html","id":"deprecation-2-9-0","dir":"Changelog","previous_headings":"","what":"DEPRECATION","title":"poppr 2.9.0","text":"argument blacklist deprecated favor exclude following functions: bruvo.msn(), poppr.msn(), clonecorrect(), poppr(), mlg.table(), mlg.crosspop(), popsub(). removed poppr version 2.10 (@zkamvar, #218)","code":""},{"path":"/news/index.html","id":"github-2-9-0","dir":"Changelog","previous_headings":"","what":"GITHUB","title":"poppr 2.9.0","text":"default branch repository now ‚Äúmain‚Äù (@zkamvar, #218)","code":""},{"path":"/news/index.html","id":"bug-fix-2-9-0","dir":"Changelog","previous_headings":"","what":"BUG FIX","title":"poppr 2.9.0","text":"genind2genalex() longer converts diploid sequence data zeros export fixes #231 (@zkamvar, #233). bitwise.ia() longer integer overflows early Windows (@zkamvar, #235)","code":""},{"path":"/news/index.html","id":"poppr-287","dir":"Changelog","previous_headings":"","what":"poppr 2.8.7","title":"poppr 2.8.7","text":"CRAN release: 2021-01-06","code":""},{"path":"/news/index.html","id":"cran-maintenance-2-8-7","dir":"Changelog","previous_headings":"","what":"CRAN MAINTENANCE","title":"poppr 2.8.7","text":"Links packages now formatted correctly.","code":""},{"path":"/news/index.html","id":"poppr-286","dir":"Changelog","previous_headings":"","what":"poppr 2.8.6","title":"poppr 2.8.6","text":"CRAN release: 2020-06-02","code":""},{"path":"/news/index.html","id":"bug-fix-2-8-6","dir":"Changelog","previous_headings":"","what":"BUG FIX","title":"poppr 2.8.6","text":"read.genalex() now can import columns entirely ‚ÄúT‚Äù alleles ‚ÄúT‚Äù instead ‚ÄúTRUE‚Äù. (See https://github.com/grunwaldlab/poppr/issues/214 details).","code":""},{"path":"/news/index.html","id":"new-imports-2-8-6","dir":"Changelog","previous_headings":"","what":"NEW IMPORTS","title":"poppr 2.8.6","text":"Progress bars now implemented via progressr package, gives user control displayed (). example, get auditory updates instead progress bar, can use ‚Äúbeepr‚Äù package set progressr::handlers(\"beepr\"). play alert step (~50) final sound. suppress progress bars entirely, can use progressr::handlers(\"void\"). progress bars replaced utils::txtProgressBar() dplyr::progress_estimated() bars.","code":""},{"path":"/news/index.html","id":"poppr-285","dir":"Changelog","previous_headings":"","what":"poppr 2.8.5","title":"poppr 2.8.5","text":"CRAN release: 2020-02-25","code":""},{"path":"/news/index.html","id":"cran-maintenance-2-8-5","dir":"Changelog","previous_headings":"","what":"CRAN MAINTENANCE","title":"poppr 2.8.5","text":"output poppr() function longer contain factor columns population names file names. due R 4.0.0 changing behavior stringsAsFactors default data.frame(). (See https://github.com/grunwaldlab/poppr/issue/212 details).","code":""},{"path":"/news/index.html","id":"poppr-284","dir":"Changelog","previous_headings":"","what":"poppr 2.8.4","title":"poppr 2.8.4","text":"CRAN release: 2020-02-12","code":""},{"path":"/news/index.html","id":"cran-maintenance-2-8-4","dir":"Changelog","previous_headings":"","what":"CRAN MAINTENANCE","title":"poppr 2.8.4","text":"Update documentation S4 method","code":""},{"path":"/news/index.html","id":"poppr-283","dir":"Changelog","previous_headings":"","what":"poppr 2.8.3","title":"poppr 2.8.3","text":"CRAN release: 2019-06-18","code":""},{"path":"/news/index.html","id":"bug-fix-2-8-3","dir":"Changelog","previous_headings":"","what":"BUG FIX","title":"poppr 2.8.3","text":"read.genalex() now correctly parses strata user imports data contains duplicated data individuals named integers less number samples data (prepended zeroes) (See https://github.com/grunwaldlab/poppr/pull/202).","code":""},{"path":"/news/index.html","id":"new-features-2-8-3","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"poppr 2.8.3","text":"MSN functions: nodes single populations displayed circles instead pies. (@fdchevalier, https://github.com/grunwaldlab/poppr/pull/203)","code":""},{"path":"/news/index.html","id":"misc-2-8-3","dir":"Changelog","previous_headings":"","what":"MISC","title":"poppr 2.8.3","text":"mlg.vector() now safer now uses loop instead function --scope operator (<<-) (see #205) shufflepop() now safer now uses loop instead function --scope operator (<<-) (see #205) MLG class gains new distenv slot, store environment distance function matrix exists. accompanied accessor name (see #206). \"mlg.filter<-\"() replacement methods longer search global environment evaluating distance function matrix (see #206). Tests mlg.filter() longer assign objects global environment DOIs publications added DESCRIPTION","code":""},{"path":"/news/index.html","id":"poppr-282","dir":"Changelog","previous_headings":"","what":"poppr 2.8.2","title":"poppr 2.8.2","text":"CRAN release: 2019-03-11","code":""},{"path":"/news/index.html","id":"misc-2-8-2","dir":"Changelog","previous_headings":"","what":"MISC","title":"poppr 2.8.2","text":"Tests relying randomization updated R 3.6.0, fixes biased randomization. visible impact users. See https://github.com/grunwaldlab/poppr/pull/198 details.","code":""},{"path":"/news/index.html","id":"poppr-281","dir":"Changelog","previous_headings":"","what":"poppr 2.8.1","title":"poppr 2.8.1","text":"CRAN release: 2018-08-22","code":""},{"path":"/news/index.html","id":"bug-fix-2-8-1","dir":"Changelog","previous_headings":"","what":"BUG FIX","title":"poppr 2.8.1","text":"error appeared AMOVA calls genind objects character- based alleles fixed (see https://github.com/grunwaldlab/poppr/issues/190 details)","code":""},{"path":"/news/index.html","id":"documentation-2-8-1","dir":"Changelog","previous_headings":"","what":"DOCUMENTATION","title":"poppr 2.8.1","text":"aboot() documentation updated add citation make clear purpose limitations.","code":""},{"path":"/news/index.html","id":"misc-2-8-1","dir":"Changelog","previous_headings":"","what":"MISC","title":"poppr 2.8.1","text":"DOIs hyperlinked doi.org instead dx.doi.org (#188, @katrinleinweber)","code":""},{"path":"/news/index.html","id":"poppr-280","dir":"Changelog","previous_headings":"","what":"poppr 2.8.0","title":"poppr 2.8.0","text":"CRAN release: 2018-05-19","code":""},{"path":"/news/index.html","id":"bug-fix-2-8-0","dir":"Changelog","previous_headings":"","what":"BUG FIX","title":"poppr 2.8.0","text":"win.ia() now consistent behavior chromosome structure longer result integer overflow. (see https://github.com/grunwaldlab/poppr/issues/179). Thanks @MarisaMiller detailed bug report. plot_filter_stats() plot stats supplied list thresholds.","code":""},{"path":"/news/index.html","id":"algorithmic-change-2-8-0","dir":"Changelog","previous_headings":"","what":"ALGORITHMIC CHANGE","title":"poppr 2.8.0","text":"windows now always start position one given chromosome. result windows beginning chromosomes value NA first variant starts beyond first window. Windows now calculated chromosome independently. previous version first concatenated chromosomes least window-sized gap chromosomes, failed ensure window always started beginning chromosome. version fixes issue. (see https://github.com/grunwaldlab/poppr/issues/179).","code":""},{"path":"/news/index.html","id":"deprecation-2-8-0","dir":"Changelog","previous_headings":"","what":"DEPRECATION","title":"poppr 2.8.0","text":"chromosome_buffer argument win.ia() permanently set TRUE deprecated longer used.","code":""},{"path":"/news/index.html","id":"new-features-2-8-0","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"poppr 2.8.0","text":"poppr.amova() now handle genlight/snpclone objects. See https://github.com/grunwaldlab/poppr/pull/185 details. bitwise.dist() now two new options: euclidean scale_missing. set TRUE, distance measured Euclidean scaled amount missing data comparison. matches output base R‚Äôs dist() function fraction time memory. See https://github.com/grunwaldlab/poppr/pull/176 details. make_haplotypes() now generic defined genind genlight. genind2genalex() longer write ‚Äúgenalex.csv‚Äù default. Instead, warn user write temporary file. See https://github.com/grunwaldlab/poppr/issues/175 details. genind2genalex() now overwrite parameter set FALSE prevent accidental overwriting files. win.ia() new argument name_window, give element result designation terminal position window. Thanks @MarisaMiller suggestion! pair.ia() can now calculate p-values via permutations. (See https://github.com/grunwaldlab/poppr/issues/180 details)","code":""},{"path":"/news/index.html","id":"documentation-2-8-0","dir":"Changelog","previous_headings":"","what":"DOCUMENTATION","title":"poppr 2.8.0","text":"cutoff_predictor() added MLG vignette","code":""},{"path":"/news/index.html","id":"misc-2-8-0","dir":"Changelog","previous_headings":"","what":"MISC","title":"poppr 2.8.0","text":"RClone package added suggests (see https://github.com/grunwaldlab/poppr/issues/187)","code":""},{"path":"/news/index.html","id":"poppr-271","dir":"Changelog","previous_headings":"","what":"poppr 2.7.1","title":"poppr 2.7.1","text":"CRAN release: 2018-03-16","code":""},{"path":"/news/index.html","id":"misc-2-7-1","dir":"Changelog","previous_headings":"","what":"MISC","title":"poppr 2.7.1","text":"Missing documentation poppr.amova() added. Polysat now listed imports.","code":""},{"path":"/news/index.html","id":"poppr-270","dir":"Changelog","previous_headings":"","what":"poppr 2.7.0","title":"poppr 2.7.0","text":"CRAN release: 2018-03-16","code":""},{"path":"/news/index.html","id":"new-functions-2-7-0","dir":"Changelog","previous_headings":"","what":"NEW FUNCTIONS","title":"poppr 2.7.0","text":"make_haplotypes() split data pseudo-haplotypes use AMOVA-like analyses. previously internal function, promoted user-facing function version. .genambig() convert genind/genclone objects Polysat‚Äôs ‚Äúgenambig‚Äù class. Note polysat must installed work.","code":""},{"path":"/news/index.html","id":"algorithmic-change-2-7-0","dir":"Changelog","previous_headings":"","what":"ALGORITHMIC CHANGE","title":"poppr 2.7.0","text":"AMOVA now default using euclidean distance. affects calculations made within = FALSE filter = TRUE without user-supplied distance. affect haploid diploid data using within = TRUE. dissimilarity distance equivalent squared euclidean distance haploid genotypes, higher ploidy. using filter = TRUE without specifying distance use euclidean threshold. issue simply want group isolates missing data, however zero distance euclidean dissimilarity. Thanks goes Patrick Meirmans alerting error.","code":""},{"path":"/news/index.html","id":"new-features-2-7-0","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"poppr 2.7.0","text":"AMOVA now calculate within-individual variance polyploid data.","code":""},{"path":"/news/index.html","id":"misc-2-7-0","dir":"Changelog","previous_headings":"","what":"MISC","title":"poppr 2.7.0","text":"printing AMOVA now better handle changes methods pegas ade4.","code":""},{"path":"/news/index.html","id":"poppr-261","dir":"Changelog","previous_headings":"","what":"poppr 2.6.1","title":"poppr 2.6.1","text":"CRAN release: 2018-01-15","code":""},{"path":"/news/index.html","id":"bug-fix-2-6-1","dir":"Changelog","previous_headings":"","what":"BUG FIX","title":"poppr 2.6.1","text":"--bounds memory access error bitwise.dist() fixed. See https://github.com/grunwaldlab/poppr/issues/169 details.","code":""},{"path":"/news/index.html","id":"poppr-260","dir":"Changelog","previous_headings":"","what":"poppr 2.6.0","title":"poppr 2.6.0","text":"CRAN release: 2018-01-08","code":""},{"path":"/news/index.html","id":"new-functions-2-6-0","dir":"Changelog","previous_headings":"","what":"NEW FUNCTIONS","title":"poppr 2.6.0","text":"new function boot.ia() conceptually similar resample.ia(), except resamples replacement.","code":""},{"path":"/news/index.html","id":"new-features-2-6-0","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"poppr 2.6.0","text":"function resample.ia() now can resample individuals weighted Psex value. minimum spanning networks now scale nodes area instead radius. gives accurate picture differences MLGs. See https://github.com/grunwaldlab/poppr/issues/154 details. legend samples/node now added minimum spanning networks. See https://github.com/grunwaldlab/poppr/issues/158 details. imsn() option node size scale changed slider.","code":""},{"path":"/news/index.html","id":"bug-fix-2-6-0","dir":"Changelog","previous_headings":"","what":"BUG FIX","title":"poppr 2.6.0","text":"issue data sample names containing apostrophes imported fixed (Identified https://github.com/grunwaldlab/poppr/issues/156). bug imsn() custom MLGs result error fixed. See https://github.com/grunwaldlab/poppr/issues/155 details. bug plot_poppr_msn() setting scale.leg = FALSE result small MSN plot fixed. mlg() now works properly snpclone genlight objects. See https://github.com/grunwaldlab/poppr/issues/155 details.","code":""},{"path":"/news/index.html","id":"dependencies-2-6-0","dir":"Changelog","previous_headings":"","what":"DEPENDENCIES","title":"poppr 2.6.0","text":"minimum version igraph set 1.0.0.","code":""},{"path":"/news/index.html","id":"misc-2-6-0","dir":"Changelog","previous_headings":"","what":"MISC","title":"poppr 2.6.0","text":"MSN now plotted last plot_poppr_msn() additional legends can added necessary.","code":""},{"path":"/news/index.html","id":"poppr-250","dir":"Changelog","previous_headings":"","what":"poppr 2.5.0","title":"poppr 2.5.0","text":"CRAN release: 2017-09-11","code":""},{"path":"/news/index.html","id":"algorithmic-change-2-5-0","dir":"Changelog","previous_headings":"","what":"ALGORITHMIC CHANGE","title":"poppr 2.5.0","text":"Identified https://github.com/grunwaldlab/poppr/issues/139, Bruvo‚Äôs distance now consider possible combinations ordered alleles calculation genome addition loss models missing data. affect polyploid data contain one missing allele genotype facilitate comparison, global option old.bruvo.model, created. default set FALSE, indicating poppr use ordered allele combinations. user wants use method considering unorderd allele combinations, can set options(old.bruvo.model = TRUE) must repeated affect haploid diploid comparisons, use infinite alleles model, one missing allele genotype.","code":""},{"path":"/news/index.html","id":"deprecation-2-5-0","dir":"Changelog","previous_headings":"","what":"DEPRECATION","title":"poppr 2.5.0","text":"warning short repeat length vector Bruvo‚Äôs distance deprecated become error future jack.ia deprecated favor resample.ia clarity.","code":""},{"path":"/news/index.html","id":"bug-fix-2-5-0","dir":"Changelog","previous_headings":"","what":"BUG FIX","title":"poppr 2.5.0","text":"bug read.genalex() removed samples incorrect strata labels fixed. Thanks Hern√°n Dario Capador-Barreto identifying . See https://github.com/grunwaldlab/poppr/issues/147.","code":""},{"path":"/news/index.html","id":"misc-2-5-0","dir":"Changelog","previous_headings":"","what":"MISC","title":"poppr 2.5.0","text":"internal plotting function mlg.table now uses tidy evaluation dplyr versions > 0.5.0 package reshape2 removed imports replaced base functions (see https://github.com/grunwaldlab/poppr/issues/144 details)","code":""},{"path":"/news/index.html","id":"new-imports-2-5-0","dir":"Changelog","previous_headings":"","what":"NEW IMPORTS","title":"poppr 2.5.0","text":"Due migration dplyr version 0.7.0, poppr now imports ‚Äú!!‚Äù operator rlang package","code":""},{"path":"/news/index.html","id":"poppr-241","dir":"Changelog","previous_headings":"","what":"poppr 2.4.1","title":"poppr 2.4.1","text":"CRAN release: 2017-04-14","code":""},{"path":"/news/index.html","id":"bug-fix-2-4-1","dir":"Changelog","previous_headings":"","what":"BUG FIX","title":"poppr 2.4.1","text":"corner case repeat length vectors order erroneously subset test_replen() fix_replen() fixed. See https://github.com/grunwaldlab/poppr/issues/136 details. functions perform filtering now run serially due bug Fedora machines least two threads. Details can found https://github.com/grunwaldlab/poppr/issues/138.","code":""},{"path":"/news/index.html","id":"poppr-240","dir":"Changelog","previous_headings":"","what":"poppr 2.4.0","title":"poppr 2.4.0","text":"CRAN release: 2017-04-10","code":""},{"path":"/news/index.html","id":"new-functions-2-4-0","dir":"Changelog","previous_headings":"","what":"NEW FUNCTIONS","title":"poppr 2.4.0","text":"jack.ia() randomly jackknife sample specified n (default number MLG), calculate index association multiple iterations, giving distribution possible values given sample size.","code":""},{"path":"/news/index.html","id":"new-features-2-4-0","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"poppr 2.4.0","text":"function mlg.table() gains new parameters, ‚Äúcolor‚Äù ‚Äúbackground‚Äù. ‚Äúcolor‚Äù parameter create single barplot colors representing populations ‚Äúbackground‚Äù parameter create background plot showing abundance MLGs across populations within facets. function win.ia() now take consideration chromosomal coordinates constructing windows. additionally acquired new parameter chromosome_buffer, allows user specify whether window limited within chromosomes.","code":""},{"path":"/news/index.html","id":"notable-changes-2-4-0","dir":"Changelog","previous_headings":"","what":"NOTABLE CHANGES","title":"poppr 2.4.0","text":"calculation MLGs snpclone genlight objects performed via distance-based methods default. contrast previous behavior individuals assumed unique genotypes. see https://github.com/grunwaldlab/poppr/issues/125 details. error thrown attempting use mlg.crosspop() object < 2 populations. genotype_curve() now remove monomorphic loci calculation default loci misleadingly influence shape curve. change shape curve monomorphic loci. change optional via drop dropna parameters, recommended change parameters. calculation psex() changed accurate using method = ‚Äúmultiple‚Äù. also gains ability use several values G, one population. Documentation psex() also improved. details change, see https://github.com/grunwaldlab/poppr/issues/101","code":""},{"path":"/news/index.html","id":"bug-fix-2-4-0","dir":"Changelog","previous_headings":"","what":"BUG FIX","title":"poppr 2.4.0","text":"error given genlight object passed poppr() now correctly identifies substitute function diversity_stats() diversity table (see https://github.com/grunwaldlab/poppr/issues/123). GenAlEx files imported duplicate loci generate warning telling user duplicated loci renamed (usually _1) (see https://github.com/grunwaldlab/poppr/issues/122). Haplodiploids imported genalex files properly treated (see https://github.com/grunwaldlab/poppr/issues/124). read.genalex() now implicitly check correct number individuals data (see https://github.com/grunwaldlab/poppr/issues/128). function poppr() longer throws error sample > 0 data population (see https://github.com/grunwaldlab/poppr/issues/130). bug round-robin allele frequencies calculated by_pop = TRUE inaccurate first population fixed. details, see https://github.com/grunwaldlab/poppr/issues/132. potential integer overflow fixed SEXP association_index_haploid. ghost https://github.com/grunwaldlab/poppr/issues/100. PROTECT statements placed around allocation statements. details, see https://github.com/grunwaldlab/poppr/issues/133.","code":""},{"path":"/news/index.html","id":"misc-2-4-0","dir":"Changelog","previous_headings":"","what":"MISC","title":"poppr 2.4.0","text":"documentation bitwise.dist() clarifies role differences_only flag (see https://github.com/grunwaldlab/poppr/issues/119). Interruptions C code now handled gracefully via R_CheckUserInterrupt(). benefit long-running calculations interrupted near instantly, cost milliseconds computation time. (see https://github.com/grunwaldlab/poppr/issues/86) Bruvo‚Äôs distance now complete tests recursion commit 4e4fa40d16","code":""},{"path":"/news/index.html","id":"poppr-230","dir":"Changelog","previous_headings":"","what":"poppr 2.3.0","title":"poppr 2.3.0","text":"CRAN release: 2016-11-23","code":""},{"path":"/news/index.html","id":"new-functions-2-3-0","dir":"Changelog","previous_headings":"","what":"NEW FUNCTIONS","title":"poppr 2.3.0","text":"function bootgen2genind() help users take advantage bootstrapping distance functions packages require genind objects. details, see https://github.com/grunwaldlab/poppr/issues/112 https://github.com/grunwaldlab/poppr/issues/111","code":""},{"path":"/news/index.html","id":"new-features-2-3-0","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"poppr 2.3.0","text":"now plot parameter genotype curve enable suppress plotting. Progress bars now automatically suppressed running non-interactively. turn running non-interactively, use options(poppr.debug = TRUE). progress bar ia() poppr() now show estimated time. dplyr‚Äôs progress_estimated().","code":""},{"path":"/news/index.html","id":"misc-2-3-0","dir":"Changelog","previous_headings":"","what":"MISC","title":"poppr 2.3.0","text":"hist argument ia() deprecated favor plot. x axis genotype_curve() plot now numeric, allowing fit smoothing function points without use hack geom_smooth(aes(group = 1)). thanks Kara Woo pointing twitter (https://twitter.com/kara_woo/status/783336540407685120). ‚Äúshow‚Äù method genclone objects now delimits populations strata comma, avoiding confusion multi-word population names. Thanks @knausb fix https://github.com/grunwaldlab/poppr/pull/116. Documentation poppr.amova now contains note significance testing ade4 function randtest.amova.","code":""},{"path":"/news/index.html","id":"bug-fix-2-3-0","dir":"Changelog","previous_headings":"","what":"BUG FIX","title":"poppr 2.3.0","text":"subsetting methods now properly handle mlgs using sample names subset genclone snpclone objects. See https://github.com/grunwaldlab/poppr/issues/114 details. plotting bug mlg.table() fixed plots now show maximum value. Bugs subsetting bootgen bruvomat objects loci specified fixed. See https://github.com/grunwaldlab/poppr/issues/118 details.","code":""},{"path":"/news/index.html","id":"poppr-221","dir":"Changelog","previous_headings":"","what":"poppr 2.2.1","title":"poppr 2.2.1","text":"CRAN release: 2016-08-29","code":""},{"path":"/news/index.html","id":"bug-fix-2-2-1","dir":"Changelog","previous_headings":"","what":"BUG FIX","title":"poppr 2.2.1","text":"problem exporting haploid sequence data genalex format fixed (see https://github.com/grunwaldlab/poppr/issues/108) Data without population structure longer throws error imsn()","code":""},{"path":"/news/index.html","id":"new-features-2-2-1","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"poppr 2.2.1","text":"can now specify layout parameters imsn() *.msn functions now take account whether data set collapsed MLGs. (see https://github.com/grunwaldlab/poppr/issues/107)","code":""},{"path":"/news/index.html","id":"misc-2-2-1","dir":"Changelog","previous_headings":"","what":"MISC","title":"poppr 2.2.1","text":"Errors mlg.filter now make sense. (see https://github.com/grunwaldlab/poppr/issues/109) vignette poppr_manual converted HTML format. (see https://github.com/grunwaldlab/poppr/issues/113)","code":""},{"path":"/news/index.html","id":"poppr-220","dir":"Changelog","previous_headings":"","what":"poppr 2.2.0","title":"poppr 2.2.0","text":"CRAN release: 2016-06-13","code":""},{"path":"/news/index.html","id":"new-functions-2-2-0","dir":"Changelog","previous_headings":"","what":"NEW FUNCTIONS","title":"poppr 2.2.0","text":"incomp() check data see incomparable samples.","code":""},{"path":"/news/index.html","id":"new-features-2-2-0","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"poppr 2.2.0","text":"Threshold argument added filter_stats() (see https://github.com/grunwaldlab/poppr/issues/94) pipe operator (%>%) now exported magrittr make chaining commands easier. mlg.filter() can now return multiple statistics. user can now control size labels index association plots labsize linesize arguments plot method. private_alleles() gains drop argument. recode_polyploids() can now take haplodiploid data.","code":""},{"path":"/news/index.html","id":"bug-fix-2-2-0","dir":"Changelog","previous_headings":"","what":"BUG FIX","title":"poppr 2.2.0","text":"issue caused errors imsn() code output fixed (see https://github.com/grunwaldlab/poppr/issues/93) Caught bug mlg.filter() assignment method using nei.dist() instead diss.dist() distance specified. bug resulted significantly negative values bitwise.ia() large sample sizes fixed. Spotted @knausb (see https://github.com/grunwaldlab/poppr/issues/100) Fixed issue plot_filter_stats() wasn‚Äôt displaying full range MLGs Color vectors now correctly parsed passed msn functions (see https://github.com/grunwaldlab/poppr/issues/55) details. Long color vectors now accepted, albiet warning. issue mll.reset() reset non-MLG class objects mlg slot fixed.","code":""},{"path":"/news/index.html","id":"misc-2-2-0","dir":"Changelog","previous_headings":"","what":"MISC","title":"poppr 2.2.0","text":"Documentation mlg.filter() clarified updated examples. vignette ‚ÄúMigration poppr version 1‚Äù removed. Previously deprecated *hierarchy() functions removed.","code":""},{"path":"/news/index.html","id":"poppr-211","dir":"Changelog","previous_headings":"","what":"poppr 2.1.1","title":"poppr 2.1.1","text":"CRAN release: 2016-03-15","code":""},{"path":"/news/index.html","id":"new-features-2-1-1","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"poppr 2.1.1","text":"imsn() now collapsible side panels nmll() mll() now handle genind genlight objects rraf() now gives options minor allele correction encompassed internal function rare_allele_correction(). extends also pgen() psex(), must correct minor allele frequencies default. See https://github.com/grunwaldlab/poppr/issues/81 details.","code":""},{"path":"/news/index.html","id":"misc-2-1-1","dir":"Changelog","previous_headings":"","what":"MISC","title":"poppr 2.1.1","text":"mlg.filter() now defaults using diss.dist() default threshold filter_stats() now 1e+6 mlg.filter() now returns list instead pairlist ‚Äúhist‚Äù argument poppr() now deprecated favor ‚Äúplot‚Äù documentation improvements show method snpclone objects now looks distinct genlight genlight objects longer get passed missingno() filter_stats() filter_stats() now returns invisibly plot = TRUE; see https://github.com/grunwaldlab/poppr/issues/87 details.","code":""},{"path":"/news/index.html","id":"bug-fix-2-1-1","dir":"Changelog","previous_headings":"","what":"BUG FIX","title":"poppr 2.1.1","text":"supplied object strata, clonecorrect() default strata = NA. read.genalex() longer fail missing data coded zero; see https://github.com/grunwaldlab/poppr/issues/84 details missingno() longer removes genotypes specified threshold; see https://github.com/grunwaldlab/poppr/issues/90 details","code":""},{"path":"/news/index.html","id":"poppr-210","dir":"Changelog","previous_headings":"","what":"poppr 2.1.0","title":"poppr 2.1.0","text":"CRAN release: 2015-12-01","code":""},{"path":"/news/index.html","id":"improvements-2-1-0","dir":"Changelog","previous_headings":"","what":"IMPROVEMENTS","title":"poppr 2.1.0","text":"win.ia samp.ia gain significant speedup thanks Jonah Brooks implementing code C. internal code genotype_curve implemented C 10x increase speed.","code":""},{"path":"/news/index.html","id":"new-features-2-1-0","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"poppr 2.1.0","text":"poppr.msn, bruvo.msn, plot_poppr_msn gain ability take character vectors color palettes. See issue #55 (https://github.com/grunwaldlab/poppr/issues/55) details. plot_poppr_msn returns modified graph. functions related Bruvo‚Äôs distance can now take named vector repeat lengths order. See issue #61 (https://github.com/grunwaldlab/poppr/issues/61) details. aboot gains argument strata can automatically convert genind genpop. genotype_curve can now take loci objects pegas. can now specify maximum number loci analyze genotype_curve. filter_stats can now optionally plot histogram background. bruvo.dist can now optionally return distance matrices locus. addresed issue #60 (https://github.com/grunwaldlab/poppr/issues/60) aboot can now handle matrices previously specified documentation. aboot can now take custom functions calculate distance genlight objects. poppr.amova can now perform amova using pegas implementation.","code":""},{"path":"/news/index.html","id":"new-functions-2-1-0","dir":"Changelog","previous_headings":"","what":"NEW FUNCTIONS","title":"poppr 2.1.0","text":"rrmlg calculate round-robin multilocus genotypes locus. rraf calculate round-robin allele frequencies locus. pgen calculate probabilities observed genotypes. psex calculate probability observed genotype observed chance.","code":""},{"path":"/news/index.html","id":"new-traditionalists-2-1-0","dir":"Changelog","previous_headings":"","what":"NEW TRADITIONALISTS","title":"poppr 2.1.0","text":"‚Äôre cool.","code":""},{"path":"/news/index.html","id":"misc-2-1-0","dir":"Changelog","previous_headings":"","what":"MISC","title":"poppr 2.1.0","text":"Documentation genclone snpclone classes coherent. Accessors added internal MLG objects (developers). genotype accumulation curve displays iteration locus number instead progress bar. genotype accumulation plot now scaled 0 number observed mlgs. Documentation poppr.amova longer references ‚Äúhierarchy‚Äù slot.","code":""},{"path":"/news/index.html","id":"bug-fix-2-1-0","dir":"Changelog","previous_headings":"","what":"BUG FIX","title":"poppr 2.1.0","text":"Single locus data sets can now read read.genalex. brought issue #58 (Thanks Nick Wong spotting ). bug informloci MAF argument wasn‚Äôt applied P/data fixed. Printing genclone objects mixed ploidies previously reported erroneously due sorting error. fixed. Edge case missing cell genalex matrix interpreted literal ‚ÄúNA‚Äù fixed. msn functions now return nodes correctly named. See Issue #66 (https://github.com/grunwaldlab/poppr/issues/66) details.","code":""},{"path":"/news/index.html","id":"poppr-202","dir":"Changelog","previous_headings":"","what":"poppr 2.0.2","title":"poppr 2.0.2","text":"CRAN release: 2015-07-18","code":""},{"path":"/news/index.html","id":"bug-fix-2-0-2","dir":"Changelog","previous_headings":"","what":"BUG FIX","title":"poppr 2.0.2","text":"Definition Hexp fixed. originally mis-calculated, inflating metric. now correctly calculated documented. information issue #47","code":""},{"path":"/news/index.html","id":"poppr-201","dir":"Changelog","previous_headings":"","what":"poppr 2.0.1","title":"poppr 2.0.1","text":"CRAN release: 2015-07-14","code":""},{"path":"/news/index.html","id":"bug-fix-2-0-1","dir":"Changelog","previous_headings":"","what":"BUG FIX","title":"poppr 2.0.1","text":"Memory leak Bruvo‚Äôs distance fixed @JonahBrooks 90facb4 (issue #40) Cutoff field now works distances dissimilarity imsn (issue #41) Switching data sets longer shows error imsn read.genealex can now correctly import missing data diploids (issue #42)","code":""},{"path":"/news/index.html","id":"new-features-2-0-1","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"poppr 2.0.1","text":"Startup message now tells poppr compiled OMP support.","code":""},{"path":"/news/index.html","id":"poppr-200","dir":"Changelog","previous_headings":"","what":"poppr 2.0.0","title":"poppr 2.0.0","text":"CRAN release: 2015-07-08","code":""},{"path":"/news/index.html","id":"compatibility-update-2-0-0","dir":"Changelog","previous_headings":"","what":"COMPATIBILITY UPDATE","title":"poppr 2.0.0","text":"poppr moved version 2.0 due adegenet‚Äôs recent update. hierarchy slot introduced version 1.1 now moved adegenet renamed strata. maximum backwards compatibility, hierarchy methods still exist, deprecated print warning proper function use. accessing hierarchy slot without using *hierarchy() methods, code fail hierarchy slot now contain formula object.","code":""},{"path":"/news/index.html","id":"new-dependencies-2-0-0","dir":"Changelog","previous_headings":"","what":"NEW DEPENDENCIES","title":"poppr 2.0.0","text":"poppr now imports elements dplyr shiny required 2015-06-29, poppr now explicitly imports: stats, graphics, grDevices, utils","code":""},{"path":"/news/index.html","id":"new-suggests-2-0-0","dir":"Changelog","previous_headings":"","what":"NEW SUGGESTS","title":"poppr 2.0.0","text":"poppr now suggests cowplot, poweRlaw, polysat packages.","code":""},{"path":"/news/index.html","id":"new-data-2-0-0","dir":"Changelog","previous_headings":"","what":"NEW DATA","title":"poppr 2.0.0","text":"data set called Pram containing SSR genotypes Sudden Oak Death pathogen Phytophthora ramorum (Kamvar et.al., 2015)","code":""},{"path":"/news/index.html","id":"new-mint-flavor-2-0-0","dir":"Changelog","previous_headings":"","what":"NEW MINT FLAVOR","title":"poppr 2.0.0","text":"refreshing!","code":""},{"path":"/news/index.html","id":"new-features-2-0-0","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"poppr 2.0.0","text":"default plot index association now single histogram. user option visualize standardized index association (index = \"rbarD\", default) classic index association (index =   \"Ia\"). user uses function ia argument valuereturn =   TRUE, resulting object can plotted plot function. function poppr now plot populations single faceted plot instead one plot per population. aboot bruvo.boot now able utilize function generate trees (suggested issue #18). mlg slot genclone object can now optionally hold MLG class object. object contain different definitions multilocus genotypes, allowing user switch observed, custom, mlgs defined given genetic distance threshold. minimum spanning network functions gain ability include reticulations using option include.ties minimum spanning network functions gain ability collapse multilocus genotypes genetic distance option threshold. poppr.amova gains ability filter multilocus genotypes calculation. informloci gains argument ‚ÄúMAF‚Äù, allows specification minor allele frequency cutoff addition cutoff argument. Examples updated. aboot can now take genlight objects. poppr.msn plot_poppr_msn can now take genlight objects. plot_poppr_msn now gives users option exclude legends. Default plotting mlg.table longer produce one plot per population. now produce single ggplot object populations. Note bars longer colored count. poppr longer calculate ‚ÄúHexp‚Äù. Instead, Simpson‚Äôs index calumniated, old index can retrieved using (N/(N - 1))*lambda. poppr can now take statistic can calculated table multilocus genotype counts. genind2genalex gains ability selectively write different strata.","code":""},{"path":"/news/index.html","id":"new-functions-2-0-0","dir":"Changelog","previous_headings":"","what":"NEW FUNCTIONS","title":"poppr 2.0.0","text":"mlg.filter contract multilocus genotypes given genetic distance threshold using one three algorithms. can report statistics multilocus genotypes returned, number samples within multilocus genotype, thresholds multilocus genotypes collapsed, genetic distance matrix represents new multilocus genotypes. filter_stats show graphical output algorithms mlg.filter. cutoff_predictor predict cutoff threshold mlg.filter. bitwise.dist can efficiently calculate absolute genetic distance genlight objects. mll ‚Äúmultilocus lineages‚Äù new replacement mlg.vector gains functionality selecting multilocus genotype definition mlg slot. nmll counts number multilocus lineages mll.custom allows user define custom multilocus genotypes. mll.levels allows user edit names custom multilocus genotypes. poppr_has_parallel return TRUE poppr built OpenMP parallel library. win.ia calculates windows {r}_d along genlight chromosomes. samp.ia calculates {r}_d genlight object randomly sampling user-defined number SNPs. test_replen test repeat lengths microsatellite markers consistency. fix_replen fix inconsistent repeat lengths microsatellite markers. diversity_stats returns matrix containing diversity statistics. Defaults 4 found poppr, can extended statistic can calculated vector MLG counts. diversity_boot bootstrap MLG matrix statistics specified get_stats. Can also perform rarefaction bootstrap. diversity_ci calculate plot confidence intervals bootstrap resampling MLG matrix. includes rarefaction smallest sample size. imsn provides interactive shiny interface construction minimum spanning networks. pair.ia calculate index association pairs loci plot heatmaps.","code":""},{"path":"/news/index.html","id":"new-classes-2-0-0","dir":"Changelog","previous_headings":"","what":"NEW CLASSES","title":"poppr 2.0.0","text":"snpclone extension genlight object acts much like genclone. contains mlg slot. MLG internal class lives inside mlg slot snpclone genclone objects. allows user easily switch multilocus genotype definitions.","code":""},{"path":"/news/index.html","id":"bug-fixes-2-0-0","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"poppr 2.0.0","text":"going fast count.","code":""},{"path":"/news/index.html","id":"poppr-115","dir":"Changelog","previous_headings":"","what":"poppr 1.1.5","title":"poppr 1.1.5","text":"CRAN release: 2015-05-13","code":""},{"path":"/news/index.html","id":"bug-fix-1-1-5","dir":"Changelog","previous_headings":"","what":"BUG FIX","title":"poppr 1.1.5","text":"Fixed internal bug fix_negative_branch one branch negative edge. Fixed bug diss.dist single locus return error. Fixed bug poppr.amova single locus return error due repool_haplotypes. Fixed bug future! mlg.table now return matrix time (Fix #25).","code":""},{"path":"/news/index.html","id":"poppr-114","dir":"Changelog","previous_headings":"","what":"poppr 1.1.4","title":"poppr 1.1.4","text":"CRAN release: 2015-02-06","code":""},{"path":"/news/index.html","id":"bug-fix-1-1-4","dir":"Changelog","previous_headings":"","what":"BUG FIX","title":"poppr 1.1.4","text":"Fixed internal bug fails Windows OS.","code":""},{"path":"/news/index.html","id":"poppr-113","dir":"Changelog","previous_headings":"","what":"poppr 1.1.3","title":"poppr 1.1.3","text":"CRAN release: 2015-02-03","code":""},{"path":"/news/index.html","id":"new-features-1-1-3","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"poppr 1.1.3","text":"new arguments plot_poppr_msn allow easier manipulation node sizes labeling read.genalex can now take read text connections input. Addresses issue #8 users can now specify cutoff missing values aboot","code":""},{"path":"/news/index.html","id":"bug-fix-1-1-3","dir":"Changelog","previous_headings":"","what":"BUG FIX","title":"poppr 1.1.3","text":"Fixed issue monomorphic loci cause error recode_polyploids Fixed logical error cause infinite alleles model Bruvo‚Äôs distance inflate distance. (Found Michael Metzger. Addresses issue #5). AMOVA can now take subset genclone objects (Addresses issue #7). mlg.table, mlgsub argument now subset name instead index (fixed #7). Fixed issue neighbor-joining trees internal function fix negative branch lengths accidentally shuffling corrected branches. Addresses issue #11. diss.dist can now used aboot","code":""},{"path":"/news/index.html","id":"misc-1-1-3","dir":"Changelog","previous_headings":"","what":"MISC","title":"poppr 1.1.3","text":"info_table print discrete scale opposed colorbar type = ‚Äúploidy‚Äù attempted make model choices Bruvo‚Äôs distance clear documentation","code":""},{"path":"/news/index.html","id":"poppr-112","dir":"Changelog","previous_headings":"","what":"poppr 1.1.2","title":"poppr 1.1.2","text":"CRAN release: 2014-07-29","code":""},{"path":"/news/index.html","id":"bug-fix-1-1-2","dir":"Changelog","previous_headings":"","what":"BUG FIX","title":"poppr 1.1.2","text":"Fixed memory allocation bug (addresses issue #2). Memory allocated C function bruvo_dist now properly freed.","code":""},{"path":"/news/index.html","id":"poppr-111","dir":"Changelog","previous_headings":"","what":"poppr 1.1.1","title":"poppr 1.1.1","text":"CRAN release: 2014-07-27","code":""},{"path":"/news/index.html","id":"bug-fix-1-1-1","dir":"Changelog","previous_headings":"","what":"BUG FIX","title":"poppr 1.1.1","text":"Fixed bug loss add options Bruvo‚Äôs distance switched. Fixed illegal memory access error UBSAN. Made memory management internal C functions sane. (Addresses issue #2). Fixed directional quotes em-dashes produced Mavericks (Addresses issue #3).","code":""},{"path":"/news/index.html","id":"poppr-110","dir":"Changelog","previous_headings":"","what":"poppr 1.1.0","title":"poppr 1.1.0","text":"CRAN release: 2014-07-24","code":""},{"path":"/news/index.html","id":"new-features-1-1-0","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"poppr 1.1.0","text":"Polyploids ambiguous genotypes now supported poppr. See documentation recode_polyploids details. Calculations Bruvo‚Äôs distance now features correction partial missing data utilizing genome addition genome loss models presented Bruvo et al.¬†2004. diss.dist now options return raw distances matrix instead dist object. read.genalex now option import genclone object. default action. poppr.able analyze lists genind genclone objects. ia now argument valuereturn return sampled data. [bruvo,poppr].msn functions now give user choice show graph. bruvo.boot cleaner plot style.","code":""},{"path":"/news/index.html","id":"new-data-classes-1-1-0","dir":"Changelog","previous_headings":"","what":"NEW DATA CLASSES","title":"poppr 1.1.0","text":"genclone object new extension genind object adegenet. object contains slots containing population hierarchies multilocus genotype definitions work analyses adegenet poppr.","code":""},{"path":"/news/index.html","id":"new-functions-1-1-0","dir":"Changelog","previous_headings":"","what":"NEW FUNCTIONS","title":"poppr 1.1.0","text":"[get,set,name,split,add]hierarchy - functions manipulate hierarchy slot genclone object utilizing hierarchical formulae arguments simplification. setpop set population genclone object utilizing model formulae regarding hierarchy slot. .genclone automatically convert genind objects genclone objects. .genclone checks validity genclone objects. poppr.amova run amova hierarchical level. also includes feature run amova clone censored data sets. utilizes ade4 version amova. info_table calculate missing data per population per locus ploidy per individual per locus gives user option visualize heatmap. locus_table calculate diversity evenness statistics loci genind genclone object. *.dist functions calculate Nei‚Äôs distance, Rogers‚Äô Distance, Edwards‚Äô Distance, Reynolds‚Äô Distance, Provestis‚Äô Distance. aboot allow user create bootstrapped dendrograms distance can calculated genind genpop objects. plot_poppr_msn plot minimum spanning networks produced poppr. private_alleles give information presence private alleles within genind genclone object. recode_polyploids take polyploid genind/genclone object (missing alleles coded extra zero-value allele) recode frequencies relative observed number alleles. genotype_curve create genotype accumulation curve increasing number loci. mlg.id return list indicating samples belonging specific multilocus genotype.","code":""},{"path":"/news/index.html","id":"new-data-sets-1-1-0","dir":"Changelog","previous_headings":"","what":"NEW DATA SETS","title":"poppr 1.1.0","text":"Pinf - data set 86 isolates different populations late blight pathogen, Phytophthora infestans. Provided Erica Goss monpop - large data set 694 Monilinia fructicola isolates single orchard three years. Provided Sydney E. Everhart","code":""},{"path":"/news/index.html","id":"new-car-1-1-0","dir":"Changelog","previous_headings":"","what":"NEW CAR","title":"poppr 1.1.0","text":"really.","code":""},{"path":"/news/index.html","id":"namespace-changes-1-1-0","dir":"Changelog","previous_headings":"","what":"NAMESPACE CHANGES","title":"poppr 1.1.0","text":"poppr longer depends pegas. ade4 reshape2 now explicitly required.","code":""},{"path":"/news/index.html","id":"improvements-1-1-0","dir":"Changelog","previous_headings":"","what":"IMPROVEMENTS","title":"poppr 1.1.0","text":"default shuffling algorithm implemented C increase speed. output mlg functions now represented integers decrease size memory. mlg.matrix now calculated faster utilizing R‚Äôs internal tabulating capabilities. function poppr longer return rounded results, rather printed three significant digits.","code":""},{"path":"/news/index.html","id":"misc-1-1-0","dir":"Changelog","previous_headings":"","what":"MISC","title":"poppr 1.1.0","text":"Added unit tests. poppr user manual shortened include instructions data manipulation. new vignette, ‚ÄúAlgorithms Equations‚Äù gives algorithmic details calculations performed poppr.","code":""},{"path":[]},{"path":"/news/index.html","id":"update-1-0-7","dir":"Changelog","previous_headings":"","what":"UPDATE","title":"poppr 1.0.7","text":"Updated README include link poppr google group.","code":""},{"path":"/news/index.html","id":"bug-fix-update-1-0-7","dir":"Changelog","previous_headings":"","what":"BUG FIX UPDATE","title":"poppr 1.0.7","text":"Made last bug fix stable (corrected ape side).","code":""},{"path":"/news/index.html","id":"poppr-106","dir":"Changelog","previous_headings":"","what":"poppr 1.0.6","title":"poppr 1.0.6","text":"CRAN release: 2014-03-05","code":""},{"path":"/news/index.html","id":"bug-fix-1-0-6","dir":"Changelog","previous_headings":"","what":"BUG FIX","title":"poppr 1.0.6","text":"Fixed bug users downloaded ape version 3.1 higher bruvo.boot throw error.","code":""},{"path":"/news/index.html","id":"misc-1-0-6","dir":"Changelog","previous_headings":"","what":"MISC","title":"poppr 1.0.6","text":"Updated citation information.","code":""},{"path":"/news/index.html","id":"poppr-105","dir":"Changelog","previous_headings":"","what":"poppr 1.0.5","title":"poppr 1.0.5","text":"CRAN release: 2013-12-13","code":""},{"path":"/news/index.html","id":"notable-change-1-0-5","dir":"Changelog","previous_headings":"","what":"NOTABLE CHANGE","title":"poppr 1.0.5","text":"default shuffling algorithm calculating index association changed multilocus-style sampling permutation alleles. 4 methods available, new assignments follows: Method 1: permute alleles, Method 2: parametric bootstrap, Method 3: non-parametric bootstrap, Method 4: Multilocus-style sampling. Previously, Multilocus 1 rest followed order. compatibility issues change. Functions affected: ia, poppr shufflepop","code":""},{"path":"/news/index.html","id":"bug-fix-1-0-5","dir":"Changelog","previous_headings":"","what":"BUG FIX","title":"poppr 1.0.5","text":"Bootstrapping algorithm bruvo.boot function shuffling repeat lengths locus resulting potentially erroneous bootstrap support values. fixed implementing internal S4 class allow direct bootstrapping data repeat lengths together. occasional error, ‚ÄúINTEGER() can applied ‚Äòinteger‚Äô, ‚ÄòNULL‚Äô‚Äù bruvo.boot bruvo.dist fixed.","code":""},{"path":"/news/index.html","id":"improvements-1-0-5","dir":"Changelog","previous_headings":"","what":"IMPROVEMENTS","title":"poppr 1.0.5","text":"Changes bruvo.boot allow ever slightly faster bootstrapping.","code":""},{"path":"/news/index.html","id":"misc-1-0-5","dir":"Changelog","previous_headings":"","what":"MISC","title":"poppr 1.0.5","text":"Permutations I_A {r}_d now visualized progress bar opposed dots.","code":""},{"path":"/news/index.html","id":"poppr-104","dir":"Changelog","previous_headings":"","what":"poppr 1.0.4","title":"poppr 1.0.4","text":"CRAN release: 2013-12-04","code":""},{"path":"/news/index.html","id":"bug-fix-1-0-4","dir":"Changelog","previous_headings":"","what":"BUG FIX","title":"poppr 1.0.4","text":"previous error bootstrap values greater 100 reported bruvo.boot UPGMA trees fixed. normalization NJ trees.","code":""},{"path":"/news/index.html","id":"misc-1-0-4","dir":"Changelog","previous_headings":"","what":"MISC","title":"poppr 1.0.4","text":"github repository poppr changed github.com/poppr/poppr github.com/grunwaldlab/poppr","code":""},{"path":"/news/index.html","id":"poppr-103","dir":"Changelog","previous_headings":"","what":"poppr 1.0.3","title":"poppr 1.0.3","text":"CRAN release: 2013-08-21","code":""},{"path":"/news/index.html","id":"improvements-1-0-3","dir":"Changelog","previous_headings":"","what":"IMPROVEMENTS","title":"poppr 1.0.3","text":"Optimized internal sampling function run 2x faster. Utilized rmultinom function increase speed bootstrap sampling methods shufflepop ia.","code":""},{"path":"/news/index.html","id":"new-features-1-0-3","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"poppr 1.0.3","text":"Function informloci remove phylogenetically uninformative loci.","code":""},{"path":"/news/index.html","id":"namespace-1-0-3","dir":"Changelog","previous_headings":"","what":"NAMESPACE","title":"poppr 1.0.3","text":"Now importing specific functions igraph ape due dependency issues. Removed igraph, ape, ggplot2, phangorn form ‚ÄúDependencies‚Äù, keeping ‚ÄúImports‚Äù.","code":""},{"path":"/news/index.html","id":"bug-fixes-1-0-3","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"poppr 1.0.3","text":"read.genalex longer insert ‚ÄúX‚Äù front loci numeric names.","code":""},{"path":[]},{"path":"/news/index.html","id":"bug-fixes-1-0-2","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"poppr 1.0.2","text":"Fixed bug diss.dist function return inflated distance haploids.","code":""},{"path":"/news/index.html","id":"documentation-1-0-2","dir":"Changelog","previous_headings":"","what":"DOCUMENTATION","title":"poppr 1.0.2","text":"Added explanation index association poppr_manual. Expanded installation section include installation instructions github.","code":""},{"path":"/news/index.html","id":"misc-1-0-2","dir":"Changelog","previous_headings":"","what":"MISC","title":"poppr 1.0.2","text":"internal permutation algorithm longer lists permutations reverse order","code":""},{"path":"/news/index.html","id":"poppr-101","dir":"Changelog","previous_headings":"","what":"poppr 1.0.1","title":"poppr 1.0.1","text":"CRAN release: 2013-07-03","code":""},{"path":"/news/index.html","id":"improvements-1-0-1","dir":"Changelog","previous_headings":"","what":"IMPROVEMENTS","title":"poppr 1.0.1","text":"Algorithm index association updated increase speed.","code":""},{"path":"/news/index.html","id":"bug-fixes-1-0-1","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"poppr 1.0.1","text":"Removed unnecessary rounding factor missing data bruvo.dist. Corrected handling duplicate entries read.genind. Input values multiples specified repeat length Bruvo‚Äôs distance now rounded (opposed forced integers).","code":""},{"path":"/news/index.html","id":"misc-1-0-1","dir":"Changelog","previous_headings":"","what":"MISC","title":"poppr 1.0.1","text":"Vignette updated aesthetics reflect algorithmic changes.","code":""},{"path":"/news/index.html","id":"poppr-100","dir":"Changelog","previous_headings":"","what":"poppr 1.0.0","title":"poppr 1.0.0","text":"CRAN release: 2013-04-26","code":""},{"path":"/news/index.html","id":"misc-1-0-0","dir":"Changelog","previous_headings":"","what":"MISC","title":"poppr 1.0.0","text":"Poppr confirmed work Linux, Mac, Windows systems R 3.0.0. Vignette poppr_manual now cross-references different sections. Vignette poppr_manual quicker loading.","code":""},{"path":"/news/index.html","id":"bug-fixes-1-0-0","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"poppr 1.0.0","text":"removed alpha channel plot resampled values I_A {r}_d due warnings.","code":""},{"path":[]},{"path":"/news/index.html","id":"new-features-0-4-1","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"poppr 0.4.1","text":"getfile new argument, ‚Äúcombine‚Äù, automatically add path list files, can read without switching working directory. information printed screen missingno mlg.crosspop now wrapped 80 characters.","code":""},{"path":"/news/index.html","id":"bug-fixes-0-4-1","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"poppr 0.4.1","text":"poppr now able correctly recognize GenAlEx files geographic regional data. calculation index association P/data missing values longer return error.","code":""},{"path":[]},{"path":"/news/index.html","id":"bug-fixes-0-4","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"poppr 0.4","text":"mistake Bruvo‚Äôs distance correctly check ploidy level fixed. read.genalex able correctly distinguish SNP AFLP data. read.genalex can now correctly recognize regional formatting without extra column.","code":""},{"path":"/news/index.html","id":"new-features-0-4","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"poppr 0.4","text":"read.genalex now able take file formatted regional geographic data. genind2genalex can now export xy coordinates GenAlEx format. poppr_manual vignette now contains images example GenAlEx files.","code":""},{"path":"/news/index.html","id":"new-files-0-4","dir":"Changelog","previous_headings":"","what":"NEW FILES","title":"poppr 0.4","text":"rootrot2.csv example GenAlEx file formatted regional data.","code":""},{"path":"/news/index.html","id":"other-updates-0-4","dir":"Changelog","previous_headings":"","what":"OTHER UPDATES","title":"poppr 0.4","text":"function guessing repeat lengths Bruvo‚Äôs distance moved internal file. redundancy read.genalex removed. changed instructions README","code":""},{"path":[]},{"path":"/news/index.html","id":"bug-fixes-0-3-1","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"poppr 0.3.1","text":"read.genalex now give warning whenever input file comma delimited.","code":""},{"path":[]},{"path":"/news/index.html","id":"new-functions-0-3","dir":"Changelog","previous_headings":"","what":"NEW FUNCTIONS","title":"poppr 0.3","text":"poppr.msn draw minimum spanning network distance matrix derived data set.","code":""},{"path":"/news/index.html","id":"new-features-0-3","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"poppr 0.3","text":"vignette now sections describing poppr.msn, diss.dist, greycurve, section discussing export graphics.","code":""},{"path":"/news/index.html","id":"bug-fixes-0-3","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"poppr 0.3","text":"graphs output poppr ia now display {r}_d instead {r}_D. bruvo.boot now dedicated quiet argument.","code":""},{"path":[]},{"path":"/news/index.html","id":"new-features-0-2-2","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"poppr 0.2.2","text":"index association distributions now feature rug plot bottom better way visualize distribution index association shuffled data sets.","code":""},{"path":[]},{"path":"/news/index.html","id":"new-functions-0-2-1","dir":"Changelog","previous_headings":"","what":"NEW FUNCTIONS","title":"poppr 0.2.1","text":"diss.dist produce distance matrix based discreet distances. greycurve produce grey scale adjusted user-supplied parameters. useful future minimum spanning network functions.","code":""},{"path":"/news/index.html","id":"new-features-0-2-1","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"poppr 0.2.1","text":"bruvo.msn can now adjust edge grey level weighted toward either closely distantly weighted individuals. bruvo.msn now return list giving user graph color, label, weight properties can plot . legend arguments also returned.","code":""},{"path":"/news/index.html","id":"bug-fixes-0-2-1","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"poppr 0.2.1","text":"fixed shufflepop now shuffle PA markers specific method fixed warning message mistakes clonecorrect function.","code":""},{"path":[]},{"path":"/news/index.html","id":"new-features-0-2","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"poppr 0.2","text":"Added NEWS file now incrementing version number (3/15/2013)","code":""},{"path":"/news/index.html","id":"poppr-01","dir":"Changelog","previous_headings":"","what":"poppr 0.1","title":"poppr 0.1","text":"First development version poppr (2012 - 3/2013)","code":""}]
